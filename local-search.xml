<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>分布式系统设计论文</title>
    <link href="/blog/2022/05/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/"/>
    <url>/blog/2022/05/09/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h1 id="GFS"><a href="#GFS" class="headerlink" title="GFS"></a>GFS</h1><h2 id="DESIGN-OVERVIEW"><a href="#DESIGN-OVERVIEW" class="headerlink" title="DESIGN OVERVIEW"></a>DESIGN OVERVIEW</h2><h3 id="Assumptions"><a href="#Assumptions" class="headerlink" title="Assumptions"></a>Assumptions</h3><p>该系统是由许多廉价的商品组成的构建的，而这些部件经常发生故障。它必须不断地监测自己，并检测、容忍和及时、迅速恢复。</p><p>该系统存储了数量不多的大文件。我们预计有几百万个文件，每个文件通常有100MB或更大。多GB的文件是常见的情况并且应该被有效地管理。小文件必须被支持，但我们不需要为它们进行优化。</p><p>工作负载主要包括两种类型的读取。大型流式读取和小型随机读取。在大型流式读取，单个操作通常读取数百KB的数据，更常见的是1MB或更多。来自同一客户的连续操作通常会读取通过一个文件的连续区域。<br>一个小的随机读取通常是在某个任意的偏移处读取几KB的数据偏移量。对性能有要求的应用程序通常会批量并对他们的小型读取进行排序，以稳定地通过文件，而不是来回走动。</p><p>工作负载也有许多大的、连续的写操作将数据附加到文件上。一旦写入，文件就很少被再次修改。支持在文件的任意位置进行小规模的写入，但不一定要高效。</p><p>系统必须有效地实现定义良好的语义，以便多个客户端同时追加，多个客户端有效地实现良好的语义。我们的文件经常被用作生产者-消费者队列或用于多向合并。数百个的生产者，每台机器运行一个，将同时追加到一个文件。以最小的同步开销实现原子性是至关重要的。该文件可能会被读取，或者一个消费者可能正在读取该文件。</p><p>高持续带宽比低延迟更重要。我们的大多数目标应用都很重视高速处理数据，而很少有应用对一个文件的响应时间有严格的要求。而很少有人对单个读或写的响应时间有严格的要求。</p><h3 id="Interface"><a href="#Interface" class="headerlink" title="Interface"></a>Interface</h3><p>GFS提供了一个熟悉的文件系统接口，尽管它没有实现POSIX等标准API。</p><p>此外，GFS还有快照和记录追加操作。快照能以较低的成本创建一个文件或目录树的副本。记录追加允许多个客户端同时向同一个文件追加数据，同时保证了同时保证每个客户的追加操作的原子性。它对于实现多路合并结果和生产者-消费者队列很有用，许多客户可以同时追加数据而不需要额外的锁定。</p><h3 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h3><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/arch.png" alt="image-20220509115348495"></p><p>一个GFS集群由一个master和多个chunkservers，并由多个client访问，如图1所示。每个客户通常是一台运行用户级服务器进程的Linux机器，只要机器资源允许，很容易在同一台机器上同时运行chunkserver和客户端。</p><p>文件被划分为固定大小的块。每个块是由一个不可改变的、全局唯一的64位块来识别句柄来识别，句柄由主站在创建块时分配。Server将分块作为Linux文件存储在本地磁盘上，并且读取或写入由chunkhandle和字节范围指定的chunkdata。为了保证可靠性，每个分块都会在多个分块服务器上进行复制。默认情况下，我们存储三个副本，不过用户可以为文件命名空间的不同区域指定不同的复制级别。</p><p>主站维护所有的文件系统元数据。这包括命名空间、访问控制信息、从文件到块的映射，以及块的当前位置。它还控制着全系统的活动，如：分块管理、无主文件的垃圾收集和分块服务器之间的分块迁移。主站在HeartBeat消息中定期与每个chunkserver进行通信，向它发出指令并收集它的信息。</p><p>连接到每个应用程序的GFS客户端代码实现了文件系统API，并与master和chunkservers进行通信，客户端与主站进行元数据操作的交互，但所有的数据通信都是直接到chunkservers。</p><p>客户端和chunkserver都不对文件数据进行缓存。客户端缓存的好处很少，因为大多数应用程序流过巨大的文件或者工作集太大缓存。没有缓存可以简化客户端和通过消除缓存的一致性问题来简化客户端和整个系统。(然而，客户端会对元数据进行缓存。) </p><p>Chunkservers不需要对文件数据进行缓存，因为Chunkservers会对文件数据进行缓存。不需要缓存文件数据，因为分块是作为本地文件存储的所以Linux的缓冲区缓存已经把经常访问的数据在内存中。</p><h3 id="Single-Master"><a href="#Single-Master" class="headerlink" title="Single Master"></a>Single Master</h3><p>单一的master极大地简化了我们的设计，并且使得master能够利用全局知识做出复杂的分块放置和复制的决定。然而，我们必须尽量减少它在读和写方面的参与，这样它就不会成为一个瓶颈。客户端永远不会通过主服务器读写文件数据。相反，客户端会询问<br>它应该联系哪些分块服务器。它缓存这个信息，并在有限的时间内与在随后的许多操作中直接与chunkservers交互。</p><p>让我们参照图1来解释一下简单读取的交互方式。首先，使用固定的chunksize，客户端将文件名和应用程序指定的字节偏移量翻译成文件中的chunkindex。然后，它向主站发送一个包含文件名和块索引的请求。主站会回复相应的chunk handle和副本的位置。客户端使用文件名和chunkindex作为键来缓存这些信息。然后，客户端向其中一个副本发送请求，最有可能是最近的一个。该请求指定了chunk handle和该块中的一个字节范围。进一步读取同一块数据时，不再需要客户端和主站之间的互动，直到缓存的信息过期或文件被重新打开。</p><p>事实上，客户端通常会在同一个请求中要求多个块，主控端也可以在请求中包含一个块。而主控端也可以包括紧接着请求的那些块的信息。这种额外的信息可以避免未来几次客户端与主站之间的交互，而且几乎没有额外的成本。</p><h3 id="Chunk-Size"><a href="#Chunk-Size" class="headerlink" title="Chunk Size"></a>Chunk Size</h3><p>块状大小是关键的设计参数之一。我们选择了64MB，这比典型的文件系统块大小大得多。每个chunkreplica都是作为一个普通的Linux文件，并且只在需要时进行扩展。懒惰的空间分配避免了由于内部碎片而造成的空间浪费。这也许是反对这么大块头的最大反对意见。</p><p>大块提供了几个重要的优势。</p><p>首先，它减少了客户与主站的交互需求，因为在同一块上的读和写只需要读取和写入同一个块只需要向主站发出一个初始请求来获取块的位置信息。这种减少对于我们的工作负载来说特别重要，因为应用程序大多是按顺序读写大文件。即使是小规模的随机读取，客户端也可以舒适地缓存一个多TB工作集的分块定位信息。</p><p>第二，由于在一个大块上，客户更有可能进行许多操作。客户端更有可能在一个给定的块上执行许多操作，它可以通过在很长一段时间内保持与chunkserver的持续TCP连接来减少网络开销。</p><p>第三，它减少了元数据的大小存储在主服务器上的元数据的大小。这使我们能够将元数据保留在内存中</p><p>另一方面，一个大的分块大小，即使有懒分配，也有其缺点。一个小文件由少量的块，也许只有一个。储存这些分块的分块服务器<br>储存这些块的服务器可能会成为热点，如果许多客户访问同一个文件，存储这些块的块服务器可能会成为热点。在实践中，热点并不是一个主要问题，因为我们的应用程序大多是按顺序读取大型多块文件的顺序。然而，当GFS第一次被用于批处理队列系统时，热点确实出现了。一个可执行文件被写进GFS，作为一个单块文件，然后在数百台机器上同时启动。储存这个可执行文件的少数chunkservers被数以百计的同时请求弄得不堪重负。我们通过存储这种可执行文件来解决这个问题用更高的复制系数，并使批处理队列系统错开应用程序的启动时间来解决这个问题。一个潜在的长期解决方案是允许客户端在这种情况下从其他客户端读取数据。</p><h3 id="Metadata"><a href="#Metadata" class="headerlink" title="Metadata"></a>Metadata</h3><p>master存储了三种主要的元数据：文件和块的命名空间，文件到块的映射，以及每个块的位置。所有的元数据都是都保存在主内存中。前两种类型（命名空间和文件到块的映射）也通过以下方式保持持久性，将更改记录存储到在master本地磁盘上的操作日志中，并复制到远程机器上。使用日志使我们能够简单、可靠地更新master状态，并且在master崩溃的情况下不存在不一致的风险。master并不持久地存储chunklocation信息。相反，每个chunkserver加入时集群时，它都会询问每个chunkserver的chunks。</p><h4 id="In-Memory-Data-Structures"><a href="#In-Memory-Data-Structures" class="headerlink" title="In-Memory Data Structures"></a>In-Memory Data Structures</h4><p>由于元数据被存储在内存中，主操作是快速的。此外，master很容易和有效地在后台周期性地在后台扫描其整个状态。这种定期扫描被用来实现chunkgarbage收集，在chunkserver发生故障时进行re-replication，以及进行chunkmigration以平衡chunkservers之间的负载和磁盘空间使用。<br>这种仅有内存的方法的一个潜在问题，块的数量以及整个系统的容量受到内存数量的限制。整个系统的容量受限于主服务器的内存大小。<br>这在实践中并不是一个严重的限制。主站为每个64MB的块维护不到64字节的元数据。大多数块都是满的，因为大多数文件包含许多<br>块，其中只有最后一个可能被部分填充。同样地，文件命名空间数据通常需要少于64字节，因为它使用前缀压缩来紧凑地存储文件名。<br>如果有必要支持更大的文件系统，在主服务器上增加额外内存的成本是一个很小的代价。</p><h4 id="Chunk-Locations"><a href="#Chunk-Locations" class="headerlink" title="Chunk Locations"></a>Chunk Locations</h4><p>master并不对chunkservers中的chunk Location进行持久化。它只是在启动时向chunkservers询问该信息。主站此后可以保持自己的最新状态，因为它控制所有的chunkplacement，并通过定期的HeartBeat消息监控chunkserver状态。我们最初试图将分块位置信息持久在master，但我们认为在启动时从chunkservers那里请求数据要简单得多。而且这样解决了以下问题，保持master和chunkservers同步的问题，加入和离开集群，改变名称，失败，重新启动，等等。诸如此类的问题。在一个有数百个服务器的集群中，这些事件发生得太频繁了。</p><p>理解这一设计决定的另一种方式是，认识到一个chunkserver对它的分块有最终决定权，<br>试图在master上保持对这些信息的一致看法是没有意义的，因为chunkserver上的错误可能导致<br>chunkserver上的错误可能导致chunks自发地消失（例如，一个磁盘可能坏了<br>并被禁用），或者操作员可能会重新命名一个chunkserver。</p><h4 id="Operation-Log"><a href="#Operation-Log" class="headerlink" title="Operation Log"></a>Operation Log</h4><p>操作日志包含元数据变化的历史记录。它不仅是它不仅是元数据的唯一持久性记录，而且它还作为一个逻辑时间线，定义了并发操作的顺序。文件和块，以及它们的版本，都是由它们创建的逻辑时间来唯一地识别的。<br>由于操作日志是至关重要的，我们必须可靠地存储它，并且在元数据的变化被持久化之前，不使客户端看到变化。否则，我们会失去整个文件系统或最近的客户端操作，即使这些块本身仍然存在。因此，我们把它复制到</p><p>因此，在本地和远程写日志后再对客户端操作进行响应。master 一次写多个日志记录以提高系统的吞吐量，master 通过redo 来还原系统的状态。</p><p>为了尽量减少启动时间，必须保持日志很小。每当日志的大小超过一定程度时，主站就会对其状态进行检查，这样它就可以通过从本地磁盘加载最新的检查点来恢复，然后只执行有限数量的日志记录。检查点是紧凑的B树形式，可以直接映射到内存中，并用于命名空间查找，而不需要额外的解析，这进一步加快了恢复速度并提高了可用性。检查点点建立需要一段时间，单独开线程。恢复只需要最新的完整检查点和随后的日志文件。较早的检查点和日志文件可以可以自由删除，尽管我们保留了一些以防范以防止灾难发生。在检查点过程中出现的故障不会影响正确性，因为恢复代码会检测并跳过不完整的检查点。</p><h3 id="Consistency-Model"><a href="#Consistency-Model" class="headerlink" title="Consistency Model"></a>Consistency Model</h3><p>GFS有一个简单、高效 、宽松的一致性模型，可以很好地支持我们的高度分布式应用。</p><h4 id="Guarantees-by-GFS"><a href="#Guarantees-by-GFS" class="headerlink" title="Guarantees by GFS"></a>Guarantees by GFS</h4><p>文件命名空间的更改（例如，文件创建）是原子性的，它们完全由master处理：命名空间锁定保证了原子性和正确性。<br>master的操作日志定义了这些操作的全局总顺序。</p><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/consistence.png" alt="image-20220509154651324"></p><p>数据更改后的文件区域的状态取决于更改的类型、更改的成功或失败，以及是否有并发的更改，表1总结了这一结果。如果一个文件区域是一致的，那么所有的客户将始终看到相同的数据，无论他们从哪个副本读取的数据。如果一个文件区域在文件数据更改后被定义为是一致的，并且客户端将看到更改后写下的全部内容。</p><p>下面我们将描述我们的应用如何区分已定义区域和未定义区域。应用程序不需要进一步区分不同种类的未定义区域之间。<br>数据更改可能是写或记录附加。写导致数据被写入一个应用程序指定的文件偏移。记录追加会导致数据（”记录”）被至少追加一次。<br>(“常规 “追加只是在客户认为是当前文件末尾的偏移处的写)。该偏移量被返回给客户端，并标志着包含记录的定义区域的开始。<br>此外，GFS可能会在中间插入填充物或记录的重复部分。它们所占据的区域被认为是不一致的，并且通常与用户数据量相比相形见绌。<br>在一连串成功的更改之后，更改后的文件区域保证被定义并包含最后一次更改所写入的数据。</p><p>GFS通过以下方式实现了这一点<br>(a) 在所有副本上以相同的顺序对一个块进行更改。<br>(b)使用chunkversion号码来检测</p><p>任何因为在chunkserver关闭时错过了更改而变得陈旧的副本（第4.5节）。陈旧的复制体将永远不会参与更改，也不会被提供给向master询问。它们会在最早的时候被垃圾回收。由于客户机对分块位置进行了缓存，他们可能会在信息被刷新之前从一个陈旧的副本中读取。</p><p>这个窗口是由缓存条目的超时和下一次打开文件的时间来限制的。文件的下一次打开，会从缓存中清除该文件的所有分块信息。此外，由于我们的大多数文件是只使用附录，一个陈旧的副本通常会返回一个过早的的结束，而不是过时的数据。当一个客户端重新尝试并联系主站时，它将立即得到当前的chunklocations。GFS通过定期的握手来chunkservers之间的定期握手，并通过校验检测数据损坏。<br>一旦问题出现，数据尽快从有效的复制中恢复数据（第4.3节）。一个数据块只有在GFS做出反应之前，其所有的复制体都丢失了，才是不可逆转的损失。</p><h4 id="Implications-for-Applications"><a href="#Implications-for-Applications" class="headerlink" title="Implications for Applications"></a>Implications for Applications</h4><p>GFS应用可以通过一些简单的技术来适应宽松的一致性模型。依靠追加而不是覆盖，检查点，以及编写自我验证、自我识别的记录。<br>实际上，我们所有的应用程序都是通过追加而不是覆盖来改变文件的。<br>在一个典型的应用中，一个写入器从头到尾生成一个文件。在写完所有的文件后，它以原子方式将文件重命名为一个永久的名字，或者定期检查已经成功写入了多少数据。检查点也可能包括应用层面的校验。读取器只验证和处理到最后一个检查点的文件区域。到最后一个检查点的文件区域，该区域已知处于定义的状态。不管一致性和并发性问题如何，这种方法对我们来说是很好的。与随机写入相比，追加的效率要高得多，对应用程序的故障也更有弹性。</p><p>检查点允许写入者以增量方式重启，并使读取者不会处理成功写入的文件数据，因为从应用程序的角度来看，这些数据仍然不完整。<br>在另一个典型的使用中，许多写者同时追加到一个文件中以获得合并的结果，或者作为一个生产者-消费者的<br>队列。Record append的append-at-least-once语义保留了每个写入者的输出。读取器处理偶尔出现的填充和重复的情况如下。写记录包含额外的信息，如校验和，以便可以验证其有效性。读者可以识别并丢弃额外的填充物和记录片段使用校验和。如果它不能容忍偶尔的重复（例如，如果它们会触发非空洞的操作），它可以使用记录中的唯一标识符将它们过滤掉。记录中的唯一标识符，这些标识符通常需要用来命名相应的应用实体，如网络文档。</p><h2 id="SYSTEM-INTERACTIONS"><a href="#SYSTEM-INTERACTIONS" class="headerlink" title="SYSTEM INTERACTIONS"></a>SYSTEM INTERACTIONS</h2><p>我们设计了这个系统，以尽量减少主站在所有操作中的参与。有了这个背景，我们现在描述一下客户端、主控端和chunkservers是如何互动的，以便实现数据更改、原子记录追加和快照。</p><h3 id="Leases-and-Mutation-Order"><a href="#Leases-and-Mutation-Order" class="headerlink" title="Leases and Mutation Order"></a>Leases and Mutation Order</h3><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E5%88%86%E5%B8%83%E5%BC%8F%E7%B3%BB%E7%BB%9F/interaction.png" alt="image-20220509163219102"></p>]]></content>
    
    
    <categories>
      
      <category>论文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分布式、GFS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>剑指offer</title>
    <link href="/blog/2022/02/05/offer/"/>
    <url>/blog/2022/02/05/offer/</url>
    
    <content type="html"><![CDATA[<h1 id="双栈队列"><a href="#双栈队列" class="headerlink" title="双栈队列"></a>双栈队列</h1><p><img src="/blog/2022/02/05/offer/CQueue.png" alt="image-20220205185541039"></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CQueue</span> </span>&#123;<br>    Stack&lt;Integer&gt; in;<br>    Stack&lt;Integer&gt; out;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        in = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        out = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">appendTail</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        in.push(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">deleteHead</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (out.isEmpty()) &#123;<br>            <span class="hljs-keyword">while</span> (!in.isEmpty()) out.push(in.pop());<br>        &#125;<br>        <span class="hljs-keyword">if</span>(out.isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> out.pop();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><p><img src="/blog/2022/02/05/offer/fib.png" alt="image-20220205190001684"></p><p>方法：一维动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        c = (a + b) % <span class="hljs-number">1000000007</span>;<br>        a = b;<br>        b = c;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="重复的数字"><a href="#重复的数字" class="headerlink" title="重复的数字"></a>重复的数字</h1><p><img src="/blog/2022/02/05/offer/repeatNum.png" alt="image-20220205190452839"></p><p>方法：见注释   修改两次为重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findRepeatNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">//当前元素原本指向的元素</span><br>        <span class="hljs-keyword">int</span> k = nums[i];<br>        <span class="hljs-keyword">if</span> (k &lt; <span class="hljs-number">0</span>) k += n;<br><br>        <span class="hljs-comment">//如果已经被修改过,表示当前元素是重复的</span><br>        <span class="hljs-keyword">if</span> (nums[k] &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> k;<br><br>        <span class="hljs-comment">//没有修改过,进行修改</span><br>        nums[k] -= n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二维数组查找"><a href="#二维数组查找" class="headerlink" title="二维数组查找"></a>二维数组查找</h1><p><img src="/blog/2022/02/05/offer/findNumIn2DArray.png" alt="image-20220205191017656"></p><p>方法：二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">findNumberIn2DArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] matrix, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = matrix.length;<br>    <span class="hljs-keyword">if</span> (m == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">int</span> n = matrix[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> j = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>        <span class="hljs-keyword">if</span> (matrix[i][j] == target) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-comment">//二分查找列 j[0 - j-1]  ,找到第一个小于等于</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (matrix[i][j] &gt; target) &#123;<br>            <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> r = j - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                <span class="hljs-keyword">int</span> mid = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (matrix[i][mid] &gt; target) r = mid - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> l = mid;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (r &lt; <span class="hljs-number">0</span> || matrix[i][r] &gt; target) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            j = r;<br>        &#125;<br>        <span class="hljs-comment">// 二分查找行 i[i+1, m-1] ,找到第一个大于等于</span><br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> l = i + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> r = m - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (matrix[mid][j] &lt; target) l = mid + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> r = mid;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l &gt; m - <span class="hljs-number">1</span> || matrix[l][j] &lt; target) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            i = l;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="跳台阶"><a href="#跳台阶" class="headerlink" title="跳台阶"></a>跳台阶</h1><p><img src="/blog/2022/02/05/offer/jump.png" alt="image-20220205190208571"></p><p>方法：一维动态规划</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numWays</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span>; i &lt;= n; i++) &#123;<br>        c = (a + b) % <span class="hljs-number">1000000007</span>;<br>        a = b;<br>        b = c;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="旋转数组的查找"><a href="#旋转数组的查找" class="headerlink" title="旋转数组的查找"></a>旋转数组的查找</h1><p><img src="/blog/2022/02/05/offer/minArray.png" alt="image-20220205191242154"></p><p>方法：二分查找</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">minArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] numbers)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = numbers.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (numbers[mid] &gt; numbers[r]) l = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (numbers[mid] == numbers[r]) r--;<br>        <span class="hljs-keyword">else</span> r = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Math.min(numbers[l], numbers[<span class="hljs-number">0</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h1><p><img src="/blog/2022/02/05/offer/path.png" alt="image-20220205210205321"></p><p>方法：dfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">exist</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, String word)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = board.length;<br>    <span class="hljs-keyword">int</span> n = board[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">boolean</span>[][] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (dfs(board, word, visited, i, j, <span class="hljs-number">0</span>)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] board, String word, <span class="hljs-keyword">boolean</span>[][] visited, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> idx)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (idx == word.length()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || i &gt;= board.length || j &lt; <span class="hljs-number">0</span> || j &gt;= board[<span class="hljs-number">0</span>].length || visited[i][j] || board[i][j] != word.charAt(idx))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    visited[i][j] = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">boolean</span> res = dfs(board, word, visited, i + <span class="hljs-number">1</span>, j, idx + <span class="hljs-number">1</span>) ||<br>            dfs(board, word, visited, i - <span class="hljs-number">1</span>, j, idx + <span class="hljs-number">1</span>) ||<br>            dfs(board, word, visited, i, j + <span class="hljs-number">1</span>, idx + <span class="hljs-number">1</span>) ||<br>            dfs(board, word, visited, i, j - <span class="hljs-number">1</span>, idx + <span class="hljs-number">1</span>);<br>    visited[i][j] = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="替换空格"><a href="#替换空格" class="headerlink" title="替换空格"></a>替换空格</h1><p><img src="/blog/2022/02/05/offer/replaceSpace.png" alt="image-20220206122102020"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">replaceSpace</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> length = s.length();<br>    <span class="hljs-keyword">char</span>[] array = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[length * <span class="hljs-number">3</span>];<br>    <span class="hljs-keyword">int</span> size = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>        <span class="hljs-keyword">char</span> c = s.charAt(i);<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27; &#x27;</span>) &#123;<br>            array[size++] = <span class="hljs-string">&#x27;%&#x27;</span>;<br>            array[size++] = <span class="hljs-string">&#x27;2&#x27;</span>;<br>            array[size++] = <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            array[size++] = c;<br>        &#125;<br>    &#125;<br>    String res = <span class="hljs-keyword">new</span> String(array, <span class="hljs-number">0</span>, size);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="机器人的运动范围"><a href="#机器人的运动范围" class="headerlink" title="机器人的运动范围"></a>机器人的运动范围</h1><p><img src="/blog/2022/02/05/offer/range.png" alt="image-20220206121639479"></p><p>方法：dfs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">movingCount</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span>[][] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];<br>    <span class="hljs-keyword">return</span> dfs(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, m, n, k, visited);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">boolean</span>[][] visited)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= m || j &gt;= n || visited[i][j] || sum(i) + sum(j) &gt; k) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    visited[i][j] = <span class="hljs-keyword">true</span>;<br>    System.out.println(i + <span class="hljs-string">&quot; &quot;</span> + j);<br>    <span class="hljs-keyword">return</span> dfs(i + <span class="hljs-number">1</span>, j, m, n, k, visited) + dfs(i, j + <span class="hljs-number">1</span>, m, n, k, visited) + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>        sum += n % <span class="hljs-number">10</span>;<br>        n /= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="从尾到头打印链表"><a href="#从尾到头打印链表" class="headerlink" title="从尾到头打印链表"></a>从尾到头打印链表</h1><p><img src="/blog/2022/02/05/offer/printFromTailToHead.png" alt="image-20220206123324634"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] reversePrint2(ListNode head) &#123;<br>    <span class="hljs-keyword">int</span> length = <span class="hljs-number">0</span>;<br>    ListNode node = head;<br>    <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>) &#123;<br>        node = node.next;<br>        length++;<br>    &#125;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[length];<br><br>    node = head;<br>    <span class="hljs-keyword">while</span> (node != <span class="hljs-keyword">null</span>) &#123;<br>        res[--length] = node.val;<br>        node = node.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="重建二叉树"><a href="#重建二叉树" class="headerlink" title="重建二叉树"></a>重建二叉树</h1><p><img src="/blog/2022/02/05/offer/rebuildTree.png" alt="image-20220206124628018"></p><p>方法一：递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">buildTree</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder)</span> </span>&#123;<br>    Map&lt;Integer, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; inorder.length; i++) &#123;<br>        map.put(inorder[i], i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> rebuild(preorder, inorder, map, <span class="hljs-number">0</span>, preorder.length - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, inorder.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> TreeNode <span class="hljs-title">rebuild</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] preorder, <span class="hljs-keyword">int</span>[] inorder, Map&lt;Integer, Integer&gt; map, <span class="hljs-keyword">int</span> preStart, <span class="hljs-keyword">int</span> preEnd, <span class="hljs-keyword">int</span> inStart, <span class="hljs-keyword">int</span> inEnd)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (preStart &gt; preEnd || inStart &gt; inEnd) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    TreeNode root = <span class="hljs-keyword">new</span> TreeNode(preorder[preStart]);<br>    <span class="hljs-keyword">int</span> idx = map.get(preorder[preStart]);<br>    root.left = rebuild(preorder, inorder, map, preStart + <span class="hljs-number">1</span>, preStart + idx - inStart, inStart, idx - <span class="hljs-number">1</span>);<br>    root.right = rebuild(preorder, inorder, map, preStart + idx - inStart + <span class="hljs-number">1</span>, preEnd, idx + <span class="hljs-number">1</span>, inEnd);<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：迭代</p><h1 id="剪绳子"><a href="#剪绳子" class="headerlink" title="剪绳子"></a>剪绳子</h1><p><img src="/blog/2022/02/05/offer/cuttingRope.png" alt="image-20220206131124703"></p><p>方法：数学推导</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">cuttingRope2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(n &lt;= <span class="hljs-number">3</span>) <span class="hljs-keyword">return</span> n - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> a = n / <span class="hljs-number">3</span>, b = n % <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">3</span>, a);<br>    <span class="hljs-keyword">if</span>(b == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">3</span>, a - <span class="hljs-number">1</span>) * <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>)Math.pow(<span class="hljs-number">3</span>, a) * <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="合并两个排序的链表"><a href="#合并两个排序的链表" class="headerlink" title="合并两个排序的链表"></a>合并两个排序的链表</h1><p><img src="/blog/2022/02/05/offer/mergeLinkedList.png" alt="image-20220206134417189"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>    ListNode dummy = <span class="hljs-keyword">new</span> ListNode();<br>    ListNode ptr = dummy;<br>    <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> &amp;&amp; l2 != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (l1.val &lt; l2.val) &#123;<br>            ptr.next = l1;<br>            l1 = l1.next;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ptr.next = l2;<br>            l2 = l2.next;<br>        &#125;<br>        ptr = ptr.next;<br>    &#125;<br>    ptr.next = l1 == <span class="hljs-keyword">null</span> ? l2 : l1;<br>    <span class="hljs-keyword">return</span> dummy.next;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="树的子结构"><a href="#树的子结构" class="headerlink" title="树的子结构"></a>树的子结构</h1><p><img src="/blog/2022/02/05/offer/subTree.png" alt="image-20220206140422876"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSubStructure</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (A == <span class="hljs-keyword">null</span> || B == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> subStructure(A, B) || isSubStructure(A.left, B) || isSubStructure(A.right, B);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">subStructure</span><span class="hljs-params">(TreeNode A, TreeNode B)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (B == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (A == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> A.val == B.val &amp;&amp; subStructure(A.left, B.left) &amp;&amp; subStructure(A.right, B.right);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉树的镜像"><a href="#二叉树的镜像" class="headerlink" title="二叉树的镜像"></a>二叉树的镜像</h1><p><img src="/blog/2022/02/05/offer/mirror.png" alt="image-20220207125331133"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">mirrorTree</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    TreeNode left = mirrorTree(root.left);<br>    root.left = mirrorTree(root.right);<br>    root.right = left;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="对称二叉树"><a href="#对称二叉树" class="headerlink" title="对称二叉树"></a>对称二叉树</h1><p><img src="/blog/2022/02/05/offer/isSymmetric.png" alt="image-20220207125229066"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> symmetric(root, root);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">symmetric</span><span class="hljs-params">(TreeNode tree1, TreeNode tree2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tree1 == <span class="hljs-keyword">null</span> &amp;&amp; tree2 == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (tree1 == <span class="hljs-keyword">null</span> || tree2 == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">return</span> tree1.val == tree2.val &amp;&amp; symmetric(tree1.left, tree2.right) &amp;&amp; symmetric(tree1.right, tree2.left);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="调整数组使奇数在偶数之前"><a href="#调整数组使奇数在偶数之前" class="headerlink" title="调整数组使奇数在偶数之前"></a>调整数组使奇数在偶数之前</h1><p><img src="/blog/2022/02/05/offer/exchange.png" alt="image-20220207131051282"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] exchange(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    <span class="hljs-keyword">int</span> odd = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> even = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (odd &lt; even) &#123;<br>        <span class="hljs-keyword">while</span> (odd &lt; even &amp;&amp; (nums[odd] &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) odd++;<br>        <span class="hljs-keyword">while</span> (odd &lt; even &amp;&amp; (nums[even] &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) even--;<br>        <span class="hljs-keyword">int</span> tmp = nums[odd];<br>        nums[odd] = nums[even];<br>        nums[even] = tmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二进制中1的个数"><a href="#二进制中1的个数" class="headerlink" title="二进制中1的个数"></a>二进制中1的个数</h1><p><img src="/blog/2022/02/05/offer/numOf1.png" alt="image-20220207132948484"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hammingWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        res += n &amp; <span class="hljs-number">1</span>;<br>        n &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">hammingWeight2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (n != <span class="hljs-number">0</span>) &#123;<br>        n &amp;= n - <span class="hljs-number">1</span>;<br>        res++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="顺时针打印矩阵"><a href="#顺时针打印矩阵" class="headerlink" title="顺时针打印矩阵"></a>顺时针打印矩阵</h1><p><img src="/blog/2022/02/05/offer/spiralOrder.png" alt="image-20220207141115949"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] spiralOrder(<span class="hljs-keyword">int</span>[][] matrix) &#123;<br>    <span class="hljs-keyword">if</span> (matrix == <span class="hljs-keyword">null</span> || matrix.length == <span class="hljs-number">0</span> || matrix[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br>    <span class="hljs-keyword">int</span> rows = matrix.length, columns = matrix[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">int</span>[] order = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[rows * columns];<br>    <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> left = <span class="hljs-number">0</span>, right = columns - <span class="hljs-number">1</span>, top = <span class="hljs-number">0</span>, bottom = rows - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (left &lt;= right &amp;&amp; top &lt;= bottom) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = left; column &lt;= right; column++) &#123;<br>            order[index++] = matrix[top][column];<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = top + <span class="hljs-number">1</span>; row &lt;= bottom; row++) &#123;<br>            order[index++] = matrix[row][right];<br>        &#125;<br>        <span class="hljs-keyword">if</span> (left &lt; right &amp;&amp; top &lt; bottom) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> column = right - <span class="hljs-number">1</span>; column &gt; left; column--) &#123;<br>                order[index++] = matrix[bottom][column];<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> row = bottom; row &gt; top; row--) &#123;<br>                order[index++] = matrix[row][left];<br>            &#125;<br>        &#125;<br>        left++;<br>        right--;<br>        top++;<br>        bottom--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> order;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="链表中倒数第K个节点"><a href="#链表中倒数第K个节点" class="headerlink" title="链表中倒数第K个节点"></a>链表中倒数第K个节点</h1><p><img src="/blog/2022/02/05/offer/kth.png" alt="image-20220207142426403"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getKthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    ListNode p1 = head, p2 = head;<br>    <span class="hljs-keyword">while</span> (p1 != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (k-- &lt;= <span class="hljs-number">0</span>) &#123;<br>            p2 = p2.next;<br>        &#125;<br>        p1 = p1.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p2;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数值的整数次方"><a href="#数值的整数次方" class="headerlink" title="数值的整数次方"></a>数值的整数次方</h1><p><img src="/blog/2022/02/05/offer/myPow.png" alt="image-20220210140744398"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">myPow</span><span class="hljs-params">(<span class="hljs-keyword">double</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (x == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> b = n;<br>    <span class="hljs-keyword">double</span> res = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-keyword">if</span> (b &lt; <span class="hljs-number">0</span>) &#123;<br>        x = <span class="hljs-number">1</span> / x;<br>        b = -b;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (b &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((b &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) res *= x;<br>        x *= x;<br>        b &gt;&gt;= <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="打印从1到最大的n位数"><a href="#打印从1到最大的n位数" class="headerlink" title="打印从1到最大的n位数"></a>打印从1到最大的n位数</h1><p><img src="/blog/2022/02/05/offer/print.png" alt="image-20220210140906686"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] printNumbers(<span class="hljs-keyword">int</span> n) &#123;<br>    <span class="hljs-keyword">int</span> size = (<span class="hljs-keyword">int</span>) Math.pow(<span class="hljs-number">10</span>, n) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; size; i++) &#123;<br>        res[i] = i + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>大数打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] printNumbers2(<span class="hljs-keyword">int</span> n) &#123;<br>    <span class="hljs-keyword">char</span>[] chars = <span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[]&#123;<span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;9&#x27;</span>&#125;;<br>    StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">int</span> size = (<span class="hljs-keyword">int</span>) Math.pow(<span class="hljs-number">10</span>, n) - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[size];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        traceback(i, chars, stringBuilder, res);<br><br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num, <span class="hljs-keyword">char</span>[] chars, StringBuilder stringBuilder, <span class="hljs-keyword">int</span>[] res)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) &#123;<br>        res[idx++] = Integer.parseInt(stringBuilder.toString());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : chars) &#123;<br>        <span class="hljs-keyword">if</span> (stringBuilder.length() &gt; <span class="hljs-number">0</span> || c != <span class="hljs-string">&#x27;0&#x27;</span>) &#123;<br>            stringBuilder.append(c);<br>            traceback(num - <span class="hljs-number">1</span>, chars, stringBuilder, res);<br>            stringBuilder.deleteCharAt(stringBuilder.length() - <span class="hljs-number">1</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="正则表达式匹配"><a href="#正则表达式匹配" class="headerlink" title="正则表达式匹配"></a>正则表达式匹配</h1><p><img src="/blog/2022/02/05/offer/match.png" alt="image-20220210141053487"></p><p>方法一：递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isMatch</span><span class="hljs-params">(String s, String p)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> match(s, p, s.length() - <span class="hljs-number">1</span>, p.length() - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">match</span><span class="hljs-params">(String s, String p, <span class="hljs-keyword">int</span> idx1, <span class="hljs-keyword">int</span> idx2)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (idx2 == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> idx1 == -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (p.charAt(idx2) == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>        <span class="hljs-keyword">boolean</span> res = match(s, p, idx1, idx2 - <span class="hljs-number">2</span>);<br>        <span class="hljs-keyword">if</span> (idx1 &gt;= <span class="hljs-number">0</span> &amp;&amp; (p.charAt(idx2 - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;.&#x27;</span> || s.charAt(idx1) == p.charAt(idx2 - <span class="hljs-number">1</span>)))<br>            res |= match(s, p, idx1 - <span class="hljs-number">1</span>, idx2);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (idx1 &gt;= <span class="hljs-number">0</span> &amp;&amp; (s.charAt(idx1) == p.charAt(idx2) || p.charAt(idx2) == <span class="hljs-string">&#x27;.&#x27;</span>))<br>        <span class="hljs-keyword">return</span> match(s, p, idx1 - <span class="hljs-number">1</span>, idx2 - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[i][j] = dp[i][j-<span class="hljs-number">2</span>] or dp[i-<span class="hljs-number">1</span>][j] or dp[i-<span class="hljs-number">1</span>][j-<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isMatch2</span><span class="hljs-params">(String s, String p)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len1 = s.length();<br>    <span class="hljs-keyword">int</span> len2 = p.length();<br>    <span class="hljs-keyword">boolean</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[len1 + <span class="hljs-number">1</span>][len2 + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len1; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; j++) &#123;<br>            <span class="hljs-keyword">if</span> (p.charAt(j - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                dp[i][j] = dp[i][j - <span class="hljs-number">2</span>];<br>                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; (p.charAt(j - <span class="hljs-number">2</span>) == <span class="hljs-string">&#x27;.&#x27;</span> || s.charAt(i - <span class="hljs-number">1</span>) == p.charAt(j - <span class="hljs-number">2</span>)))<br>                    dp[i][j] |= dp[i - <span class="hljs-number">1</span>][j];<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; (p.charAt(j - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;.&#x27;</span> || s.charAt(i - <span class="hljs-number">1</span>) == p.charAt(j - <span class="hljs-number">1</span>)))<br>                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[len1][len2];<br>&#125;<br></code></pre></td></tr></table></figure><p>优化后：滚动数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isMatch3</span><span class="hljs-params">(String s, String p)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> len1 = s.length();<br>    <span class="hljs-keyword">int</span> len2 = p.length();<br>    <span class="hljs-keyword">boolean</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[len2 + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">boolean</span> old2;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= len1; i++) &#123;<br>        <span class="hljs-keyword">boolean</span> old1 = dp[<span class="hljs-number">0</span>];<br>        dp[<span class="hljs-number">0</span>] = i == <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= len2; j++) &#123;<br>            old2 = dp[j];<br>            dp[j] = <span class="hljs-keyword">false</span>;<br>            <span class="hljs-keyword">if</span> (p.charAt(j - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;*&#x27;</span>) &#123;<br>                dp[j] = dp[j - <span class="hljs-number">2</span>];<br>                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; (p.charAt(j - <span class="hljs-number">2</span>) == <span class="hljs-string">&#x27;.&#x27;</span> || s.charAt(i - <span class="hljs-number">1</span>) == p.charAt(j - <span class="hljs-number">2</span>)))<br>                    dp[j] |= old2;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; (p.charAt(j - <span class="hljs-number">1</span>) == <span class="hljs-string">&#x27;.&#x27;</span> || s.charAt(i - <span class="hljs-number">1</span>) == p.charAt(j - <span class="hljs-number">1</span>))) dp[j] = old1;<br>            old1 = old2;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[len2];<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h1><p><img src="/blog/2022/02/05/offer/reverseList.png" alt="image-20220210141414281"></p><p>从头到尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    ListNode pre = <span class="hljs-keyword">null</span>, cur = head, next;<br>    <span class="hljs-keyword">while</span> (cur != <span class="hljs-keyword">null</span>) &#123;<br>        next = cur.next;<br>        cur.next = pre;<br>        pre = cur;<br>        cur = next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre;<br>&#125;<br></code></pre></td></tr></table></figure><p>递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">reverseList2</span><span class="hljs-params">(ListNode head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span> || head.next == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> head;<br>    ListNode next = reverseList2(head.next);<br>    head.next.next = head;<br>    head.next = <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">return</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="删除链表到节点"><a href="#删除链表到节点" class="headerlink" title="删除链表到节点"></a>删除链表到节点</h1><p><img src="/blog/2022/02/05/offer/deleteListNode.png" alt="image-20220210144416239"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">deleteNode</span><span class="hljs-params">(ListNode head, <span class="hljs-keyword">int</span> val)</span> </span>&#123;<br>    ListNode dummy = <span class="hljs-keyword">new</span> ListNode();<br>    dummy.next = head;<br>    ListNode ptr = dummy;<br>    <span class="hljs-keyword">while</span> (ptr.next != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> (ptr.next.val == val) &#123;<br>            ptr.next = ptr.next.next;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        ptr = ptr.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummy.next;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="复杂链表的复制"><a href="#复杂链表的复制" class="headerlink" title="复杂链表的复制"></a>复杂链表的复制</h1><p><img src="/blog/2022/02/05/offer/copyList.png" alt="image-20220210160359865"></p><p>方法一：哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">copyRandomList</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    Map&lt;Node, Node&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    Node dummy = <span class="hljs-keyword">new</span> Node(-<span class="hljs-number">1</span>);<br>    Node from = head, to = dummy;<br>    <span class="hljs-keyword">while</span> (from != <span class="hljs-keyword">null</span>) &#123;<br>        to.next = <span class="hljs-keyword">new</span> Node(from.val);<br>        to = to.next;<br>        map.put(from, to);<br>        from = from.next;<br>    &#125;<br><br>    from = head;<br>    <span class="hljs-keyword">while</span> (from != <span class="hljs-keyword">null</span>) &#123;<br>        map.get(from).random = map.get(from.random);<br>        from = from.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dummy.next;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：S-&gt;S’</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">copyRandomList2</span><span class="hljs-params">(Node head)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    <span class="hljs-keyword">for</span> (Node node = head; node != <span class="hljs-keyword">null</span>; node = node.next.next) &#123;<br>        Node nodeNew = <span class="hljs-keyword">new</span> Node(node.val);<br>        nodeNew.next = node.next;<br>        node.next = nodeNew;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (Node node = head; node != <span class="hljs-keyword">null</span>; node = node.next.next) &#123;<br>        node.next.random = node.random == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : node.random.next;<br>    &#125;<br><br>    Node headNew = head.next;<br>    <span class="hljs-keyword">for</span> (Node node = head; node != <span class="hljs-keyword">null</span>; node = node.next) &#123;<br>        Node nodeNew = node.next;<br>        node.next = node.next.next;<br>        nodeNew.next = nodeNew.next == <span class="hljs-keyword">null</span> ? <span class="hljs-keyword">null</span> : nodeNew.next.next;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> headNew;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最小k个数"><a href="#最小k个数" class="headerlink" title="最小k个数"></a>最小k个数</h1><p><img src="/blog/2022/02/05/offer/mink.png" alt="image-20220210182301099"></p><p>方法一：堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] getLeastNumbers(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k) &#123;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[k];<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> res;<br>    PriorityQueue&lt;Integer&gt; priorityQueue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(k, <span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> o2 - o1;<br>        &#125;<br>    &#125;);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (i &lt; k) priorityQueue.add(arr[i]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (arr[i] &lt; priorityQueue.peek()) &#123;<br>            priorityQueue.poll();<br>            priorityQueue.add(arr[i]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k; i++) &#123;<br>        res[i] = priorityQueue.poll();<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：快排</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] getLeastNumbers2(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k) &#123;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[k];<br>    doGetNumbers(res, arr, k, <span class="hljs-number">0</span>, arr.length - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGetNumbers</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] res, <span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (start &gt; end || k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> count = partition(arr, start, end);<br>    <span class="hljs-keyword">if</span> (count &lt;= k) &#123;<br>        <span class="hljs-keyword">int</span> idx = res.length - k;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = idx; i &lt; idx + count; i++) &#123;<br>            res[i] = arr[start++];<br>        &#125;<br>        doGetNumbers(res, arr, k - count, start, end);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        doGetNumbers(res, arr, k, start, start + count - <span class="hljs-number">2</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">partition</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] arr, <span class="hljs-keyword">int</span> start, <span class="hljs-keyword">int</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> pivot = arr[start];<br>    <span class="hljs-keyword">int</span> i = start;<br>    <span class="hljs-keyword">int</span> j = end;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[j] &gt;= pivot) j--;<br>        arr[i] = arr[j];<br>        <span class="hljs-keyword">while</span> (i &lt; j &amp;&amp; arr[i] &lt; pivot) i++;<br>        arr[j] = arr[i];<br>    &#125;<br>    arr[i] = pivot;<br>    <span class="hljs-keyword">return</span> i - start + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最小栈"><a href="#最小栈" class="headerlink" title="最小栈"></a>最小栈</h1><p><img src="/blog/2022/02/05/offer/minStack.png" alt="image-20220210182918964"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MinStack</span> </span>&#123;<br>    Stack&lt;Integer&gt; stack;<br>    Stack&lt;Integer&gt; minStack;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * initialize your data structure here.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MinStack</span><span class="hljs-params">()</span> </span>&#123;<br>        stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        minStack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        stack.push(x);<br>        minStack.push(Math.min(x, minStack.isEmpty() ? Integer.MAX_VALUE : minStack.peek()));<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>        stack.pop();<br>        minStack.pop();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> stack.peek();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">min</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> minStack.peek();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数据流中的中位数"><a href="#数据流中的中位数" class="headerlink" title="数据流中的中位数"></a>数据流中的中位数</h1><p><img src="/blog/2022/02/05/offer/midNum.png" alt="image-20220211112957477"></p><p>方法：大小根堆</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MedianFinder</span> </span>&#123;<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * initialize your data structure here.</span><br><span class="hljs-comment">     */</span><br><br>    PriorityQueue&lt;Integer&gt; minQueue;<br>    PriorityQueue&lt;Integer&gt; maxQueue;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MedianFinder</span><span class="hljs-params">()</span> </span>&#123;<br>        maxQueue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;(<span class="hljs-keyword">new</span> Comparator&lt;Integer&gt;() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> </span>&#123;<br>                <span class="hljs-keyword">return</span> o2 - o1;<br>            &#125;<br>        &#125;);<br>        minQueue = <span class="hljs-keyword">new</span> PriorityQueue&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> num)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (maxQueue.size() == minQueue.size()) &#123;<br>            maxQueue.add(num);<br>            minQueue.add(maxQueue.poll());<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            minQueue.add(num);<br>            maxQueue.add(minQueue.poll());<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedian</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> minQueue.size() == maxQueue.size() ? minQueue.peek() : (minQueue.peek() + maxQueue.peek()) / <span class="hljs-number">2.0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="连续子数组最大和"><a href="#连续子数组最大和" class="headerlink" title="连续子数组最大和"></a>连续子数组最大和</h1><p><img src="/blog/2022/02/05/offer/maxSubArray.png" alt="image-20220211113642860"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxSubArray</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> max = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> a = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>        a = Math.max(a + nums[i], nums[i]);<br>        max = Math.max(max, a);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉搜索树与双向链表"><a href="#二叉搜索树与双向链表" class="headerlink" title="二叉搜索树与双向链表"></a>二叉搜索树与双向链表</h1><p><img src="/blog/2022/02/05/offer/treeToList.png" alt="image-20220211123931039"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Node pre;<br>Node head;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> Node <span class="hljs-title">treeToDoublyList</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    inOrder(root);<br>    head.left = pre;<br>    pre.right = head;<br>    <span class="hljs-keyword">return</span> head;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>    inOrder(node.left);<br>    <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) head = node;<br>    node.left = pre;<br>    <span class="hljs-keyword">if</span> (pre != <span class="hljs-keyword">null</span>) pre.right = node;<br>    pre = node;<br>    inOrder(node.right);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="栈的压入、弹出序列"><a href="#栈的压入、弹出序列" class="headerlink" title="栈的压入、弹出序列"></a>栈的压入、弹出序列</h1><p><img src="/blog/2022/02/05/offer/stackPush.png" alt="image-20220211132217842"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validateStackSequences</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] pushed, <span class="hljs-keyword">int</span>[] popped)</span> </span>&#123;<br>    Stack&lt;Integer&gt; stack = <span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : pushed) &#123;<br>        stack.push(num); <span class="hljs-comment">// num 入栈</span><br>        <span class="hljs-keyword">while</span>(!stack.isEmpty() &amp;&amp; stack.peek() == popped[i]) &#123; <span class="hljs-comment">// 循环判断与出栈</span><br>            stack.pop();<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> stack.isEmpty();<br>&#125;<br></code></pre></td></tr></table></figure><p>序列号二叉树</p><p><img src="/blog/2022/02/05/offer/serialize.png" alt="image-20220212164917411"></p><p>方法：层次遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Codec</span> </span>&#123;<br>    <span class="hljs-comment">// Encodes a tree to a single string.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">serialize</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>        StringBuilder pre = <span class="hljs-keyword">new</span> StringBuilder();<br>        queue.offer(root);<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            TreeNode treeNode = queue.poll();<br>            <span class="hljs-keyword">if</span> (treeNode == <span class="hljs-keyword">null</span>) pre.append(<span class="hljs-string">&quot;null,&quot;</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                queue.offer(treeNode.left);<br>                queue.offer(treeNode.right);<br>                res.append(pre);<br>                pre = <span class="hljs-keyword">new</span> StringBuilder();<br>                res.append(treeNode.val).append(<span class="hljs-string">&#x27;,&#x27;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.deleteCharAt(res.length() - <span class="hljs-number">1</span>).toString();<br>    &#125;<br><br>    <span class="hljs-comment">// Decodes your encoded data to tree.</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">deserialize</span><span class="hljs-params">(String data)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (data.isEmpty()) <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        String[] nodes = data.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        TreeNode root = <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(nodes[<span class="hljs-number">0</span>]));<br>        queue.add(root);<br>        <span class="hljs-keyword">int</span> idx = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>            TreeNode node = queue.poll();<br>            node.left = idx &lt; nodes.length &amp;&amp; !nodes[idx].equals(<span class="hljs-string">&quot;null&quot;</span>) ? <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(nodes[idx])) : <span class="hljs-keyword">null</span>;<br>            idx++;<br>            node.right = idx &lt; nodes.length &amp;&amp; !nodes[idx].equals(<span class="hljs-string">&quot;null&quot;</span>) ? <span class="hljs-keyword">new</span> TreeNode(Integer.parseInt(nodes[idx])) : <span class="hljs-keyword">null</span>;<br>            idx++;<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>)<br>                queue.add(node.left);<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>)<br>                queue.add(node.right);<br>        &#125;<br>        <span class="hljs-keyword">return</span> root;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="字符串的排列"><a href="#字符串的排列" class="headerlink" title="字符串的排列"></a>字符串的排列</h1><p><img src="/blog/2022/02/05/offer/permutation.png" alt="image-20220212165155491"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String[] permutation(String s) &#123;<br>    List&lt;String&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">char</span>[] chars = s.toCharArray();<br>    Arrays.sort(chars);<br>    StringBuilder stringBuilder = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">boolean</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[s.length()];<br>    traceback(res, visited, chars, <span class="hljs-number">0</span>, stringBuilder);<br>    <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> String[<span class="hljs-number">0</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(List&lt;String&gt; res, <span class="hljs-keyword">boolean</span>[] visited, <span class="hljs-keyword">char</span>[] chars, <span class="hljs-keyword">int</span> idx, StringBuilder stringBuilder)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (idx == chars.length) &#123;<br>        res.add(stringBuilder.toString());<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; chars.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (visited[i] || (i - <span class="hljs-number">1</span> &gt;= <span class="hljs-number">0</span> &amp;&amp; chars[i] == chars[i - <span class="hljs-number">1</span>] &amp;&amp; !visited[i - <span class="hljs-number">1</span>])) &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        visited[i] = <span class="hljs-keyword">true</span>;<br>        stringBuilder.append(chars[i]);<br>        traceback(res, visited, chars, idx + <span class="hljs-number">1</span>, stringBuilder);<br>        stringBuilder.deleteCharAt(stringBuilder.length() - <span class="hljs-number">1</span>);<br>        visited[i] = <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="1-n-中1出现的次数"><a href="#1-n-中1出现的次数" class="headerlink" title="1-n 中1出现的次数"></a>1-n 中1出现的次数</h1><p><img src="/blog/2022/02/05/offer/count1.png" alt="image-20220212200145970"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">countDigitOne</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> digit = <span class="hljs-number">1</span>, high = n / <span class="hljs-number">10</span>, cur = n % <span class="hljs-number">10</span>, low = <span class="hljs-number">0</span>, res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (high != <span class="hljs-number">0</span> || cur != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">0</span>) res += high * digit;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (cur == <span class="hljs-number">1</span>) res += high * digit + low + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> res += (high + <span class="hljs-number">1</span>) * digit;<br>        low += cur * digit;<br>        cur = high % <span class="hljs-number">10</span>;<br>        high /= <span class="hljs-number">10</span>;<br>        digit *= <span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组中出现次数超过一半的数字"><a href="#数组中出现次数超过一半的数字" class="headerlink" title="数组中出现次数超过一半的数字"></a>数组中出现次数超过一半的数字</h1><p><img src="/blog/majorityNum.png" alt="image-20220212200552978"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">majorityElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> countNum = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] == countNum) count++;<br>        <span class="hljs-keyword">else</span> count--;<br>        <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) &#123;<br>            count = <span class="hljs-number">1</span>;<br>            countNum = nums[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> countNum;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="从上到下打印二叉树"><a href="#从上到下打印二叉树" class="headerlink" title="从上到下打印二叉树"></a>从上到下打印二叉树</h1><p><img src="/blog/2022/02/05/offer/printTree2.png" alt="image-20220220170824689"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;<br>    List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) queue.offer(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        List&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = queue.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            TreeNode node = queue.poll();<br>            cur.add(node.val);<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) queue.offer(node.left);<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) queue.offer(node.right);<br>        &#125;<br>        res.add(cur);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="从上到下打印二叉树2"><a href="#从上到下打印二叉树2" class="headerlink" title="从上到下打印二叉树2"></a>从上到下打印二叉树2</h1><p><img src="/blog/2022/02/05/offer/printTree.png" alt="image-20220212200725557"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] levelOrder(TreeNode root) &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    List&lt;Integer&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    queue.offer(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        TreeNode node = queue.poll();<br>        res.add(node.val);<br>        <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) queue.offer(node.left);<br>        <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) queue.offer(node.right);<br>    &#125;<br>    <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[res.size()];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; res.size(); i++) &#123;<br>        ans[i] = res.get(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数字数列中的某一位数字"><a href="#数字数列中的某一位数字" class="headerlink" title="数字数列中的某一位数字"></a>数字数列中的某一位数字</h1><p><img src="/blog/2022/02/05/offer/findNthDigit.png" alt="image-20220212201817340"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">findNthDigit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> digit = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">long</span> start = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">long</span> count = <span class="hljs-number">9</span>;<br>    <span class="hljs-keyword">while</span> (n &gt; count) &#123; <span class="hljs-comment">// 1.</span><br>        n -= count;<br>        digit += <span class="hljs-number">1</span>;<br>        start *= <span class="hljs-number">10</span>;<br>        count = digit * start * <span class="hljs-number">9</span>;<br>    &#125;<br>    <span class="hljs-keyword">long</span> num = start + (n - <span class="hljs-number">1</span>) / digit; <span class="hljs-comment">// 2.</span><br>    <span class="hljs-keyword">return</span> Long.toString(num).charAt((n - <span class="hljs-number">1</span>) % digit) - <span class="hljs-string">&#x27;0&#x27;</span>; <span class="hljs-comment">// 3.</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Z字打印"><a href="#Z字打印" class="headerlink" title="Z字打印"></a>Z字打印</h1><p><img src="/blog/2022/02/05/offer/pirntTree.png" alt="image-20220213115204402"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;<br>    List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    Queue&lt;TreeNode&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">if</span> (root != <span class="hljs-keyword">null</span>) queue.offer(root);<br>    <span class="hljs-keyword">while</span> (!queue.isEmpty()) &#123;<br>        LinkedList&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = queue.size(); i &gt; <span class="hljs-number">0</span>; i--) &#123;<br>            TreeNode node = queue.poll();<br>            <span class="hljs-keyword">if</span> ((res.size() &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) cur.addFirst(node.val);<br>            <span class="hljs-keyword">else</span> cur.addLast(node.val);<br>            <span class="hljs-keyword">if</span> (node.left != <span class="hljs-keyword">null</span>) queue.offer(node.left);<br>            <span class="hljs-keyword">if</span> (node.right != <span class="hljs-keyword">null</span>) queue.offer(node.right);<br>        &#125;<br>        res.add(cur);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉搜索树的后序序列"><a href="#二叉搜索树的后序序列" class="headerlink" title="二叉搜索树的后序序列"></a>二叉搜索树的后序序列</h1><p><img src="/blog/2022/02/05/offer/verifyPostOrder.png" alt="image-20220213131203574"></p><p>方法一：递归</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">verifyPostorder</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] postorder)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> recur(postorder, <span class="hljs-number">0</span>, postorder.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">recur</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] postOrder, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &gt;= j) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">int</span> p = i;<br>    <span class="hljs-keyword">while</span> (postOrder[p] &lt; postOrder[j]) p++;<br>    <span class="hljs-keyword">int</span> q = p;<br>    <span class="hljs-keyword">while</span> (postOrder[q] &gt; postOrder[j]) q++;<br>    <span class="hljs-keyword">return</span> q == j &amp;&amp; recur(postOrder, i, p - <span class="hljs-number">1</span>) &amp;&amp; recur(postOrder, p, j - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：单调栈</p><h1 id="第一次只出现一次的字符"><a href="#第一次只出现一次的字符" class="headerlink" title="第一次只出现一次的字符"></a>第一次只出现一次的字符</h1><p><img src="/blog/2022/02/05/offer/firstOne.png" alt="image-20220213132721688"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">char</span> <span class="hljs-title">firstUniqChar</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    HashMap&lt;Character, Boolean&gt; dic = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">char</span>[] sc = s.toCharArray();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : sc)<br>        dic.put(c, !dic.containsKey(c));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> c : sc)<br>        <span class="hljs-keyword">if</span>(dic.get(c)) <span class="hljs-keyword">return</span> c;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉树和为某一值的路径"><a href="#二叉树和为某一值的路径" class="headerlink" title="二叉树和为某一值的路径"></a>二叉树和为某一值的路径</h1><p><img src="/blog/2022/02/05/offer/sumPath.png" alt="image-20220213134723353"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="hljs-keyword">int</span> target) &#123;<br>    List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    LinkedList&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    dfs(res, cur, root, target);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; res, LinkedList&lt;Integer&gt; cur, TreeNode root, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>    cur.add(root.val);<br>    target -= root.val;<br>    <span class="hljs-keyword">if</span> (root.left == <span class="hljs-keyword">null</span> &amp;&amp; root.right == <span class="hljs-keyword">null</span> &amp;&amp; target == <span class="hljs-number">0</span>) &#123;<br>        res.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(cur));<br>    &#125;<br>    dfs(res, cur, root.left, target);<br>    dfs(res, cur, root.right, target);<br>    cur.removeLast();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="数组中的逆序对"><a href="#数组中的逆序对" class="headerlink" title="数组中的逆序对"></a>数组中的逆序对</h1><p><img src="/blog/2022/02/05/offer/reversePairs.png" alt="image-20220213141646694"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[] copy;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reversePairs</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    copy = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length];<br>    <span class="hljs-keyword">return</span> doMergeSort(nums, <span class="hljs-number">0</span>, nums.length - <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">doMergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (low &gt;= high) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> mid = (low + high) / <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">int</span> res = doMergeSort(nums, low, mid) + doMergeSort(nums, mid + <span class="hljs-number">1</span>, high);<br>    <span class="hljs-keyword">int</span> i = low, j = mid + <span class="hljs-number">1</span>, k = low;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &lt;= nums[j]) copy[k++] = nums[i++];<br>        <span class="hljs-keyword">else</span> &#123;<br>            copy[k++] = nums[j++];<br>            res += mid - i + <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) copy[k++] = nums[i++];<br>    <span class="hljs-keyword">while</span> (j &lt;= high) copy[k++] = nums[j++];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = low; l &lt;= high; l++) &#123;<br>        nums[l] = copy[l];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉树的深度"><a href="#二叉树的深度" class="headerlink" title="二叉树的深度"></a>二叉树的深度</h1><p><img src="/blog/2022/02/05/offer/maxDepth.png" alt="image-20220213142040738"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> Math.max(maxDepth(root.left), maxDepth(root.right)) + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="出现一次的数字"><a href="#出现一次的数字" class="headerlink" title="出现一次的数字"></a>出现一次的数字</h1><p><img src="/blog/2022/02/05/offer/onetime.png" alt="image-20220213150629475"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] singleNumbers(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-number">0</span>, m = <span class="hljs-number">1</span>, x = <span class="hljs-number">0</span>, y = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>        n ^= num;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> ((n &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">0</span>) &#123;<br>        n = n &gt;&gt; <span class="hljs-number">1</span>;<br>        m = m &lt;&lt; <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>        <span class="hljs-keyword">if</span> ((num &amp; m) == <span class="hljs-number">0</span>) x ^= num;<br>        <span class="hljs-keyword">else</span> y ^= num;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;x, y&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="出现一次的数字2"><a href="#出现一次的数字2" class="headerlink" title="出现一次的数字2"></a>出现一次的数字2</h1><p><img src="/blog/2022/02/05/offer/simgle_num.png" alt="image-20220214143342298"></p><p>方法一：遍历统计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] counts = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">32</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>            counts[i] = num &amp; <span class="hljs-number">1</span>;<br>            num &gt;&gt;&gt;= <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i++) &#123;<br>        res &lt;&lt;= <span class="hljs-number">1</span>;<br>        res |= counts[<span class="hljs-number">31</span> - i] % <span class="hljs-number">3</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：有限状态机+位运算</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">singleNumber2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ones = <span class="hljs-number">0</span>, twos = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> num : nums)&#123;<br>        ones = ones ^ num &amp; ~twos;<br>        twos = twos ^ num &amp; ~ones;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ones;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="和为S的两个数字"><a href="#和为S的两个数字" class="headerlink" title="和为S的两个数字"></a>和为S的两个数字</h1><p><img src="/blog/2022/02/05/offer/twoSum.png" alt="image-20220214151006792"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">if</span> (nums[l] + nums[r] &lt; target) l++;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[l] + nums[r] &gt; target) r--;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;nums[l], nums[r]&#125;;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="把数组排成最小的数字"><a href="#把数组排成最小的数字" class="headerlink" title="把数组排成最小的数字"></a>把数组排成最小的数字</h1><p><img src="/blog/2022/02/05/offer/sort.png" alt="image-20220214154725725"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">minNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    String[] strs = <span class="hljs-keyword">new</span> String[nums.length];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++)<br>        strs[i] = String.valueOf(nums[i]);<br>    Arrays.sort(strs, (x, y) -&gt; (x + y).compareTo(y + x));<br>    StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">for</span>(String s : strs)<br>        res.append(s);<br>    <span class="hljs-keyword">return</span> res.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="和为S的连续正数序列"><a href="#和为S的连续正数序列" class="headerlink" title="和为S的连续正数序列"></a>和为S的连续正数序列</h1><p><img src="/blog/2022/02/05/offer/sequence.png" alt="image-20220214164346423"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[][] findContinuousSequence(<span class="hljs-keyword">int</span> target) &#123;<br>    List&lt;<span class="hljs-keyword">int</span>[]&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, j = <span class="hljs-number">2</span>, s = <span class="hljs-number">3</span>;<br>    <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>        <span class="hljs-keyword">if</span> (s == target) &#123;<br>            <span class="hljs-keyword">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[j - i + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = i; k &lt;= j; k++) &#123;<br>                ans[k - i] = k;<br>            &#125;<br>            res.add(ans);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (s &lt; target) &#123;<br>            j++;<br>            s += j;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            s -= i;<br>            i++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>][]);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="礼物的最大价值"><a href="#礼物的最大价值" class="headerlink" title="礼物的最大价值"></a>礼物的最大价值</h1><p><img src="/blog/2022/02/05/offer/giftPrice.png" alt="image-20220220171606950"></p><p>动态规划</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxValue</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] grid)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = grid.length;<br>    <span class="hljs-keyword">int</span> n = grid[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]) + grid[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[m][n];<br>&#125;<br></code></pre></td></tr></table></figure><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxValue2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[][] grid)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = grid.length;<br>    <span class="hljs-keyword">int</span> n = grid[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            dp[j] = Math.max(dp[j - <span class="hljs-number">1</span>], dp[j]) + grid[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="最长不含重复字符的子字符串"><a href="#最长不含重复字符的子字符串" class="headerlink" title="最长不含重复字符的子字符串"></a>最长不含重复字符的子字符串</h1><p><img src="/blog/2022/02/05/offer/lengthOfLongestSubstring.png" alt="image-20220221092348860"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring2</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>, tmp = <span class="hljs-number">0</span>;<br>    Map&lt;Character, Integer&gt; map = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>        <span class="hljs-keyword">int</span> j = map.getOrDefault(s.charAt(i), -<span class="hljs-number">1</span>);<br>        map.put(s.charAt(i), i);<br>        tmp = Math.min(tmp + <span class="hljs-number">1</span>, i - j);<br>        max = Math.max(max, tmp);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="丑数"><a href="#丑数" class="headerlink" title="丑数"></a>丑数</h1><p><img src="/blog/2022/02/05/offer/uglyNum.png" alt="image-20220221112753459"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nthUglyNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] factors = &#123;<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>&#125;;<br>    Set&lt;Long&gt; seen = <span class="hljs-keyword">new</span> HashSet&lt;Long&gt;();<br>    PriorityQueue&lt;Long&gt; heap = <span class="hljs-keyword">new</span> PriorityQueue&lt;Long&gt;();<br>    seen.add(<span class="hljs-number">1L</span>);<br>    heap.offer(<span class="hljs-number">1L</span>);<br>    <span class="hljs-keyword">int</span> ugly = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">long</span> curr = heap.poll();<br>        ugly = (<span class="hljs-keyword">int</span>) curr;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> factor : factors) &#123;<br>            <span class="hljs-keyword">long</span> next = curr * factor;<br>            <span class="hljs-keyword">if</span> (seen.add(next)) &#123;<br>                heap.offer(next);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ugly;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">nthUglyNumber2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, b = <span class="hljs-number">0</span>, c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        dp[i] = Math.min(dp[a] * <span class="hljs-number">2</span>, Math.min(dp[b] * <span class="hljs-number">3</span>, dp[c] * <span class="hljs-number">5</span>));<br>        <span class="hljs-keyword">if</span> (dp[i] == dp[a] * <span class="hljs-number">2</span>) a++;<br>        <span class="hljs-keyword">if</span> (dp[i] == dp[b] * <span class="hljs-number">3</span>) b++;<br>        <span class="hljs-keyword">if</span> (dp[i] == dp[c] * <span class="hljs-number">5</span>) c++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="两个链表的第一个公共节点"><a href="#两个链表的第一个公共节点" class="headerlink" title="两个链表的第一个公共节点"></a>两个链表的第一个公共节点</h1><p><img src="/blog/2022/02/05/offer/common-node.png" alt="image-20220221144539680"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">getIntersectionNode</span><span class="hljs-params">(ListNode headA, ListNode headB)</span> </span>&#123;<br>    ListNode ptr1 = headA;<br>    ListNode ptr2 = headB;<br>    <span class="hljs-keyword">while</span> (ptr1 != ptr2) &#123;<br>        ptr1 = ptr1 == <span class="hljs-keyword">null</span> ? headB : ptr1.next;<br>        ptr2 = ptr2 == <span class="hljs-keyword">null</span> ? headA : ptr2.next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ptr1;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="在排序数组中查找数字1"><a href="#在排序数组中查找数字1" class="headerlink" title="在排序数组中查找数字1"></a>在排序数组中查找数字1</h1><p><img src="/blog/2022/02/05/offer/search.png" alt="image-20220221145354537"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> upperBound(nums, target) - lowerBound(nums, target);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowerBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt; target) l = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[l] &gt;= target ? l : nums.length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">upperBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] &lt;= target) l = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[l] &gt; target ? l : nums.length;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="0-n-1中缺失的数字"><a href="#0-n-1中缺失的数字" class="headerlink" title="0-n-1中缺失的数字"></a>0-n-1中缺失的数字</h1><p><img src="/blog/2022/02/05/offer/lose.png" alt="image-20220221150323537"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">missingNumber</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> r = nums.length - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[mid] == mid) l = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = mid;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[l] != l ? l : l + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉搜索树的第k大节点"><a href="#二叉搜索树的第k大节点" class="headerlink" title="二叉搜索树的第k大节点"></a>二叉搜索树的第k大节点</h1><p><img src="/blog/2022/02/05/offer/kthTree.png" alt="image-20220221151225817"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">kthLargest</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">this</span>.k = k;<br>    inOrder(root);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">inOrder</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span> || k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>    inOrder(root.right);<br>    <span class="hljs-keyword">if</span> (--k == <span class="hljs-number">0</span>) res = root.val;<br>    inOrder(root.left);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h1><p><img src="/blog/2022/02/05/offer/balanceTree.png" alt="image-20220221153412797"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> getHeight(root) == -<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">(TreeNode node)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (node == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> l = getHeight(node.left);<br>    <span class="hljs-keyword">int</span> r = getHeight(node.right);<br>    <span class="hljs-keyword">if</span> (l == -<span class="hljs-number">1</span> || r == -<span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> Math.abs(l - r) &lt; <span class="hljs-number">2</span> ? Math.max(l, r) + <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="翻转单词顺序"><a href="#翻转单词顺序" class="headerlink" title="翻转单词顺序"></a>翻转单词顺序</h1><p><img src="/blog/2022/02/05/offer/reverseWord.png" alt="image-20220221155802790"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reverseWords</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    s = s.trim();<br>    <span class="hljs-keyword">if</span> (s.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">int</span> j = s.length() - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">int</span> i = j;<br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(j) != <span class="hljs-string">&#x27; &#x27;</span>) j--;<br>        sb.append(s.substring(j + <span class="hljs-number">1</span>, i + <span class="hljs-number">1</span>)).append(<span class="hljs-string">&#x27; &#x27;</span>);<br>        <span class="hljs-keyword">while</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(j) == <span class="hljs-string">&#x27; &#x27;</span>) j--;<br>    &#125;<br>    <span class="hljs-keyword">return</span> sb.toString().trim();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="左旋转字符串"><a href="#左旋转字符串" class="headerlink" title="左旋转字符串"></a>左旋转字符串</h1><p><img src="/blog/2022/02/05/offer/leftRotate.png" alt="image-20220221160657476"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">reverseLeftWords</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = n; i &lt; n + s.length(); i++)<br>        res.append(s.charAt(i % s.length()));<br>    <span class="hljs-keyword">return</span> res.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="滑动窗口的最大值"><a href="#滑动窗口的最大值" class="headerlink" title="滑动窗口的最大值"></a>滑动窗口的最大值</h1><p><img src="/blog/2022/02/05/offer/maxSlideWindow.png" alt="image-20220221170219657"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] maxSlidingWindow(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br>    <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    Deque&lt;Integer&gt; queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; k - <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty() &amp;&amp; nums[queue.peekLast()] &lt; nums[i]) queue.pollLast();<br>        queue.offer(i);<br>    &#125;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[nums.length - k + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = k - <span class="hljs-number">1</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty() &amp;&amp; (nums[queue.peekLast()] &lt; nums[i])) queue.pollLast();<br>        <span class="hljs-keyword">while</span> (!queue.isEmpty() &amp;&amp; i - queue.peekFirst() &gt; k - <span class="hljs-number">1</span>) queue.pollFirst();<br>        res[i - k + <span class="hljs-number">1</span>] = queue.isEmpty() ? nums[i] : nums[queue.peek()];<br>        queue.offer(i);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="队列的最大值"><a href="#队列的最大值" class="headerlink" title="队列的最大值"></a>队列的最大值</h1><p><img src="/blog/2022/02/05/offer/maxQueue.png" alt="image-20220222092428905"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MaxQueue</span> </span>&#123;<br>    Queue&lt;Integer&gt; queue;<br>    Deque&lt;Integer&gt; maxQueue;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MaxQueue</span><span class="hljs-params">()</span> </span>&#123;<br>        queue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>        maxQueue = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">max_value</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> maxQueue.isEmpty() ? -<span class="hljs-number">1</span> : maxQueue.peek();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">push_back</span><span class="hljs-params">(<span class="hljs-keyword">int</span> value)</span> </span>&#123;<br>        queue.add(value);<br>        <span class="hljs-keyword">while</span> (!maxQueue.isEmpty() &amp;&amp; value &gt; maxQueue.peekLast()) maxQueue.pollLast();<br>        maxQueue.add(value);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">pop_front</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (queue.isEmpty()) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> p = queue.poll();<br>        <span class="hljs-keyword">if</span> (!maxQueue.isEmpty() &amp;&amp; maxQueue.peek() == p) maxQueue.pollFirst();<br>        <span class="hljs-keyword">return</span> p;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="n个骰子的点数（-）"><a href="#n个骰子的点数（-）" class="headerlink" title="n个骰子的点数（*）"></a>n个骰子的点数（*）</h1><p><img src="/blog/2022/02/05/offer/numOf.png" alt="image-20220222110329745"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span>[] dicesProbability(<span class="hljs-keyword">int</span> n) &#123;<br>    <span class="hljs-keyword">double</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">6</span>];<br>    Arrays.fill(dp, <span class="hljs-number">1</span> / <span class="hljs-number">6D</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">double</span>[] tmp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">double</span>[<span class="hljs-number">5</span> * i + <span class="hljs-number">1</span>];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; dp.length; j++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">6</span>; k++) &#123;<br>                tmp[j + k] += dp[j] / <span class="hljs-number">6.0</span>;<br>            &#125;<br>        &#125;<br>        dp = tmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="扑克牌中的顺子"><a href="#扑克牌中的顺子" class="headerlink" title="扑克牌中的顺子"></a>扑克牌中的顺子</h1><p><img src="/blog/2022/02/05/offer/isStraight.png" alt="image-20220223092440505"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isStraight</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    Set&lt;Integer&gt; repeat = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br>    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>, min = <span class="hljs-number">14</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>        <span class="hljs-keyword">if</span> (num == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>; <span class="hljs-comment">// 跳过大小王</span><br>        max = Math.max(max, num); <span class="hljs-comment">// 最大牌</span><br>        min = Math.min(min, num); <span class="hljs-comment">// 最小牌</span><br>        <span class="hljs-keyword">if</span> (repeat.contains(num)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>; <span class="hljs-comment">// 若有重复，提前返回 false</span><br>        repeat.add(num); <span class="hljs-comment">// 添加此牌至 Set</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> max - min &lt; <span class="hljs-number">5</span>; <span class="hljs-comment">// 最大牌 - 最小牌 &lt; 5 则可构成顺子</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="约瑟夫环"><a href="#约瑟夫环" class="headerlink" title="约瑟夫环"></a>约瑟夫环</h1><p><img src="/blog/2022/02/05/offer/cicle.png" alt="image-20220223100622465"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lastRemaining</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br>        x = (x + m) % i;<br>    &#125;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="股票的最大利润"><a href="#股票的最大利润" class="headerlink" title="股票的最大利润"></a>股票的最大利润</h1><p><img src="/blog/2022/02/05/offer/maxProfit.png" alt="image-20220223104407278"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxProfit</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] prices)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (prices.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> minPrice = prices[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; prices.length; i++) &#123;<br>        max = Math.max(max, prices[i] - minPrice);<br>        minPrice = Math.min(minPrice, prices[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="求1-2-…-n"><a href="#求1-2-…-n" class="headerlink" title="求1+2+…+n"></a>求1+2+…+n</h1><p><img src="/blog/2022/02/05/offer/sum.png" alt="image-20220223105615343"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sumNums</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span> x = n &gt; <span class="hljs-number">1</span> &amp;&amp; (n += sumNums(n - <span class="hljs-number">1</span>)) &gt; <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> n;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="不用加减乘除做加法"><a href="#不用加减乘除做加法" class="headerlink" title="不用加减乘除做加法"></a>不用加减乘除做加法</h1><p><img src="/blog/2022/02/05/offer/add.png" alt="image-20220223112230797"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(b != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 当进位为 0 时跳出</span><br>        <span class="hljs-keyword">int</span> c = (a &amp; b) &lt;&lt; <span class="hljs-number">1</span>;  <span class="hljs-comment">// c = 进位</span><br>        a ^= b; <span class="hljs-comment">// a = 非进位和</span><br>        b = c; <span class="hljs-comment">// b = 进位</span><br>    &#125;<br>    <span class="hljs-keyword">return</span> a;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="构建数组乘积"><a href="#构建数组乘积" class="headerlink" title="构建数组乘积"></a>构建数组乘积</h1><p><img src="/blog/2022/02/05/offer/constructArray.png" alt="image-20220223131550978"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] constructArr(<span class="hljs-keyword">int</span>[] a) &#123;<br>    <span class="hljs-keyword">if</span>(a.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> n = a.length;<br>    <span class="hljs-keyword">int</span>[] res = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    res[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> mul = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        res[i] = a[i - <span class="hljs-number">1</span>] * res[i - <span class="hljs-number">1</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        res[i] *= mul;<br>        mul *= a[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="把字符串转换成整数"><a href="#把字符串转换成整数" class="headerlink" title="把字符串转换成整数"></a>把字符串转换成整数</h1><p><img src="/blog/2022/02/05/offer/convertNum.png" alt="image-20220223134347493"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">strToInt</span><span class="hljs-params">(String str)</span> </span>&#123;<br>    str = str.trim();<br>    <span class="hljs-keyword">if</span> (str.length() == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">long</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> start = str.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;-&#x27;</span> || str.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;+&#x27;</span> ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">boolean</span> negative = str.charAt(<span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;-&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt; str.length(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (str.charAt(i) &lt; <span class="hljs-string">&#x27;0&#x27;</span> || str.charAt(i) &gt; <span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-keyword">break</span>;<br>        res = res * <span class="hljs-number">10</span> + str.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">if</span> (!negative &amp;&amp; res &gt;= Integer.MAX_VALUE) <span class="hljs-keyword">return</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">if</span> (negative &amp;&amp; -res &lt;= Integer.MIN_VALUE) <span class="hljs-keyword">return</span> Integer.MIN_VALUE;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) (negative ? -res : res);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉搜索树的最近公共祖先"><a href="#二叉搜索树的最近公共祖先" class="headerlink" title="二叉搜索树的最近公共祖先"></a>二叉搜索树的最近公共祖先</h1><p><img src="/blog/2022/02/05/offer/commonAncestor.png" alt="image-20220223151749272"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span>(root != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span>(root.val &lt; p.val &amp;&amp; root.val &lt; q.val) <span class="hljs-comment">// p,q 都在 root 的右子树中</span><br>            root = root.right; <span class="hljs-comment">// 遍历至右子节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(root.val &gt; p.val &amp;&amp; root.val &gt; q.val) <span class="hljs-comment">// p,q 都在 root 的左子树中</span><br>            root = root.left; <span class="hljs-comment">// 遍历至左子节点</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> root;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="二叉树的最近公共祖先"><a href="#二叉树的最近公共祖先" class="headerlink" title="二叉树的最近公共祖先"></a>二叉树的最近公共祖先</h1><p><img src="/blog/2022/02/05/offer/lowestCommonAncestor22.png" alt="image-20220224154137173"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> TreeNode <span class="hljs-title">lowestCommonAncestor</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;<br>    dfs(root, p, q);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br>TreeNode res;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">dfs</span><span class="hljs-params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">boolean</span> l = dfs(root.left, p, q);<br>    <span class="hljs-keyword">boolean</span> r = dfs(root.right, p, q);<br>    <span class="hljs-keyword">if</span> (l &amp;&amp; r || (root == p || root == q) &amp;&amp; (l || r)) res = root;<br>    <span class="hljs-keyword">return</span> root == p || root == q || l || r;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/blog/2022/01/27/Java%E5%9F%BA%E7%A1%80/"/>
    <url>/blog/2022/01/27/Java%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h2 id="1-基本数据类型"><a href="#1-基本数据类型" class="headerlink" title="1  基本数据类型"></a>1  基本数据类型</h2><p>boolean 1bit<br>byte    8bit<br>char    16bit<br>short    16bit<br>int    32bit<br>long    64bit<br>float    32bit<br>double  64bit</p><h2 id="2-String"><a href="#2-String" class="headerlink" title="2 String"></a>2 String</h2><h3 id="2-1-String类能被继承吗，为什么。"><a href="#2-1-String类能被继承吗，为什么。" class="headerlink" title="2.1 String类能被继承吗，为什么。"></a>2.1 String类能被继承吗，为什么。</h3><p>不能,<code>String </code>类被<code>final</code>关键字修饰</p><h3 id="2-2-String，StringBuffer，StringBuilder的区别。"><a href="#2-2-String，StringBuffer，StringBuilder的区别。" class="headerlink" title="2.2 String，StringBuffer，StringBuilder的区别。"></a>2.2 String，StringBuffer，StringBuilder的区别。</h3><p><code>String</code> 不可变,每次操作生成新的<code>String</code>对象<br><code>StringBuffer</code> 和 <code>StringBuilder</code> 类的对象能够被多次的修改，并且不产生新的未使用对象<br><code>StringBuilder</code> 线程不安全,<code>StringBuffer</code>线程安全</p><h3 id="2-3-字符串常量池"><a href="#2-3-字符串常量池" class="headerlink" title="2.3 字符串常量池"></a>2.3 字符串常量池</h3><p>为了提高匹配速度，即更快的查找某个字符串是否存在于常量池，Java在设计字符串常量池的时候，还搞了一张<code>stringtable</code>， <code>stringtable</code> 有点类似于我们的<code>hashtable</code>，里面保存了字符串的引用。</p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span> </span>&#123; <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span> </span>&#123; <br>String str1 = <span class="hljs-string">&quot;abc&quot;</span>; <br>String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>); <br>System.out.println(str1 == str2); <span class="hljs-comment">//false</span><br><br>String str3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>); <br>System.out.println(str3 == str2); <span class="hljs-comment">//false</span><br><br>String str4 = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span>; <br>System.out.println(str4 == <span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">//true</span><br><br><span class="hljs-keyword">final</span> String s = <span class="hljs-string">&quot;a&quot;</span>; <br>String str5 = s + <span class="hljs-string">&quot;b&quot;</span>; <br>System.out.println(str5 == <span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">//true</span><br><br>String s1 = <span class="hljs-string">&quot;a&quot;</span>; String s2 = <span class="hljs-string">&quot;b&quot;</span>; <br>String str6 = s1 + s2; <br>System.out.println(str6 == <span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">//false</span><br><br>String str7 = <span class="hljs-string">&quot;abc&quot;</span>.substring(<span class="hljs-number">0</span>， <span class="hljs-number">2</span>); <br>System.out.println(str7 == <span class="hljs-string">&quot;ab&quot;</span>); <span class="hljs-comment">//false</span><br><br>String str8 = <span class="hljs-string">&quot;abc&quot;</span>.toUpperCase(); <br>System.out.println(str8 == <span class="hljs-string">&quot;ABC&quot;</span>); <span class="hljs-comment">//false</span><br><br>String s3 = <span class="hljs-string">&quot;ab&quot;</span>; <br>String s4 = <span class="hljs-string">&quot;ab&quot;</span> + getString(); <br>System.out.println(s3 == s4); <span class="hljs-comment">//false</span><br><br>String s5 = <span class="hljs-string">&quot;a&quot;</span>; <br>String s6 = <span class="hljs-string">&quot;abc&quot;</span>; <br>String s7 = s5 + <span class="hljs-string">&quot;bc&quot;</span>; <br>System.out.println(s6 == s7.intern()); <span class="hljs-comment">//true</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">getString</span><span class="hljs-params">()</span></span>&#123; <br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;c&quot;</span>; <br>&#125; <br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String str1 = <span class="hljs-string">&quot;abc&quot;</span>; <br>System.out.println(str1 == <span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>1：栈中开辟一块空间存放引用str1</li><li>2：String池中开辟一块空间，存放String常量”abc”</li><li>3：引用str1指向池中String常量”abc”</li><li>4：str1所指代的地址即常量”abc”所在地址，输出为true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>); <br>System.out.println(str2 == <span class="hljs-string">&quot;abc&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>1： 栈中开辟一块空间存放引用str2</li><li>2：堆中开辟一块空间存放一个新建的String对象”abc”</li><li>3：引用str2指向堆中的新建的String对象”abc”</li><li>4：str2所指代的对象地址为堆中地址，而常量”abc”地址在池中，输出为false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>); <br>String str3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;abc&quot;</span>);<br>System.out.println(str3 == str2);<br></code></pre></td></tr></table></figure><ul><li>1：栈中开辟一块空间存放引用str3</li><li>2：堆中开辟一块新空间存放另外一个(不同于str2所指)新建的String对象</li><li>3：引用str3指向另外新建的那个String对象</li><li>4：str3和str2指向堆中不同的String对象，地址也不相同，输出为false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String str4 = <span class="hljs-string">&quot;a&quot;</span> + <span class="hljs-string">&quot;b&quot;</span>; <br>System.out.println(str4 == <span class="hljs-string">&quot;ab&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>1： 栈中开辟一块空间存放引用str4</li><li>2：根据编译器合并已知量的优化功能，池中开辟一块空间，存放合并后的String常量”ab”</li><li>3：引用str4指向池中常量”ab”</li><li>4：str4所指即池中常量”ab”，输出为true</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">String s1 = <span class="hljs-string">&quot;a&quot;</span>;<br>String s2 = <span class="hljs-string">&quot;b&quot;</span>; <br>String str6 = s1 + s2; <br>System.out.println(str6 == <span class="hljs-string">&quot;ab&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>1：栈中开辟一块中间存放引用s1，s1指向池中String常量”a”</li><li>2：栈中开辟一块中间存放引用s2，s2指向池中String常量”b”</li><li>3： 栈中开辟一块中间存放引用str6</li><li>4：s1 + s2通过StringBuilder的最后一步toString()方法还原一个新的String对象”ab”，因此 堆中开辟一块空间存放此对象</li><li>5：引用str6指向堆中(s1 + s2)所还原的新String对象</li><li>6： str6指向的对象在堆中，而常量”ab”在池中，输出为false</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String str7 = <span class="hljs-string">&quot;abc&quot;</span>.substring(<span class="hljs-number">0</span>， <span class="hljs-number">2</span>); <br>System.out.println(str7 == <span class="hljs-string">&quot;ab&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>栈中开辟一块空间存放引用str7</li><li>substring()方法还原一个新的String对象”ab”（不同于str6所指），堆中开辟一块空间存放此 对象</li><li>引用str7指向堆中的新String对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String str8 = <span class="hljs-string">&quot;abc&quot;</span>.toUpperCase();<br>System.out.println(str8 == <span class="hljs-string">&quot;ABC&quot;</span>);<br></code></pre></td></tr></table></figure><ul><li>1：栈中开辟一块空间存放引用str8</li><li>2：toUpperCase()方法还原一个新的String对象”ABC”，池中并未开辟新的空间存放String常 量”ABC”</li><li>3：引用str8指向堆中的新String对象</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;haha&quot;</span>);<br>System.out.println(a.intern() == a);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>String的Intern方法详解<br>intern的作用<br>intern的作用是把new出来的字符串的引用添加到stringtable中，java会先计算string的hashcode，查找stringtable中是否已经有string对应的引用了，如果有返回引用（地址），然后没有把字符串的地址放到stringtable中，并返回字符串的引用（地址）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String a = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;haha&quot;</span>);<br>System.out.println(a.intern() == a);<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>因为有双引号括起来的字符串，所以会把ldc命令，即”haha”会被我们添加到字符串常量池，它的引用是string的char数组的地址，会被我们添加到stringtable中。所以a.intern的时候，返回的其实是string中的char数组的地址，和a的string实例化地址肯定是不一样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String e = <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;jo&quot;</span>) + <span class="hljs-keyword">new</span> String(<span class="hljs-string">&quot;hn&quot;</span>); <br>System.out.println(e.intern() == e);<span class="hljs-comment">//true</span><br></code></pre></td></tr></table></figure><p>new String(“jo”) + new String(“hn”)实际上会转为stringbuffer的append 然后tosring()出来，实际上是new 一个新的string出来。在这个过程中，并没有双引号括起john，也就是说并不会执行ldc然后把john的引用添加到stringtable中，所以intern的时候实际就是把新的string地址（即e的地址）添加到stringtable中并且返回回来。</p><h2 id="3-Object"><a href="#3-Object" class="headerlink" title="3 Object"></a>3 Object</h2><h3 id="3-1-getClass"><a href="#3-1-getClass" class="headerlink" title="3.1 getClass()"></a>3.1 getClass()</h3><p>​    获取类对象</p><h3 id="3-2-hashCode"><a href="#3-2-hashCode" class="headerlink" title="3.2 hashCode()"></a>3.2 hashCode()</h3><p>返回当前对象的hashCode值，int</p><p>对于hashCode有以下几点约束</p><ul><li><p>在 Java 应用程序执行期间，在对同一对象多次调用 hashCode 方法时，必须一致地返回相同的整数。</p></li><li><p>如果两个对象 x.equals(y) 方法返回true，则x、y这两个对象的hashCode必须相等。</p></li><li><p>如果两个对象x.equals(y) 方法返回false，则x、y这两个对象的hashCode可以相等也可以不等。</p></li><li><p>默认的hashCode是将内存地址转换为的hash值，重写过后就是自定义的计算方式；也可以通过System.identityHashCode(Object)来返回原本的hashCode。</p><p>总的来说，Java中的集合（Collection）有两类，一类是List，再有一类是Set。前者集合内的元素是有序的，元素可以重复；后者元素无序，但元素不可重复。这里就引出一个问题：要想保证元素不重复，可两个元素是否重复应该依据什么来判断呢？<br>  这就是Object.equals方法了。但是，如果每增加一个元素就检查一次，那么当元素很多时，后添加到集合中的元素比较的次数就非常多了。也就是说，如果集合中现在已经有1000个元素，那么第1001个元素加入集合时，它就要调用1000次equals方法。这显然会大大降低效率。<br>  于是，Java采用了哈希表的原理。哈希（Hash）实际上是个人名，由于他提出一哈希算法的概念，所以就以他的名字命名了。哈希算法也称为散列算法，是将数据依特定算法直接指定到一个地址上，初学者可以简单理解，hashCode方法实际上返回的就是对象存储的物理地址（实际可能并不是）。<br>  这样一来，当集合要添加新的元素时，先调用这个元素的hashCode方法，就一下子能定位到它应该放置的物理位置上。如果这个位置上没有元素，它就可以直接存储在这个位置上，不用再进行任何比较了；如果这个位置上已经有元素了，就调用它的equals方法与新元素进行比较，相同的话就不存了，不相同就散列其它的地址。所以这里存在一个冲突解决的问题。这样一来实际调用equals方法的次数就大大降低了，几乎只需要一两次。  </p></li></ul><p><strong>相等（相同）的对象必须具有相等的哈希码（或者散列码），为什么？</strong></p><p> 想象一下，假如两个Java对象A和B，A和B相等（eqauls结果为true），但A和B的哈希码不同，则A和B存入HashMap时的哈希码计算得到的HashMap内部数组位置索引可能不同，那么A和B很有可能允许同时存入HashMap，显然相等/相同的元素是不允许同时存入HashMap，HashMap不允许存放重复元素。</p><p> <strong>两个对象的hashCode相同，它们并不一定相同</strong></p><p> 也就是说，不同对象的hashCode可能相同；假如两个Java对象A和B，A和B不相等（eqauls结果为false），但A和B的哈希码相等，将A和B都存入HashMap时会发生哈希冲突，也就是A和B存放在HashMap内部数组的位置索引相同这时HashMap会在该位置建立一个链接表，将A和B串起来放在该位置，显然，该情况不违反HashMap的使用原则，是允许的。当然，哈希冲突越少越好，尽量采用好的哈希算法以避免哈希冲突。</p><h3 id="3-3-equals"><a href="#3-3-equals" class="headerlink" title="3.3 equals()"></a>3.3 equals()</h3><p><code>equals()</code>方法是用来判断其他的对象是否和该对象相等.</p><p> equals()方法在object类中定义如下： </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object obj)</span> </span>&#123;  <br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">this</span> == obj);  <br>&#125;  <br></code></pre></td></tr></table></figure><p>很明显是对两个对象的地址值进行的比较（即比较引用是否相同）。但是我们知道，<code>String</code> 、<code>Math</code>、<code>Integer</code>、<code>Double</code>等这些封装类在使用<code>equals()</code>方法时，已经覆盖了<code>object</code>类的equals()方法，基于内容进行比较。</p><p> 比如在<code>String</code>类中如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">equals</span><span class="hljs-params">(Object anObject)</span> </span>&#123;  <br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == anObject) &#123;  <br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;  <br>    &#125;  <br>    <span class="hljs-keyword">if</span> (anObject <span class="hljs-keyword">instanceof</span> String) &#123;  <br>        String anotherString = (String)anObject;  <br>        <span class="hljs-keyword">int</span> n = count;  <br>        <span class="hljs-keyword">if</span> (n == anotherString.count) &#123;  <br>            <span class="hljs-keyword">char</span> v1[] = value;  <br>            <span class="hljs-keyword">char</span> v2[] = anotherString.value;  <br>            <span class="hljs-keyword">int</span> i = offset;  <br>            <span class="hljs-keyword">int</span> j = anotherString.offset;  <br>            <span class="hljs-keyword">while</span> (n– != <span class="hljs-number">0</span>) &#123;  <br>                <span class="hljs-keyword">if</span> (v1[i++] != v2[j++])  <br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  <br>            &#125;  <br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;  <br>&#125;  <br></code></pre></td></tr></table></figure><h3 id="3-4-clone"><a href="#3-4-clone" class="headerlink" title="3.4 clone()"></a>3.4 clone()</h3><p>此方法返回当前对象的一个副本</p><p>子类需要实现<code>Cloneable</code> 接口，如果没实现，会抛出<code>CloneNotSupportedException</code></p><p>浅拷贝（拷贝引用）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>        Person clone = (Person) person.clone();<br>        System.out.println(clone == person); <span class="hljs-comment">//false</span><br>        System.out.println(person.age == clone.age); <span class="hljs-comment">//true</span><br>        System.out.println(person.name == clone.name); <span class="hljs-comment">//true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>深拷贝（拷贝值）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> age;<br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Person person = (Person) <span class="hljs-keyword">super</span>.clone();<br>        person.name = <span class="hljs-keyword">new</span> String(name);<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Person</span><span class="hljs-params">(<span class="hljs-keyword">int</span> age, String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.age = age;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Person person = <span class="hljs-keyword">new</span> Person(<span class="hljs-number">18</span>, <span class="hljs-string">&quot;zs&quot;</span>);<br>        Person clone = (Person) person.clone();<br>        System.out.println(clone == person); <span class="hljs-comment">//false</span><br>        System.out.println(person.age == clone.age); <span class="hljs-comment">//true</span><br>        System.out.println(person.name == clone.name); <span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-5-toString"><a href="#3-5-toString" class="headerlink" title="3.5 toString()"></a>3.5 toString()</h3><p>子类可重写，默认的<code>toString</code>方法，只是将当前类的全限定性类名+@+十六进制的hashCode值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-6-wait-、wait-long-、wait-long-int"><a href="#3-6-wait-、wait-long-、wait-long-int" class="headerlink" title="3.6 wait()、wait(long)、wait(long,int)"></a>3.6 wait()、wait(long)、wait(long,int)</h3><p>这三个方法是用来 线程间通信用 的，作用是 阻塞当前线程 ，等待其他线程调用<code>notify</code>()、<code>notifyAll</code>()方法将其唤醒。</p><p>注意：</p><ol><li>此方法只能在当前线程获取到对象的锁监视器之后才能调用，否则会抛出·异常。</li><li>调用<code>wait</code>方法，线程会将锁监视器进行释放；而<code>Thread.sleep</code>，<code>Thread.yield</code>并不会释放锁 。<ol><li><code>wait</code>方法会一直阻塞，直到其他线程调用当前对象的<code>notify</code>()、<code>notifyAll()</code>方法将其唤醒；而<code>wait(long)</code>是等待给定超时时间内（单位毫秒），如果还没有调用<code>notify()</code>、<code>nofiyAll()</code>会自动唤醒；<code>waite(long,int)</code>如果第二个参数大于0并且小于999999，则第一个参数+1作为超时时间；</li></ol></li></ol><h3 id="3-7-notify-、notifyAll"><a href="#3-7-notify-、notifyAll" class="headerlink" title="3.7 notify()、notifyAll()"></a>3.7 notify()、notifyAll()</h3><p>如果当前线程获得了当前对象锁，调用<code>wait</code>方法，将锁释放并阻塞；这时另一个线程获取到了此对象锁，并调用此对象的<code>notify()</code>、<code>notifyAll()</code>方法将之前的线程唤醒。 </p><p> <code>notify()</code> 随机唤醒之前在当前对象上调用wait方法的一个线程</p><p><code>notifyAll()</code>  唤醒所有之前在当前对象上调用wait方法的线程</p><h3 id="3-8-finalize"><a href="#3-8-finalize" class="headerlink" title="3.8 finalize()"></a>3.8 finalize()</h3><p>此方法是在垃圾回收之前，JVM会调用此方法来清理资源。此方法可能会将对象重新置为可达状态，导致JVM无法进行垃圾回收。</p><p>finalize()方法具有如下4个特点：</p><ol><li>永远不要主动调用某个对象的finalize()方法，该方法由垃圾回收机制自己调用；</li><li>finalize()何时被调用，是否被调用具有不确定性；</li><li>当JVM执行可恢复对象的finalize()可能会将此对象重新变为可达状态；</li><li>当JVM执行finalize()方法时出现异常，垃圾回收机制不会报告异常，程序继续执行。</li></ol><h2 id="4-集合"><a href="#4-集合" class="headerlink" title="4 集合"></a>4 集合</h2><p><img src="/blog/2022/01/27/Java%E5%9F%BA%E7%A1%80/collection.png" alt="collection"></p><h3 id="4-1-List"><a href="#4-1-List" class="headerlink" title="4.1 List"></a>4.1 List</h3><p>ArrayList和LinkedList有什么区别?<br>ArrayList 底层用数组实现, LinkedList底层链表实现<br>ArrayList 适合随机访问时用,LinkedList适合插入时用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><p>ArrayList 扩容，大小变为原来的1.5倍</p><h3 id="4-2-Map"><a href="#4-2-Map" class="headerlink" title="4.2 Map"></a>4.2 Map</h3><p>HashMap 实现原理</p><p>基于数组+链表+红黑树</p><p><strong>插入流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>n = (tab = resize()).length;<br></code></pre></td></tr></table></figure><p>如果table 为空就行<code>resize()</code>扩容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-keyword">null</span>)<br>    tab[i] = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br></code></pre></td></tr></table></figure><p>根据<code>hash</code>码找到<code>Node</code> 在数组中的下标，如果该下标下没有<code>Node</code>，直接插入到该下标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)<br>    e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-keyword">this</span>, tab, hash, key, value);<br></code></pre></td></tr></table></figure><p>否则，判断节点类型是不是<code>TreeNode</code>，如果是，插入到红黑树中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> binCount = <span class="hljs-number">0</span>; ; ++binCount) &#123;<br>    <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-keyword">null</span>) &#123;<br>        p.next = newNode(hash, key, value, <span class="hljs-keyword">null</span>);<br>        <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span><br>            treeifyBin(tab, hash);<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;<br>        ((k = e.key) == key || (key != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(k))))<br>        <span class="hljs-keyword">break</span>;<br>    p = e;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果不是，插入到链表尾部，插入完成后判断链表长度是否达到树化阈值<code>TREEIFY_THRESHOLD</code>，如果达到，将链表转化成红黑树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (++size &gt; threshold)<br>    resize();<br></code></pre></td></tr></table></figure><p>插入完成后，判断节点个数是否大于扩容阈值<code>threshold</code>，如果大于，进行扩容</p><p><strong>扩容流程(1.8)</strong></p><ul><li>capacity 即容量，默认16。</li><li>loadFactor 加载因子，默认是0.75</li><li>threshold 阈值。阈值=容量*加载因子。默认12。当元素数量超过阈值时便会触发扩容</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">newCap = DEFAULT_INITIAL_CAPACITY;<br>newThr = (<span class="hljs-keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap(<span class="hljs-keyword">int</span> initialCapacity, <span class="hljs-keyword">float</span> loadFactor)<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tableSizeFor</span><span class="hljs-params">(<span class="hljs-keyword">int</span> cap)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = cap - <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;<br>    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;<br>    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>指定<code>initialCapacity</code>时，大小为大于<code>initialCapacity</code>的2^n</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>n = (tab = resize()).length;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> Node[newCap];<br></code></pre></td></tr></table></figure><p>第一次插入元素时，触发resize()，创建Node数组 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (++size &gt; threshold)<br>    resize();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">newCap = oldCap &lt;&lt; <span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (oldTab != <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; oldCap; ++j) &#123;<br>        Node&lt;K,V&gt; e;<br>        <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-keyword">null</span>) &#123;<br>            oldTab[j] = <span class="hljs-keyword">null</span>;<br>            <span class="hljs-keyword">if</span> (e.next == <span class="hljs-keyword">null</span>)<br>                newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)<br>                ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-keyword">this</span>, newTab, j, oldCap);<br>            <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">// preserve order</span><br>                Node&lt;K,V&gt; loHead = <span class="hljs-keyword">null</span>, loTail = <span class="hljs-keyword">null</span>;<br>                Node&lt;K,V&gt; hiHead = <span class="hljs-keyword">null</span>, hiTail = <span class="hljs-keyword">null</span>;<br>                Node&lt;K,V&gt; next;<br>                <span class="hljs-keyword">do</span> &#123;<br>                    next = e.next;<br>                    <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (loTail == <span class="hljs-keyword">null</span>)<br>                            loHead = e;<br>                        <span class="hljs-keyword">else</span><br>                            loTail.next = e;<br>                        loTail = e;<br>                    &#125;<br>                    <span class="hljs-keyword">else</span> &#123;<br>                        <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-keyword">null</span>)<br>                            hiHead = e;<br>                        <span class="hljs-keyword">else</span><br>                            hiTail.next = e;<br>                        hiTail = e;<br>                    &#125;<br>                &#125; <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-keyword">null</span>);<br>                <span class="hljs-keyword">if</span> (loTail != <span class="hljs-keyword">null</span>) &#123;<br>                    loTail.next = <span class="hljs-keyword">null</span>;<br>                    newTab[j] = loHead;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-keyword">null</span>) &#123;<br>                    hiTail.next = <span class="hljs-keyword">null</span>;<br>                    newTab[j + oldCap] = hiHead;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Node</code> 个数大于阈值<code>threshold</code>时，进行扩容，容量大小为原来的两倍，创建<code>newTab</code>后进行数据迁移</p><p>遍历<code>oldTab</code>，重新计算下标，插入到<code>newTab</code>，新下标要么是原下标，要么是原下标的两倍(数组大小为2^n)。</p><h2 id="5-异常"><a href="#5-异常" class="headerlink" title="5 异常"></a>5 异常</h2><p><img src="/blog/2022/01/27/Java%E5%9F%BA%E7%A1%80/exception.png" alt="img"></p><h3 id="5-1-Error"><a href="#5-1-Error" class="headerlink" title="5.1 Error"></a>5.1 Error</h3><p>是程序中无法处理的错误，表示运行应用程序中出现了严重的错误。此类错误一般表示代码运行时JVM出现问题。通常有<code>Virtual MachineError</code>（虚拟机运行错误）、<code>NoClassDefFoundError</code>（类定义错误）等。比如说当jvm耗完可用内存时，将出现<code>OutOfMemoryError</code>。此类错误发生时，JVM将终止线程。这些错误是不可查的，非代码性错误。因此，当此类错误发生时，应用不应该去处理此类错误。</p><h3 id="5-2-Exception"><a href="#5-2-Exception" class="headerlink" title="5.2 Exception"></a>5.2 Exception</h3><p>程序本身可以捕获并且可以处理的异常。</p><p>Exception这种异常又分为两类：运行时异常和编译异常。</p><p>1、运行时异常(不受检异常)：<code>RuntimeException</code>类极其子类表示JVM在运行期间可能出现的错误。比如说试图使用空值对象的引用（<code>NullPointerException</code>）、数组下标越界（<code>ArrayIndexOutBoundException</code>）。此类异常属于不可查异常，一般是由程序逻辑错误引起的，在程序中可以选择捕获处理，也可以不处理。</p><p>2、编译异常(受检异常)：<code>Exception</code>中除<code>RuntimeException</code>极其子类之外的异常。如果程序中出现此类异常，比如说<code>IOException</code>，必须对该异常进行处理，否则编译不通过。在程序中，通常不会自定义该类异常，而是直接使用系统提供的异常类。</p><h2 id="6-IO"><a href="#6-IO" class="headerlink" title="6 IO"></a>6 IO</h2><p><img src="/blog/2022/01/27/Java%E5%9F%BA%E7%A1%80/io.png" alt="img"></p><h2 id="7-反射"><a href="#7-反射" class="headerlink" title="7 反射"></a>7 反射</h2><p><strong>反射的原理，获取类对象的三种方式。</strong><br>原理：操作.class字节码文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">A.class<br>a.getClass()<br>Class.forName();<br></code></pre></td></tr></table></figure><p><strong>动态代理的几种实现方式，优缺点</strong><br>                                 Jdk动态代理                     Cglib动态代理<br>实现接口                        需要                                    不需要<br>生成字节码文件            生成                                    不生成<br>速度                                快                                            慢</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java基础</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>IO模型、Netty</title>
    <link href="/blog/2022/01/27/Netty/"/>
    <url>/blog/2022/01/27/Netty/</url>
    
    <content type="html"><![CDATA[<h2 id="1、IO-模型"><a href="#1、IO-模型" class="headerlink" title="1、IO 模型"></a>1、IO 模型</h2><p>同步阻塞、同步非阻塞、同步多路复用、异步阻塞（没有此情况）、异步非阻塞</p><ul><li>同步：线程自己去获取结果（一个线程）</li><li>异步：线程自己不去获取结果，而是由其它线程送结果（至少两个线程）</li></ul><p>当调用一次 channel.read 或 stream.read 后，会切换至操作系统内核态来完成真正数据读取，而读取又分为两个阶段，分别为：</p><ul><li>等待数据阶段</li><li>复制数据阶段</li></ul><p><img src="/blog/2022/01/27/Netty/0033.png"></p><ul><li><p>阻塞 IO</p><p><img src="/blog/2022/01/27/Netty/0039.png"></p></li><li><p>非阻塞  IO</p><p><img src="/blog/2022/01/27/Netty/0035.png"></p></li><li><p>多路复用</p><p><img src="/blog/2022/01/27/Netty/0038.png"></p></li><li><p>信号驱动</p></li><li><p>异步 IO</p><p><img src="/blog/2022/01/27/Netty/0037.png"></p></li><li><p>阻塞 IO vs 多路复用</p><p><img src="/blog/2022/01/27/Netty/0034.png"></p><p><img src="/blog/2022/01/27/Netty/0036.png"></p></li></ul><h2 id="2、多路复用之select、poll、epoll详解"><a href="#2、多路复用之select、poll、epoll详解" class="headerlink" title="2、多路复用之select、poll、epoll详解"></a>2、多路复用之select、poll、epoll详解</h2><p>select，poll，epoll都是IO多路复用的机制。I/O多路复用就是通过一种机制，一个进程可以监视多个描述符，一旦某个描述符就绪（一般是读就绪或者写就绪），能够通知程序进行相应的读写操作。但select，poll，epoll本质上都是同步I/O，因为他们都需要在读写事件就绪后自己负责进行读写，也就是说这个读写过程是阻塞的，而异步I/O则无需自己负责进行读写，异步I/O的实现会负责把数据从内核拷贝到用户空间。</p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">select</span> <span class="hljs-params">(<span class="hljs-keyword">int</span> n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>select 函数监视的文件描述符分3类，分别是writefds、readfds、和exceptfds。调用后select函数会阻塞，直到有描述副就绪（有数据 可读、可写、或者有except），或者超时（timeout指定等待时间，如果立即返回设为null即可），函数返回。当select函数返回后，可以 通过遍历fdset，来找到就绪的描述符。</p><p>select目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点。select的一 个缺点在于单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义甚至重新编译内核的方式提升这一限制，但 是这样也会造成效率的降低。</p><h3 id="Poll"><a href="#Poll" class="headerlink" title="Poll"></a>Poll</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">poll</span> <span class="hljs-params">(struct pollfd *fds, <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> nfds, <span class="hljs-keyword">int</span> timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>不同与select使用三个位图来表示三个fdset的方式，poll使用一个 pollfd的指针实现。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">pollfd</span> &#123;</span><br>    <span class="hljs-keyword">int</span> fd; <span class="hljs-comment">/* file descriptor */</span><br>    <span class="hljs-keyword">short</span> events; <span class="hljs-comment">/* requested events to watch */</span><br>    <span class="hljs-keyword">short</span> revents; <span class="hljs-comment">/* returned events witnessed */</span><br>&#125;;<br></code></pre></td></tr></table></figure><blockquote><p>从上面看，select和poll都需要在返回后，<code>通过遍历文件描述符来获取已经就绪的socket</code>。事实上，同时连接的大量客户端在一时刻可能只有很少的处于就绪状态，因此随着监视的描述符数量的增长，其效率也会线性下降。</p></blockquote><h3 id="Epoll"><a href="#Epoll" class="headerlink" title="Epoll"></a>Epoll</h3><p>epoll是在2.6内核中提出的，是之前的select和poll的增强版本。相对于select和poll来说，epoll更加灵活，没有描述符限制。</p><p>epoll的三大关键要素：<strong>mmap、红黑树、链表</strong>。</p><p>epoll是通过内核与用户空间mmap同一块内存实现的。mmap将用户空间的一块地址和内核空间的一块地址同时映射到相同的一块物理内存地址，使得这块物理内存对内核和对用户均可见，减少用户态和内核态之间的数据交换。内核可以直接看到epoll监听的句柄，效率高。</p><p>epoll在实现上采用红黑树去存储所有套接字，当添加或者删除一个套接字时（epoll_ctl），都在红黑树上去处理，红黑树本身插入和删除性能比较好，时间复杂度O(logN)。</p><p>一旦有事件发生，epoll就会将该事件添加到双向链表中。那么当我们调用epoll_wait时，epoll_wait只需要检查rdlist双向链表中是否有存在注册的事件</p><p> epoll_wait的工作流程：</p><ol><li>epoll_wait调用ep_poll，当rdlist为空（无就绪fd）时挂起当前进程，直到rdlist不空时进程才被唤醒。</li><li>文件fd状态改变（buffer由不可读变为可读或由不可写变为可写），导致相应fd上的回调函数ep_poll_callback()被调用。</li><li>ep_poll_callback将相应fd对应epitem加入rdlist，导致rdlist不空，进程被唤醒，epoll_wait得以继续执行。</li><li>ep_events_transfer函数将rdlist中的epitem拷贝到txlist中，并将rdlist清空。</li><li>ep_send_events函数（很关键），它扫描txlist中的每个epitem，调用其关联fd对用的poll方法。此时对poll的调用仅仅是取得fd上较新的events（防止之前events被更新），之后将取得的events和相应的fd发送到用户空间（封装在struct epoll_event，从epoll_wait返回）。   </li></ol><p>epoll操作过程需要三个接口，分别如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_create</span><span class="hljs-params">(<span class="hljs-keyword">int</span> size)</span>；<span class="hljs-comment">//创建一个epoll的句柄</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_ctl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> epfd, <span class="hljs-keyword">int</span> op, <span class="hljs-keyword">int</span> fd, struct epoll_event *event)</span>；<span class="hljs-comment">//增删改fd</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">epoll_wait</span><span class="hljs-params">(<span class="hljs-keyword">int</span> epfd, struct epoll_event * events, <span class="hljs-keyword">int</span> maxevents, <span class="hljs-keyword">int</span> timeout)</span></span>;<span class="hljs-comment">//等待fd就绪，将epoll_event 发送到用户空间</span><br></code></pre></td></tr></table></figure><p>epoll对文件描述符的操作有两种模式：<strong>LT（level trigger）</strong>和<strong>ET（edge trigger）</strong>。LT模式是默认模式，LT模式与ET模式的区别如下：<br>　　<strong>LT模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序可以不立即处理该事件</code>。下次调用epoll_wait时，会再次响应应用程序并通知此事件。<br>　　<strong>ET模式</strong>：当epoll_wait检测到描述符事件发生并将此事件通知应用程序，<code>应用程序必须立即处理该事件</code>。如果不处理，下次调用epoll_wait时，不会再次响应应用程序并通知此事件。</p><h4 id="1-LT模式"><a href="#1-LT模式" class="headerlink" title="1. LT模式"></a>1. LT模式</h4><p>LT(level triggered)是缺省的工作方式，并且同时支持block和no-block socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的。</p><h4 id="2-ET模式"><a href="#2-ET模式" class="headerlink" title="2. ET模式"></a>2. ET模式</h4><p>ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once)</p><p>ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。epoll工作在ET模式的时候，必须使用非阻塞套接口，以避免由于一个文件句柄的阻塞读/阻塞写操作把处理多个文件描述符的任务饿死。</p><h2 id="3-、零拷贝"><a href="#3-、零拷贝" class="headerlink" title="3 、零拷贝"></a>3 、零拷贝</h2><p>传统的 IO 将一个文件通过 socket 写出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">File f = <span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;helloword/data.txt&quot;</span>);<br>RandomAccessFile file = <span class="hljs-keyword">new</span> RandomAccessFile(file, <span class="hljs-string">&quot;r&quot;</span>);<br><br><span class="hljs-keyword">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[(<span class="hljs-keyword">int</span>)f.length()];<br>file.read(buf);<br><br>Socket socket = ...;<br>socket.getOutputStream().write(buf);<br></code></pre></td></tr></table></figure><p>内部工作流程是这样的：</p><p><img src="/blog/2022/01/27/Netty/0024.png"></p><ol><li><p>java 本身并不具备 IO 读写能力，因此 read 方法调用后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，去调用操作系统（Kernel）的读能力，将数据读入<strong>内核缓冲区</strong>。这期间用户线程阻塞，操作系统使用 DMA（Direct Memory Access）来实现文件读，其间也不会使用 cpu</p><blockquote><p>DMA 也可以理解为硬件单元，用来解放 cpu 完成文件 IO</p></blockquote></li><li><p>从<strong>内核态</strong>切换回<strong>用户态</strong>，将数据从<strong>内核缓冲区</strong>读入<strong>用户缓冲区</strong>（即 byte[] buf），这期间 cpu 会参与拷贝，无法利用 DMA</p></li><li><p>调用 write 方法，这时将数据从<strong>用户缓冲区</strong>（byte[] buf）写入 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</p></li><li><p>接下来要向网卡写数据，这项能力 java 又不具备，因此又得从<strong>用户态</strong>切换至<strong>内核态</strong>，调用操作系统的写能力，使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</p></li></ol><p>可以看到中间环节较多，java 的 IO 实际不是物理设备级别的读写，而是缓存的复制，底层的真正读写是操作系统来完成的</p><ul><li>用户态与内核态的切换发生了 3 次，这个操作比较重量级</li><li>数据拷贝了共 4 次</li></ul><p>通过 DirectByteBuf </p><ul><li>ByteBuffer.allocate(10)  HeapByteBuffer 使用的还是 java 内存</li><li>ByteBuffer.allocateDirect(10)  DirectByteBuffer 使用的是操作系统内存</li></ul><p><img src="/blog/2022/01/27/Netty/0025.png"></p><p>大部分步骤与优化前相同，不再赘述。唯有一点：java 可以使用 DirectByteBuf 将堆外内存映射到 jvm 内存中来直接访问使用</p><ul><li>这块内存不受 jvm 垃圾回收的影响，因此内存地址固定，有助于 IO 读写</li><li>java 中的 DirectByteBuf 对象仅维护了此内存的虚引用，内存回收分成两步<ul><li>DirectByteBuf 对象被垃圾回收，将虚引用加入引用队列</li><li>通过专门线程访问引用队列，根据虚引用释放堆外内存</li></ul></li><li>减少了一次数据拷贝，用户态与内核态的切换次数没有减少</li></ul><p>进一步优化（底层采用了 linux 2.1 后提供的 sendFile 方法），java 中对应着两个 channel 调用 transferTo/transferFrom 方法拷贝数据</p><p><img src="/blog/2022/01/27/Netty/0026.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>数据从<strong>内核缓冲区</strong>传输到 <strong>socket 缓冲区</strong>，cpu 会参与拷贝</li><li>最后使用 DMA 将 <strong>socket 缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>可以看到</p><ul><li>只发生了一次用户态与内核态的切换</li><li>数据拷贝了 3 次</li></ul><p>进一步优化（linux 2.4）</p><p><img src="/blog/2022/01/27/Netty/0027.png"></p><ol><li>java 调用 transferTo 方法后，要从 java 程序的<strong>用户态</strong>切换至<strong>内核态</strong>，使用 DMA将数据读入<strong>内核缓冲区</strong>，不会使用 cpu</li><li>只会将一些 offset 和 length 信息拷入 <strong>socket 缓冲区</strong>，几乎无消耗</li><li>使用 DMA 将 <strong>内核缓冲区</strong>的数据写入网卡，不会使用 cpu</li></ol><p>整个过程仅只发生了一次用户态与内核态的切换，数据拷贝了 2 次。所谓的【零拷贝】，并不是真正无拷贝，而是在不会拷贝重复数据到 jvm 内存中，零拷贝的优点有</p><ul><li>更少的用户态与内核态的切换</li><li>不利用 cpu 计算，减少 cpu 缓存伪共享</li><li>零拷贝适合小文件传输</li></ul><h2 id="4、NIO"><a href="#4、NIO" class="headerlink" title="4、NIO"></a>4、NIO</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">ServerSocketChannel ssc = ServerSocketChannel.open(); <span class="hljs-comment">//打开SSC</span><br>ssc.bind(<span class="hljs-keyword">new</span> InetSocketAddress(<span class="hljs-number">8888</span>)); <span class="hljs-comment">//绑定端口</span><br>ssc.configureBlocking(<span class="hljs-keyword">false</span>); <span class="hljs-comment">//设置为非阻塞</span><br>Selector selector = Selector.open(); <span class="hljs-comment">//创建Select ---&gt; epoll_create()</span><br>ssc.register(selector, SelectionKey.OP_ACCEPT); <span class="hljs-comment">//将SSC注册到Select ---&gt; epoll_ctl()</span><br>selector.select(); <span class="hljs-comment">//等待事件发生 ---&gt; epoll_wait()</span><br>selectionKey.isAcceptable() <span class="hljs-comment">//处理连接事件</span><br></code></pre></td></tr></table></figure><h2 id="5、Netty"><a href="#5、Netty" class="headerlink" title="5、Netty"></a>5、Netty</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>    <span class="hljs-keyword">new</span> ServerBootstrap().<br>            group(<span class="hljs-keyword">new</span> NioEventLoopGroup()).<br>            channel(NioServerSocketChannel.class)<br>            .childHandler(<span class="hljs-keyword">new</span> ChannelInitializer&lt;NioSocketChannel&gt;() &#123;<br>                <span class="hljs-meta">@Override</span><br>                <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">initChannel</span><span class="hljs-params">(NioSocketChannel nioSocketChannel)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>                    nioSocketChannel.pipeline().addLast(<span class="hljs-keyword">new</span> LoggingHandler());<br>                &#125;<br>            &#125;).<br>            bind(<span class="hljs-number">8000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><blockquote><p>NioEventLoop   封装Select、线程、任务队列 ，处理普通任务、定时任务、IO事件</p><p>NioServerSocketChannel  封装SSC，绑定SSC 及其对应的handler</p><p>NioSocketChannel 封装Sc，绑定Sc 及其对应的handler</p></blockquote><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><ol><li><strong>[main]</strong> 创建NioServerSocketChannel  </li><li><strong>[main]</strong> 添加初始化Handler，等待被调用</li><li><strong>[main]</strong> 提交任务到NioEventLoop</li><li><strong>[nio-thread]</strong> 执行提交的任务(注册SSC 到Select)，执行NioServerSocketChannel  的初始化Handler(向NioServerSocketChannel  中添加一个Acceptor)</li><li><strong>[nio-thread]</strong> 回调doBind0()  绑定端口，执行NioServerSocketChannel  Active 事件  HeadContext 的 channelActive 绑定关注的事件</li></ol><h3 id="ACCEPT-流程"><a href="#ACCEPT-流程" class="headerlink" title="ACCEPT 流程"></a>ACCEPT 流程</h3><ol><li>select.select() 阻塞直至事件发生</li><li>遍历处理selectKeys</li><li>拿到一个key，判断事件类型是否为Accept</li><li>创建SocketChannel，设置非阻塞</li><li>将SocketChannel 注册至Select</li><li>关注selectKey 的read 事件</li></ol><h3 id="Read-流程"><a href="#Read-流程" class="headerlink" title="Read 流程"></a>Read 流程</h3><ol><li>select.select() 阻塞直至事件发生</li><li>遍历处理selectKeys</li><li>拿到Key，判断是否为read 事件</li><li>读取操作</li></ol><h3 id="EventLoop"><a href="#EventLoop" class="headerlink" title="EventLoop"></a>EventLoop</h3><ol><li>Select 何时创建？构造方法</li><li>为什么创建两个Select？  用数组实现替换Set，提高便利效率</li><li>Nio 线程何时启动？ 首次调用execute()方法时</li><li>提交普通任务是否回结束select阻塞？ 是</li><li>什么时候回进入阻塞？  当没有定时任务时</li><li>如何解决空轮询？ 创建新的Select进行替换</li><li>ioRatio 控制什么？ 控制处理io 事件时占用的时间，设置为100，io事件处理时间为50%</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端、Netty</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nio、Netty、多路复用</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql</title>
    <link href="/blog/2022/01/27/Mysql/"/>
    <url>/blog/2022/01/27/Mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="CHAR-和-VARCHAR-区别？"><a href="#CHAR-和-VARCHAR-区别？" class="headerlink" title="CHAR 和 VARCHAR 区别？"></a>CHAR 和 VARCHAR 区别？</h3><p>1）首先可以明确的是 CHAR 是定长的，而 VARCHAR 是可以变长。</p><p>VARCHAR 在 MySQL 5.0 之后长度支持到 65535 字节，但会在数据开头使用额外 1~2 个字节存储字符串长度（列长度小于 255 字节时使用 1 字节表示，否则 2 字节），在结尾使用 1 字节表示字符串结束。</p><p>2）再者，在存储方式上，CHAR 对英文字符（ASCII）占用 1 字节，对一个汉字使用用 2 字节。而 VARCHAR 对每个字符均使用 2 字节。</p><h3 id="CHAR-和-VARCHAR-如何选择？"><a href="#CHAR-和-VARCHAR-如何选择？" class="headerlink" title="CHAR 和 VARCHAR 如何选择？"></a>CHAR 和 VARCHAR 如何选择？</h3><p>1）对于经常变更的数据来说，CHAR 比 VARCHAR更好，因为 CHAR 不容易产生碎片。</p><p>2）对于非常短的列或固定长度的数据（如 MD5），CHAR 比 VARCHAR 在存储空间上更有效率。</p><h3 id="Mysql的InnoDB和MyISAM有什么区别？"><a href="#Mysql的InnoDB和MyISAM有什么区别？" class="headerlink" title="Mysql的InnoDB和MyISAM有什么区别？"></a>Mysql的InnoDB和MyISAM有什么区别？</h3><p>InnoDB支持事务和行级锁，MyISAM不支持事务和行级锁，MyISAM最小锁单位是表级。因为MyISAM不支持行级锁，所以在并发处理能力上InnoDB会比MyISAM好。</p><p>Innodb 使用的是聚簇索引、MyISAM 使用的是非聚簇索引</p><p>数据文件构成：MyISAM有三种存储文件分别是扩展名为：.frm（文件存储表定义）、.MYD (MYData数据文件)、.MYI (MYIndex索引文件)。而InnoDB的表只有两个文件 .frm  .idb</p><h3 id="主键使用自增ID还是UUID-能说说原因吗？"><a href="#主键使用自增ID还是UUID-能说说原因吗？" class="headerlink" title="主键使用自增ID还是UUID?能说说原因吗？"></a>主键使用自增ID还是UUID?能说说原因吗？</h3><p>自增ID和UUID作为主键的考虑主要有两方面，一个是<strong>性能</strong>另一个就是<strong>存储的空间</strong>大小，<strong>一般没有特定的业务要求都不推荐使用UUID作为主键</strong>。</p><p>因为使用<strong>UUID作为主键插入并不能保证插入是有序的，有可能会涉及数据的挪动，也有可能触发数据页的分裂</strong>，因为一个数据页的大小就是16KB，这样插入数据的成本就会比较高。</p><p>而<strong>自增ID作为主键的话插入数据都是追加操作，不会有数据的移动以及数据页的分裂</strong>，性能会比较好。</p><p>另一方面就是存储空间，<strong>自增主键一般整形只要4个字节，长整形才占8字节的大小空间</strong>，而使用<strong>UUID作为主键存储空间需要16字节的大小</strong>，会占用更多的磁盘，在二级索引中也会存出一份主键索引，这样多占用消耗的空间就是两倍，性能低，所以不推荐使用。</p><h3 id="数据库三范式"><a href="#数据库三范式" class="headerlink" title="数据库三范式"></a>数据库三范式</h3><ul><li>1NF: 保证列的原子性，每一列都是不可拆隔的最小单位</li><li>2NF: 保证所以非主属性都依赖于主键</li><li>3NF: 非主属性直接不存在传播依赖的关系</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h3><p>索引从<strong>数据结构</strong>进行划分的分为：<strong>B+树索引、hash索引、R-Tree索引、FULLTEXT索引</strong>。</p><p>索引从<strong>物理存储</strong>的角度划分为：<strong>聚族索引</strong>和<strong>非聚族索引</strong>。</p><p>从<strong>逻辑的角度</strong>分为：<strong>主键索引</strong>、<strong>普通索引、唯一索引、联合索引</strong>以及<strong>空间索引</strong>。</p><ul><li><p><strong>聚簇索引</strong>  索引文件和数据文件存放在一起   （.frm  .ibd） frm 存放表结构、ibd 存放索引及数据</p><p><img src="/blog/../%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95.png" alt="preview"></p></li><li><p><strong>非聚簇索引</strong> (索引文件和非索引文件分开存放  .frm  .MYD  .MYI)  frm 存放表结构，MYD 存放数据，MYI 存放索引  MYI B+ 树叶子节点存放数据地址</p></li></ul><p><img src="/blog/2022/01/27/Mysql/%E9%9D%9E%E8%81%9A%E7%B0%87%E7%B4%A2%E5%BC%95.png" alt="preview"></p><h3 id="Mysql-索引底层实现，为什么不用有序数组、hash、二叉树？"><a href="#Mysql-索引底层实现，为什么不用有序数组、hash、二叉树？" class="headerlink" title="Mysql 索引底层实现，为什么不用有序数组、hash、二叉树？"></a>Mysql 索引底层实现，为什么不用有序数组、hash、二叉树？</h3><p>Mysql的索引底层是使用B+树的数据结构进行实现</p><p>索引的一个数据页的大小是16kb，从磁盘加载到内存中是以数据页的大小为单位进行加载，然后供查询操作进行查询，若是查询的数据不在内存中，才会从磁盘中再次加载到内存中。</p><p>索引的实现有很多，比如hash。hash是以key-value的形式进行存储，<strong>适合于等值查询的场景</strong>，查询的时间复杂度为O(1)，因为<strong>hash储存并不是有序的，所以对于范围查询就可能要遍历所有数据进行查询</strong>，而且<strong>不同值的计算还会出现hash冲突</strong>，所以hash并不适合于做Mysql的索引。</p><p>有序数组在等值查询和范围查询性能都是非常好的，那为什么又不用有序数组作为索引呢？因为<strong>对于数组而言作为索引更新的成本太高，新增数据要把后面的数据都往后移一位</strong>，所以也不采用有序数组作为索引的底层实现。</p><p>最后二叉树，主要是因为<strong>二叉树只有二叉，一个节点存储的数据量非常有限，需要频繁的随机IO读写磁盘，若是数据量大的情况下二叉的树高太高</strong>，严重影响性能，所以也不采用二叉树进行实现。</p><p>而B+树是多叉树，一个数据页的大小是16kb，在1-3的树高就能存储10亿级以上的数据，也就是只要访问磁盘1-3次就足够了，并且<strong>B+树的叶子结点上一个叶子结点有指针指向下一个叶子结点，便于范围查询</strong></p><p><img src="/blog/2022/01/27/Mysql/B+%E6%A0%91.png" alt="preview"></p><h3 id="如何查看索引是否生效、什么情况下索引会失效？"><a href="#如何查看索引是否生效、什么情况下索引会失效？" class="headerlink" title="如何查看索引是否生效、什么情况下索引会失效？"></a>如何查看索引是否生效、什么情况下索引会失效？</h3><p>查看索引是否起作用可以使用explain关键字，查询后的语句中的key字段，若是使用了索引，该字段会展示索引的名字。</p><p>失效情况</p><ul><li>where条件查询中使用了or关键字</li><li>条件查询中使用like关键字，并且不符合最左前缀原则   eg: like “%xxx”**</li><li>联合索引查询不符合最左前缀原则</li><li>会导致索引失效，解决的办法就是可以把null改为0或者-1这些特殊的值代替会导致索引失效</li><li>where子句中使用!= ,&lt; &gt;这样的符号</li><li>where条件子句中=的左边使用表达式操作或者函数操作</li></ul><h3 id="什么是回表？回表是怎么产生的呢？"><a href="#什么是回表？回表是怎么产生的呢？" class="headerlink" title="什么是回表？回表是怎么产生的呢？"></a>什么是回表？回表是怎么产生的呢？</h3><p>上面说过InnoDB引擎的<strong>主键索引存储的是行数据，二级索引的叶子结点存储的是索引数据以及对应的主键</strong>，所以回表<strong>就是根据索引进行条件查询，回到主键索引树进行搜索的过程</strong>：</p><p><img src="/blog/2022/01/27/Mysql/%E5%9B%9E%E8%A1%A82.png" alt="img"></p><p>因为查询还要回表一次，再次查询主键索引树，所以实际中应该尽量避免回表的产生。</p><h3 id="怎么解决回表的问题？"><a href="#怎么解决回表的问题？" class="headerlink" title="怎么解决回表的问题？"></a>怎么解决回表的问题？</h3><p>解决回表问题可以建立联合索引进行索引覆盖，如图所示根据name字段查询用户的name和sex属性出现了回表问题：</p><p><img src="/blog/2022/01/27/Mysql/%E5%9B%9E%E8%A1%A8.png" alt="img"></p><p>那么我们可以建立下面这个联合索引来解决：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><pre><code class="hljs text">create table user (<br> id int primary key,<br> name varchar(20),<br> sex varchar(5),<br> index(name, sex)<br>) engine = innodb;<br></code></pre></td></tr></table></figure><p>建立了如上所示的index(name,sex)联合索引，在二级索引的叶子结点的位置就会同时也出现sex字段的值，因为能够获取到要查询的所有字段，因为就不用再回表查询一次。</p><h3 id="什么是最左前缀原则？"><a href="#什么是最左前缀原则？" class="headerlink" title="什么是最左前缀原则？"></a>什么是最左前缀原则？</h3><p><strong>最左前缀原则可以是联合索引的的最左N个字段，也可以是字符串索引的最左的M个字符</strong>。举个例子，假如现在有一个表的原始数据如下所示：</p><p><img src="/blog/2022/01/27/Mysql/%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D.png" alt="img"></p><p>并根据col3 ，col2的顺序建立<strong>联合索引</strong>，此时联合索引树结构如图下所示：</p><p><img src="/blog/2022/01/27/Mysql/%E6%9C%80%E5%B7%A6%E5%8C%B9%E9%85%8D2.png" alt="img"></p><p>叶子结点中首先会根据col3的字符进行排序，若是col3相等，在col3相等的值里面再对col2进行排序，假如我们要查询where col3 like ‘Eri%’，就可以快速的定位查询到Eric。</p><p>若是查询条件为where col3 like ‘%se’，前面的字符不确定，表示任意字符都可以，这样就可以导致全表扫描进行字符的比较，就会使索引失效。</p><h3 id="索引下推"><a href="#索引下推" class="headerlink" title="索引下推"></a>索引下推</h3><p>Mysql5.6之前是没有索引下推这个功能，后面为了提高性能，避免不必要的回表5.6之后就有了索引下推优化的功能。</p><p>假如我们有一个用户表，并且使用用户的name，age两个字段建立联合索引，name在没有索引下推的功能，执行下面的sql，执行的流程如下图所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">select * from tuser where name like &#x27;张%&#x27; and age=10 and ismale=1;<br></code></pre></td></tr></table></figure><p><img src="/blog/2022/01/27/Mysql/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A81.png" alt="img"></p><p>当比较第一个索引字段name like ‘张%’ 就会筛选出四行数据，后面它不会再比较age值是否符合要求，直接获取到主键值，然后在回表查询，回表后再对比age、ismale是否符合条件。</p><p>从上面的数据看来其实name，age两个字段建立的联合索引，两个字段的值会存储在联合索引树中，可以直接对比age字段是否符合查询的条件age=10，那么索引下推就是做了这些事：</p><p><img src="/blog/2022/01/27/Mysql/%E7%B4%A2%E5%BC%95%E4%B8%8B%E6%8E%A82.png" alt="img"></p><p>索引下推会再次根据你的age进行比较，发现有两条记录不符合条件直接过滤掉，符合条件的才会进行回表查询，这样就减少了不必要的回表查询。</p><h2 id="事物"><a href="#事物" class="headerlink" title="事物"></a>事物</h2><h3 id="ACID"><a href="#ACID" class="headerlink" title="ACID"></a><strong>ACID</strong></h3><ul><li><strong>原子性</strong>：是指事务的原子性操作，<strong>对数据的修改要么全部执行成功，要么全部失败，实现事务的原子性</strong>，是基于日志的Redo/Undo机制。</li><li><strong>一致性</strong>：是指<strong>执行事务前后的状态要一致</strong>，可以理解为数据一致性。</li><li><strong>隔离性</strong>：侧重指<strong>事务之间相互隔离，不受影响</strong>，这个与事务设置的隔离级别有密切的关系。</li><li><strong>持久性</strong>：则是指在<strong>一个事务提交后，这个事务的状态会被持久化到数据库中，也就是事务提交，对数据的新增、更新将会持久化到数据库中</strong>。</li></ul><h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p><strong>读未提交-读提交-可重复读-串行化</strong>，<strong>级别越来越高，隔离也就越来越严实，到最后的串行化，当出现读写锁冲突的时候，后面的事务只能等前面的事务完成后才能继续访问</strong>。</p><ul><li><strong>读未提交：读取到别的事务还没有提交的数据，从而产生了脏读</strong>。</li><li><strong>读已提交：读取别的事务已经提交的数据，从而产生不可重复读。</strong></li><li><strong>可重复读：事务开启过程中看到的数据和事务刚开始看到的数据是一样的，从而产生幻读，在Mysql的中通过MVCC多版本控制的一致性视图解决了不可重复读问题以及通过间隙锁解决了幻读问题。</strong></li><li><strong>串行化：对于同一行记录，若是读写锁发生冲突，后面访问的事务只能等前面的事务执行完才能继续访问</strong>。</li></ul><h3 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h3><p>MVCC叫做<strong>多版本控制</strong>，实现MVCC时用到了<strong>一致性视图</strong>，用于支持<strong>读提交</strong>和<strong>可重复读</strong>的实现。</p><p>对于一行数据若是想实现可重复读取或者能够读取数据的另一个事务未提交前的原始值，那么必须对原始数据进行保存或者对更新操作进行保存，这样才能够查询到原始值。</p><p>在Mysql的MVCC中规定<strong>每一行数据都有多个不同的版本，一个事务更新操作完后就生成一个新的版本</strong>，并不是对全部数据的全量备份，因为全量备份的代价太大了：</p><p><img src="/blog/2022/01/27/Mysql/MVCC.png" alt="img"></p><p>如图中所示，假如三个事务更新了同一行数据，那么就会有对应的v1、v2、v3三个数据版本，每一个事务在开始的时候都获得一个唯一的事务id（transaction id），并且是顺序递增的，并且这个事务id最后会赋值给row trx_id，这样就形成了一个唯一的一行数据版本。</p><p>实际上版本1、版本2并非实际物理存在的，而图中的U1和U2实际就是undo log日志（<strong>回滚日志</strong>），这v1和v2版本是根据当前v3和undo log计算出来的。</p><p>InnoDB引擎就是利用每行数据有多个版本的特性，实现了秒级创建“快照”，并不需要花费大量的是时间。</p><h3 id="redo-log-binlog"><a href="#redo-log-binlog" class="headerlink" title="redo log , binlog"></a>redo log , binlog</h3><p>redo log日志也叫做WAL技术（Write- Ahead Logging），他是一种<strong>先写日志，并更新内存，最后再更新磁盘的技术</strong>，为了就是减少sql执行期间的数据库io操作，并且更新磁盘往往是在Mysql比较闲的时候，这样就大大减轻了Mysql的压力。</p><p>redo log是固定大小，是物理日志，属于InnoDB引擎的，并且写redo log是环状写日志的形式：</p><p><img src="/blog/2022/01/27/Mysql/relog.png" alt="img"></p><p>如上图所示：若是四组的redo log文件，一组为1G的大小，那么四组就是4G的大小，其中write pos是<strong>记录当前的位置</strong>，有数据写入当前位置，那么write pos就会边写入边往后移。</p><p>check point记录<strong>擦除的位置</strong>，因为redo log是固定大小，所以当redo log满的时候，也就是write pos追上check point的时候，需要清除redo log的部分数据，清除的数据会被持久化到磁盘中，然后将check point向前移动。</p><p>redo log日志实现了即使在数据库出现异常宕机的时候，重启后之前的记录也不会丢失，这就是crash-safe能力。</p><p>binlog称为<strong>归档日志</strong>，是逻辑上的日志，它属于Mysql的Server层面的日志，记录着sql的原始逻辑，主要有两种模式：<strong>一个是statement格式记录的是原始的sql，而row格式则是记录行内容</strong>。</p><p>redo log和binlog记录的形式、内容不同，这两者日志都能通过自己记录的内容恢复数据。</p><p>之所以这两个日志同时存在，是因为刚开始Mysql自带的引擎MyISAM就没有crash-safe功能的，并且在此之前Mysql还没有InnoDB引擎，Mysql自带的binlog日志只是用来归档日志的，所以InnoDB引擎也就通过自己redo log日志来实现crash-safe功能。</p><h3 id="ACID-MVCC-原理"><a href="#ACID-MVCC-原理" class="headerlink" title="ACID MVCC 原理"></a>ACID MVCC 原理</h3><p>当前读  select…lock in share mode  select…for update  update  insert  delete<br>快照读  select<br>隐藏字段   DB_TRX_ID(最后一次修改该记录的id)     DB_ROW_ID(隐藏主键 Innodb)     DB_ROW_PTR(回滚指针—undolog)<br>ReadView 快照读时产生的读视图  trx_list(事物活跃的Id),up_limit_id(列表中最小的id),low_limit_id(系统尚未分配的下一个id)<br>可见行算法<br>1: if DB_TRX_ID &lt; up_limit_id          已提交                 可见<br>2: if DB_TRX_ID &gt;= low_limit_id     读视图之后生成            不可见<br>3: if DB_TRX_ID in trx_list            未提交                不可见<br>4: if DB_TRX_ID not in trx_list        已提交                 可见<br>RC  每次进行快照读时都会生成ReadView<br>RR  第一次进行快照读时才会生成ReadView(如果过程中涉及到了当前读，会重新生成ReadView)</p><p>原子性   undolog –&gt;<br>隔离性   MVCC        –&gt;          一致性<br>持久性   redolog –&gt;</p><p>redolog 二阶段提交(WAL 机制  write ahead log  预写日志)    mysql binlog    innodb插件  undolog  redolog<br>保证binlog 和 redolog 的最终一致性  先写redolog 再写logbin</p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="建立索引"><a href="#建立索引" class="headerlink" title="建立索引"></a>建立索引</h3><p>定位慢查询<br>show global status like %slow_queries%<br>cat 慢查询日志</p><p>另一方面就是考虑到底是建立哪种索引比较合适，这里以普通索引和唯一索引进行举例说明。</p><p>假如我们的业务场景是读多写少的场景，那么SQL查询请求过来，假如数据已经在内存中，获取到数据后就直接返回，假如数据不在内存的数据页中，就会加载磁盘到内存中再返回，对于这种场景可能对于普通索引和唯一索引的选择性能上并没有明显的区别。</p><p>但是，一般建议选择普通索引，在写多读少的场景下，这两者索引的选择对性能的影响就比较大了，对于普通索引的的写，不管数据是否存在于内存中，都会先写入内存中的一小块叫做chang buffer内存中，然后在通过后台刷盘，一般会选择Mysql比较闲的时候进行刷盘。</p><p>而唯一索引就不同了，因为他要确保索引的唯一性，索引写数据的时候，假如数据不在内存中，要先从磁盘中加载数据到内存中，然后比较是否唯一，所以唯一索引就不能使用chang buffer的优化机制，会频繁的进行随机的磁盘IO。</p><h3 id="分库分表"><a href="#分库分表" class="headerlink" title="分库分表"></a>分库分表</h3><blockquote><p>首先为什么要分表？（1） 如果一个表的每条记录的内容很大，那么就需要更多的IO操作，如果字段值比较大，而使用频率相对比较低，可以将大字段移到另一张表中，当查询不查大字段的时候，这样就减少了I/O操作 （2）如果表的数据量非常非常大，那么查询就变的比较慢；也就是表的数据量影响查询的性能。（3）表中的数据本来就有独立性，例如分别记录各个地区的数据或者不同时期的数据，特别是有些数据常用，而另外一些数据不常用。（4） 分表技术有(水平分割和垂直分割)</p></blockquote><h4 id="垂直分割"><a href="#垂直分割" class="headerlink" title="垂直分割"></a>垂直分割</h4><p>垂直分割是指数据表列的拆分，把一张列比较多的表拆分为多张表。垂直分割一般用于拆分大字段和访问频率低的字段，分离冷热数据。</p><p>垂直分割比较常见：例如博客系统中的文章表，比如文章tbl_articles (id, titile, summary, content, user_id, create_time)，因为文章中的内容content会比较长，放在tbl_articles中会严重影响表的查询速度，所以将内容放到tbl_articles_detail(article_id, content)，像文章列表只需要查询tbl_articles中的字段即可。</p><p>垂直拆分的优点：可以使得行数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。</p><p>垂直拆分的缺点：主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行Join来解决。此外，垂直分区会让事务变得更加复杂。</p><h4 id="水平分割"><a href="#水平分割" class="headerlink" title="水平分割"></a>水平分割</h4><p>水平拆分是指数据表行数据的拆分，表的行数超过500万行或者单表容量超过10GB时，查询就会变慢，这时可以把一张的表的数据拆成多张表来存放。水平分表尽可能使每张表的数据量相当，比较均匀。</p><p>水平拆分会给应用增加复杂度，它通常在查询时需要多个表名，查询所有数据需要union操作。在许多数据库应用中，这种复杂性会超过它带来的优点。</p><p>因为只要索引关键字不大，则在索引用于查询时，表中增加2-3倍数据量，查询时也就增加读一个索引层的磁盘次数，所以水平拆分要考虑数据量的增长速度，根据实际情况决定是否需要对表进行水平拆分。</p><p>水平分割最重要的是找到分割的标准，不同的表应根据业务找出不同的标准</p><ol><li>用户表可以根据用户的手机号段进行分割如user183、user150、user153、user189等，每个号段就是一张表。</li><li>用户表也可以根据用户的id进行分割，加入分3张表user0,user1,user2，如果用户的id%3=0就查询user0表，如果用户的id%3=1就查询user1表。</li><li>对于订单表可以按照订单的时间进行分表。</li></ol><h3 id="Explain"><a href="#Explain" class="headerlink" title="Explain"></a>Explain</h3><p>explain 查看执行计划(type,key,possible keys,extra)<br>type:查询使用了何种类型(system,const(唯一索引匹配一个) ,eq_ref(外键匹配一个),ref(匹配多个),range(范围查询),index(全索引扫描),all(全表扫描))<br>extra:(using where,using index,usingFileSort,usingTemporary)</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mysql、数据库</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Redis</title>
    <link href="/blog/2022/01/27/redis/"/>
    <url>/blog/2022/01/27/redis/</url>
    
    <content type="html"><![CDATA[<h2 id="redis-基本类型，使用场景"><a href="#redis-基本类型，使用场景" class="headerlink" title="redis 基本类型，使用场景"></a>redis 基本类型，使用场景</h2><ul><li>string      计数器，共享session</li><li>hash         存放对象</li><li>list        消息队列，下拉分页</li><li>set       共同好友，想认识的人</li><li>zset         热搜排行</li><li>geospatial   地理位置</li><li>hyperLogLog  基数记数</li><li>bitmap      日活，月活，签到</li></ul><h2 id="redis-底层数据结构"><a href="#redis-底层数据结构" class="headerlink" title="redis 底层数据结构"></a>redis 底层数据结构</h2><p><img src="/blog/2022/01/27/redis/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" alt="image-20220415135932130"></p><h2 id="缓存过期策略"><a href="#缓存过期策略" class="headerlink" title="缓存过期策略"></a>缓存过期策略</h2><ul><li><p><strong>noeviction</strong>:返回错误当内存限制达到并且客户端尝试执行会让更多内存被使用的命令（大部分的写入指令，但DEL和几个例外）</p></li><li><p><strong>allkeys-lru</strong>: 尝试回收最少使用的键（LRU），使得新添加的数据有空间存放。</p></li><li><p><strong>volatile-lru</strong>: 尝试回收最少使用的键（LRU），但仅限于在过期集合的键,使得新添加的数据有空间存放。</p></li><li><p><strong>allkeys-random</strong>: 回收随机的键使得新添加的数据有空间存放。</p></li><li><p><strong>volatile-random</strong>: 回收随机的键使得新添加的数据有空间存放，但仅限于在过期集合的键。</p></li><li><p><strong>volatile-ttl</strong>: 回收在过期集合的键，并且优先回收存活时间（TTL）较短的键,使得新添加的数据有空间存放。</p><p>如果没有键满足回收的前提条件的话，策略<strong>volatile-lru</strong>, <strong>volatile-random</strong>以及<strong>volatile-ttl</strong>就和noeviction 差不多了。</p></li></ul><h2 id="redis-持久化方式"><a href="#redis-持久化方式" class="headerlink" title="redis 持久化方式"></a>redis 持久化方式</h2><p>RDB  周期性把内存中的数据集已快照的方式写入磁盘    恢复速度快         保持快照之前宕机，数据会丢失<br>AOF   已追加的方式将操作写入日志                恢复速度慢    执行一条命令，写一条命名，数据不会丢失</p><p>RDB做镜像全量持久化，AOF做增量持久化。因为RDB会耗费较长时间，不够实时，在停机的时候会导致大量丢失数据，所以需要AOF来配合使用。在redis实例重启时，会使用RDB持久化文件重新构建内存，再使用AOF重放近期的操作指令来实现完整恢复重启之前的状态。</p><p><strong>RDB 原理</strong></p><p>fork和cow。fork是指redis通过创建子进程来进行RDB操作，cow指的是<strong>copy on write</strong>，子进程创建后，父子进程共享数据段，父进程继续提供读写服务，写脏的页面数据会逐渐和子进程分离开来。</p><h3 id="Redis的同步机制了解么？"><a href="#Redis的同步机制了解么？" class="headerlink" title="Redis的同步机制了解么？"></a>Redis的同步机制了解么？</h3><p>Redis可以使用主从同步，从从同步。第一次同步时，主节点做一次<strong>bgsave</strong>，并同时将后续修改操作记录到内存buffer，待完成后将RDB文件全量同步到复制节点，复制节点接受完成后将RDB镜像加载到内存。加载完成后，再通知主节点将期间修改的操作记录同步到复制节点进行重放就完成了同步过程。后续的增量数据通过AOF日志同步即可，有点类似数据库的binlog。</p><h3 id="是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？"><a href="#是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？" class="headerlink" title="是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？"></a>是否使用过Redis集群，集群的高可用怎么保证，集群的原理是什么？</h3><p><strong>Redis Sentinal</strong> 着眼于高可用，在master宕机时会自动将slave提升为master，继续提供服务。</p><p><strong>Redis Cluster</strong> 着眼于扩展性，在单个redis内存不足时，使用Cluster进行分片存储。</p><h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><h2 id="缓存穿透-缓存击穿-缓存雪崩"><a href="#缓存穿透-缓存击穿-缓存雪崩" class="headerlink" title="缓存穿透  缓存击穿  缓存雪崩"></a>缓存穿透  缓存击穿  缓存雪崩</h2><p>缓存穿透: 恶意请求不存在的id     1:在缓存中创建空对象进行标记, 会产生大量无用的空对象    2:使用BloomFilter 进行过滤<br>缓存击穿: 热点数据失效         1:可以使用互斥锁更新   2:随机退避方式  3:针对多个热点 key 同时失效的问题，可以在缓存时使用固定时间加上一个小的随机数，避免大量热点 key 同一时刻失效。<br>缓存雪崩: 宕机              1: 熔断   2: 主从，集群</p><h3 id="如果有大量的key需要设置同一时间过期，一般需要注意什么？"><a href="#如果有大量的key需要设置同一时间过期，一般需要注意什么？" class="headerlink" title="如果有大量的key需要设置同一时间过期，一般需要注意什么？"></a>如果有大量的key需要设置同一时间过期，一般需要注意什么？</h3><p>如果大量的key过期时间设置的过于集中，到过期的那个时间点，<strong>Redis</strong>可能会出现短暂的卡顿现象。严重的话会出现缓存雪崩，我们一般需要在时间上加一个随机值，使得过期时间分散一些。</p><h3 id="那你使用过Redis分布式锁么，它是什么回事？"><a href="#那你使用过Redis分布式锁么，它是什么回事？" class="headerlink" title="那你使用过Redis分布式锁么，它是什么回事？"></a>那你使用过Redis分布式锁么，它是什么回事？</h3><p>先拿<strong>setnx</strong>来争抢锁，抢到之后，再用<strong>expire</strong>给锁加一个过期时间防止锁忘记了释放。</p><p>set指令有非常复杂的参数，这个应该是可以同时把<strong>setnx</strong>和<strong>expire</strong>合成一条指令来用的。</p><h3 id="假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"><a href="#假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？" class="headerlink" title="假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？"></a>假如Redis里面有1亿个key，其中有10w个key是以某个固定的已知的前缀开头的，如何将它们全部找出来？如果这个redis正在给线上的业务提供服务，那使用keys指令会有什么问题？</h3><p>使用<strong>keys</strong>指令可以扫出指定模式的key列表。</p><p>Redis的单线程的。keys指令会导致线程阻塞一段时间，线上服务会停顿，直到指令执行完毕，服务才能恢复。这个时候可以使用<strong>scan</strong>指令，<strong>scan</strong>指令可以无阻塞的提取出指定模式的key列表，但是会有一定的重复概率，在客户端做一次去重就可以了，但是整体所花费的时间会比直接用keys指令长。</p><h3 id="使用过Redis做异步队列么，你是怎么用的？"><a href="#使用过Redis做异步队列么，你是怎么用的？" class="headerlink" title="使用过Redis做异步队列么，你是怎么用的？"></a>使用过Redis做异步队列么，你是怎么用的？</h3><p>一般使用list结构作为队列，<strong>rpush</strong>生产消息，<strong>lpop</strong>消费消息。当lpop没有消息的时候，要适当sleep一会再重试。</p><p>list还有个指令叫<strong>blpop</strong>，在没有消息的时候，它会阻塞住直到消息到来。</p><p><strong>能不能生产一次消费多次呢？</strong></p><p>使用pub/sub主题订阅者模式，可以实现 1:N 的消息队列。</p><p><strong>如果对方继续追问 pub/sub有什么缺点？</strong></p><p>在消费者下线的情况下，生产的消息会丢失，得使用专业的消息队列如<strong>RocketMQ</strong>等。</p><p><strong>Redis如何实现延时队列？</strong></p><p>使用sortedset，拿时间戳作为score，消息内容作为key调用zadd来生产消息，消费者用<strong>zrangebyscore</strong>指令获取N秒之前的数据轮询进行处理。</p><h3 id="Pipeline有什么好处，为什么要用pipeline？"><a href="#Pipeline有什么好处，为什么要用pipeline？" class="headerlink" title="Pipeline有什么好处，为什么要用pipeline？"></a>Pipeline有什么好处，为什么要用pipeline？</h3><p>可以将多次IO往返的时间缩减为一次，前提是<strong>pipeline</strong>执行的指令之间没有因果相关性。使用<strong>redis-benchmark</strong>进行压测的时候可以发现影响redis的QPS峰值的一个重要因素是<strong>pipeline</strong>批次指令的数目。</p><h1 id="缓存与数据一致性"><a href="#缓存与数据一致性" class="headerlink" title="缓存与数据一致性"></a>缓存与数据一致性</h1><ol><li>想要提高应用的性能，可以引入「缓存」来解决</li><li>引入缓存后，需要考虑缓存和数据库一致性问题，可选的方案有：「更新数据库 + 更新缓存」、「更新数据库 + 删除缓存」</li><li>更新数据库 + 更新缓存方案，在「并发」场景下无法保证缓存和数据一致性，且存在「缓存资源浪费」和「机器性能浪费」的情况发生</li><li>在更新数据库 + 删除缓存的方案中，「先删除缓存，再更新数据库」在「并发」场景下依旧有数据不一致问题，解决方案是「延迟双删」，但这个延迟时间很难评估，所以推荐用「先更新数据库，再删除缓存」的方案</li><li>在「先更新数据库，再删除缓存」方案下，为了保证两步都成功执行，需配合「消息队列」或「订阅变更日志」的方案来做，本质是通过「重试」的方式保证数据一致性</li><li>在「先更新数据库，再删除缓存」方案下，「读写分离 + 主从库延迟」也会导致缓存和数据库不一致，缓解此问题的方案是「延迟双删」，凭借经验发送「延迟消息」到队列中，延迟删除缓存，同时也要控制主从库延迟，尽可能降低不一致发生的概率</li></ol><p>参考：<a href="https://mp.weixin.qq.com/s?__biz=MzAwNDA2OTM1Ng==&amp;mid=2453153488&amp;idx=2&amp;sn=50d72c945bb3132eef89fde2fb62d982&amp;scene=21#wechat_redirect">https://mp.weixin.qq.com/s?__biz=MzAwNDA2OTM1Ng==&amp;mid=2453153488&amp;idx=2&amp;sn=50d72c945bb3132eef89fde2fb62d982&amp;scene=21#wechat_redirect</a></p><p>Redis 数据结构 </p><p>Redis 持久化机制</p><p>Redis 的一致性哈希算法 </p><p>Redis五种数据类型，当散列类型的 value 值非常大的时候怎么进行压缩， 用 redis 怎么实现摇一摇与附近的人功能</p><p>Redis 主从复制过程</p><p>Redis 如何解决 key 冲突 </p><p>Redis 的五种数据结构 </p><p>Redis 是怎么存储数据的 </p><p>Redis 使用场景</p>]]></content>
    
    
    <categories>
      
      <category>Redis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Redis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JVM</title>
    <link href="/blog/2022/01/27/Jvm/"/>
    <url>/blog/2022/01/27/Jvm/</url>
    
    <content type="html"><![CDATA[<h3 id="1-JVM-JRE-JDK的区别"><a href="#1-JVM-JRE-JDK的区别" class="headerlink" title="1 JVM JRE JDK的区别"></a>1 JVM JRE JDK的区别</h3><p><img src="/blog/2022/01/27/Jvm/jre.png" alt="img"></p><h3 id="2-内存结构（运行时数据区）"><a href="#2-内存结构（运行时数据区）" class="headerlink" title="2 内存结构（运行时数据区）"></a>2 内存结构（运行时数据区）</h3><p><img src="/blog/2022/01/27/Jvm/memory.png" alt="image-20220307165912478"></p><p><code>jvm</code> 的运行时数据区由<strong>程序计数器</strong>，<strong>虚拟机栈</strong>，<strong>本地方法栈</strong>，<strong>方法区</strong>几部分组成</p><ul><li>程序计数器：记录了下一条虚拟机指令的位置</li><li>虚拟机栈：由一个一个栈帧组成，栈帧中包含了局部变量表，操作数栈，方法出口，动态链接等信息</li><li>本地方法栈：虚拟机栈类似，不过本地方法栈用于<code>Native</code> 本地方法</li><li>方法区：用于存放类相关信息，常量，静态变量等</li><li>堆 ：用于存放对象实例</li></ul><p>程序计数器，虚拟机栈，本地方法栈是线程私有的</p><p>方法区，堆是线程共享的</p><p><strong>方法区</strong></p><p><img src="/blog/2022/01/27/Jvm/method.png" alt="image-20220307170009776"></p><h3 id="3-直接内存"><a href="#3-直接内存" class="headerlink" title="3 直接内存"></a>3 直接内存</h3><ul><li>属于操作系统，常见于NIO操作时，<strong>用于数据缓冲区</strong></li><li>分配回收成本较高，但读写性能高</li><li>不受JVM内存回收管理</li></ul><p><strong>回收内存</strong></p><p>使用了 Unsafe 对象完成直接内存的分配回收，并且回收需要主动调用 freeMemory 方法 </p><p>ByteBuffer 的实现类内部，使用了 Cleaner （虚引用）来监测 ByteBuffer 对象</p><p>一旦 ByteBuffer 对象被垃圾回收，那么就会由 ReferenceHandler 线程通过 Cleaner 的 clean 方法调 用 freeMemory 来释放直接内存</p><h3 id="4-垃圾回收"><a href="#4-垃圾回收" class="headerlink" title="4 垃圾回收"></a>4 垃圾回收</h3><h4 id="4-1-如何判断对象可以回收"><a href="#4-1-如何判断对象可以回收" class="headerlink" title="4.1 如何判断对象可以回收"></a>4.1 如何判断对象可以回收</h4><p><strong>引用计数法</strong></p><p>弊端：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放</p><p><img src="/blog/2022/01/27/Jvm/reference.png" alt="image-20220308102652818"></p><p><strong>可达性分析算法</strong></p><ul><li>JVM中的垃圾回收器通过<strong>可达性分析</strong>来探索所有存活的对象</li><li>扫描堆中的对象，看能否沿着GC Root对象为起点的引用链找到该对象，如果<strong>找不到，则表示可以回收</strong></li><li>可以作为GC Root的对象<ul><li>虚拟机栈（栈帧中的本地变量表）中引用的对象。　</li><li>方法区中类静态属性引用的对象</li><li>方法区中常量引用的对象</li><li>本地方法栈中JNI（即一般说的Native方法）引用的对象</li></ul></li></ul><h4 id="4-2-五种引用"><a href="#4-2-五种引用" class="headerlink" title="4.2 五种引用"></a>4.2 五种引用</h4><p><img src="/blog/2022/01/27/Jvm/reference2.png" alt="image-20220308102810499"></p><p>只有GC Root<strong>都不引用</strong>该对象时，才会回收<strong>强引用</strong>对象</p><ul><li>如上图B、C对象都不引用A1对象时，A1对象才会被回收</li></ul><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><p>当GC Root指向软引用对象时，在<strong>内存不足时</strong>，会<strong>回收软引用所引用的对象</strong></p><ul><li>如上图如果B对象不再引用A2对象且内存不足时，软引用所引用的A2对象就会被回收</li></ul><p><strong>软引用的使用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> _4M = <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> SoftReference&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[_4M]);<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p>如果在垃圾回收时发现内存不足，在回收软引用所指向的对象时，<strong>软引用本身不会被清理</strong></p><p>如果想要<strong>清理软引用</strong>，需要使<strong>用引用队列</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo1</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> _4M = <span class="hljs-number">4</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>;<br><span class="hljs-comment">//使用引用队列，用于移除引用为空的软引用对象</span><br>ReferenceQueue&lt;<span class="hljs-keyword">byte</span>[]&gt; queue = <span class="hljs-keyword">new</span> ReferenceQueue&lt;&gt;();<br><span class="hljs-comment">//使用软引用对象 list和SoftReference是强引用，而SoftReference和byte数组则是软引用</span><br>List&lt;SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt;&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>SoftReference&lt;<span class="hljs-keyword">byte</span>[]&gt; ref= <span class="hljs-keyword">new</span> SoftReference&lt;&gt;(<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[_4M]);<br><br><span class="hljs-comment">//遍历引用队列，如果有元素，则移除</span><br>Reference&lt;? extends <span class="hljs-keyword">byte</span>[]&gt; poll = queue.poll();<br><span class="hljs-keyword">while</span>(poll != <span class="hljs-keyword">null</span>) &#123;<br><span class="hljs-comment">//引用队列不为空，则从集合中移除该元素</span><br>list.remove(poll);<br><span class="hljs-comment">//移动到引用队列中的下一个元素</span><br>poll = queue.poll();<br>&#125;<br>&#125;<br>&#125;Copy<br></code></pre></td></tr></table></figure><p><strong>大概思路为：</strong>查看引用队列中有无软引用，如果有，则将该软引用从存放它的集合中移除（这里为一个list集合）</p><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><p>只有弱引用引用该对象时，在垃圾回收时，<strong>无论内存是否充足</strong>，都会回收弱引用所引用的对象</p><ul><li>如上图如果B对象不再引用A3对象，则A3对象会被回收</li></ul><p><strong>弱引用的使用和软引用类似</strong>，只是将 <strong>SoftReference 换为了 WeakReference</strong></p><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a><strong>虚引用</strong></h5><p>当虚引用对象所引用的对象被回收以后，虚引用对象就会被放入引用队列中，调用虚引用的方法</p><ul><li>虚引用的一个体现是<strong>释放直接内存所分配的内存</strong>，当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存</li><li>如上图，B对象不再引用ByteBuffer对象，ByteBuffer就会被回收。但是直接内存中的内存还未被回收。这时需要将虚引用对象Cleaner放入引用队列中，然后调用它的clean方法来释放直接内存</li></ul><h5 id="终结器引用"><a href="#终结器引用" class="headerlink" title="终结器引用"></a>终结器引用</h5><p>所有的类都继承自Object类，Object类有一个finalize方法。当某个对象不再被其他的对象所引用时，会先将终结器引用对象放入引用队列中，然后根据终结器引用对象找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以被垃圾回收了</p><ul><li>如上图，B对象不再引用A4对象。这是终结器对象就会被放入引用队列中，引用队列会根据它，找到它所引用的对象。然后调用被引用对象的finalize方法。调用以后，该对象就可以被垃圾回收了</li></ul><h5 id="引用队列"><a href="#引用队列" class="headerlink" title="引用队列"></a>引用队列</h5><ul><li>软引用和弱引用<strong>可以配合</strong>引用队列<ul><li>在<strong>弱引用</strong>和<strong>虚引用</strong>所引用的对象被回收以后，会将这些引用放入引用队列中，方便一起回收这些软/弱引用对象</li></ul></li><li>虚引用和终结器引用<strong>必须配合</strong>引用队列<ul><li>虚引用和终结器引用在使用时会关联一个引用队列</li></ul></li></ul><h3 id="5-垃圾回收算法"><a href="#5-垃圾回收算法" class="headerlink" title="5 垃圾回收算法"></a>5 垃圾回收算法</h3><h4 id="5-1-标记清除算法"><a href="#5-1-标记清除算法" class="headerlink" title="5.1 标记清除算法"></a>5.1 标记清除算法</h4><p><img src="/blog/2022/01/27/Jvm/mark-clean.png" alt="image-20220308103039362"></p><p>标记要被回收的对象，清除，会产生内存碎片</p><h4 id="5-2-标记整理算法"><a href="#5-2-标记整理算法" class="headerlink" title="5.2 标记整理算法"></a>5.2 标记整理算法</h4><p><img src="/blog/2022/01/27/Jvm/mark-sort.png" alt="image-20220308103119774"></p><p>将存活的对象向一端移动，然后清除掉端边界以外的内容</p><h4 id="5-3-复制算法"><a href="#5-3-复制算法" class="headerlink" title="5.3 复制算法"></a>5.3 复制算法</h4><p><img src="/blog/.copy.png" alt="image-20220308103706534"></p><p>标记存活对象，将对象复制到另一块区域中区</p><h4 id="5-4-分代回收"><a href="#5-4-分代回收" class="headerlink" title="5.4 分代回收"></a>5.4 分代回收</h4><p><img src="/blog/2022/01/27/Jvm/divide.png" alt="image-20220308103157273"></p><ul><li>对象首先分配在伊甸园区域新生代空间不足时，触发 <code>minor gc</code></li><li>伊甸园和<code>from</code>存活的对象使用 <code>copy</code> 复制到<code>to</code>中，存活的对象年龄加1并且交换 <code>from</code> <code>to</code> </li><li><code>minor gc</code> 会引发 <code>stop the world</code>，暂停其它用户的线程，等垃圾回收结束，用户线程才恢复运行 </li><li>当对象寿命超过阈值时，会晋升至老年代，最大寿命是15（4bit） </li><li>当老年代空间不足，会先尝试触发 <code>minor gc</code>，如果之后空间仍不足，那么触发 <code>full gc</code>，<code>STW</code>的时间更长</li></ul><table><thead><tr><th>含义</th><th>参数</th></tr></thead><tbody><tr><td>堆初始大小</td><td>-Xms</td></tr><tr><td>堆最大大小</td><td>-Xmx 或 -XX:MaxHeapSize=size</td></tr><tr><td>新生代大小</td><td>-Xmn 或 (-XX:NewSize=size + -XX:MaxNewSize=size )</td></tr><tr><td>幸存区比例(动态)</td><td>-XX:InitialSurvivorRatio=ratio 和 -XX:+UseAdaptiveSizePolicy</td></tr><tr><td>幸存区比例</td><td>-XX:SurvivorRatio=ratio</td></tr><tr><td>晋升阈值</td><td>-XX:MaxTenuringThreshold=threshold</td></tr><tr><td>晋升详情</td><td>XX:+PrintTenuringDistribution</td></tr><tr><td>GC详情</td><td>-XX:+PrintGCDetails -verbose:gc</td></tr><tr><td>FullGC 前 MinorGC</td><td>-XX:+ScavengeBeforeFullGC</td></tr></tbody></table><h3 id="6-垃圾回收器"><a href="#6-垃圾回收器" class="headerlink" title="6 垃圾回收器"></a>6 垃圾回收器</h3><h4 id="6-1-串行"><a href="#6-1-串行" class="headerlink" title="6.1 串行"></a>6.1 串行</h4><p><strong>Serial + SerialOld</strong></p><p>Serial 工作在新生代，使用复制算法</p><p>SerialOld 工作在老年代，使用标记整理算法</p><p><code>-XX:+UseSerialGC = Serial + SerialOld</code></p><p><img src="/blog/2022/01/27/Jvm/serial.png" alt="image-20220308104204084"></p><h4 id="6-2-吞吐量优先"><a href="#6-2-吞吐量优先" class="headerlink" title="6.2 吞吐量优先"></a>6.2 吞吐量优先</h4><p><strong>Parallel + ParallelOld</strong></p><p>Parallel 工作在新生代，使用复制算法</p><p>ParallelOld 工作在老年代，使用标记整理算法</p><p><code>-XX:+UseParallelGC</code>~`-XX:+UseParallelOldGC` </p><p><code>-XX:+UseAdaptiveSizePolicy</code>  自适应地调整新生代比例</p><p><code>-XX:GCTimeRatio=ratio</code>  GC时间占比（默认99   1%）</p><p><code>-XX:MaxGCPauseMillis=ms</code> 最大暂停ms（默认200ms）</p><p><code>-XX:ParallelGCThreads=n</code> 多少个回收线程</p><p><img src="/blog/2022/01/27/Jvm/parallel.png" alt="image-20220308104715067"></p><h4 id="6-3-响应时间优先"><a href="#6-3-响应时间优先" class="headerlink" title="6.3 响应时间优先"></a>6.3 响应时间优先</h4><p><strong>ParallelNew + CMS</strong></p><p>ParallelNew  工作在新生代</p><p>CMS 工作在老年代</p><p><code>-XX:+UseConcMarkSweepGC ~ -XX:+UseParNewGC ~ SerialOld</code> </p><p><code>-XX:ParallelGCThreads=n ~ -XX:ConcGCThreads=threads</code>  并发线程数，建议为总线程数的1/4</p><p><code>-XX:CMSInitiatingOccupancyFraction=percent</code> 垃圾回收时机的内存占比</p><p><code>-XX:+CMSScavengeBeforeRemark</code> 重新标记直接执行新生代垃圾回收</p><p><img src="/blog/2022/01/27/Jvm/CMS.png" alt="image-20220308110912272"></p><p><code>Cms</code>工作在老年带，采用标记清除算法，分为初始标记，并发标记，重新标记，并发清理几个过程</p><ol><li>初始标记阶段会标记那些存活的<code>GcRoot</code>，会造成<code>STW</code></li><li>并发标记阶段从<code>GcRoot</code> 出发标记剩下存活对象，与用户线程并发运行，不会造成<code>STW</code></li><li>重新标记阶段 消除并发标记阶段新产生垃圾等影响，会造成<code>STW</code></li><li>并发清理阶段与用户线程并发运行，不会造成<code>STW</code></li></ol><h4 id="6-4-G1"><a href="#6-4-G1" class="headerlink" title="6.4 G1"></a>6.4 G1</h4><p><strong>适用场景</strong></p><ul><li>同时注重吞吐量(<code>Throughput</code>)和低延迟(<code>Low latency</code>)，默认的暂停目标是 200 ms</li><li>超大堆内存，会将堆划分为多个大小相等的 <code>Region</code></li><li> 整体上是 标记+整理算法，两个区域之间是复制算法</li></ul><p><strong>相关 JVM 参数</strong></p><p><code>-XX:+UseG1GC</code> </p><p><code>-XX:G1HeapRegionSize=size</code> </p><p><code>-XX:MaxGCPauseMillis=time</code></p><p><strong>垃圾回收阶段</strong></p><p><img src="/blog/2022/01/27/Jvm/garbage.png" alt="image-20220308132241999"></p><p><strong>1）Young Collection</strong></p><p><code>Young Collection</code> 阶段  当<code>Eden Region</code> 内存空间不足时，把<code>Eden Region</code> ，<code>Survival Region</code><br>存活对象复制到 Survival Region，存活年龄 +1，<code>Survival Region</code> 中存活年龄达到阈值的复制到<code>Old Region</code>中，会<code>STW</code></p><p><img src="/blog/2022/01/27/Jvm/young.png" alt="image-20220308132548389"></p><p><strong>2）Young Collection + Concurrent Mark</strong></p><p><code>Young Collection</code> + <code>Concurrent Mark</code> 阶段  当老年代占用达到这个堆当一定比例时</p><p>(-<code>XX:InitiatingHeapOccupancyPercent=percent</code>默认45%)，在进行<code>Young Collection</code>时进行并发标记，不会<code>STW</code></p><p><img src="/blog/2022/01/27/Jvm/G12.png" alt="image-20220308133414219"></p><p><strong>3）Mixed Collection</strong>  </p><p>当并发标记完成后进行混合收集，新生带执行<code>Young Collection</code> 老年代挑选一些回收价值高的<code>Region</code> 进行回收，会造成<code>STW</code></p><p><img src="/blog/2022/01/27/Jvm/mix.png" alt="image-20220308133719490"></p><h3 id="7-类加载机制"><a href="#7-类加载机制" class="headerlink" title="7 类加载机制"></a>7 类加载机制</h3><h4 id="7-1-阶段"><a href="#7-1-阶段" class="headerlink" title="7.1 阶段"></a>7.1 阶段</h4><p>加载、链接（验证，准备，解析）、初始化</p><ul><li>加载：将字节码文件加载到方法区</li><li>验证：验证类是否符合Jvm规范</li><li>准备：为静态变量分配内存空间并赋默认值</li><li>解析：符号引用解析为直接引用</li><li>初始化：初始化静态变量</li></ul><h4 id="7-2-类加载器"><a href="#7-2-类加载器" class="headerlink" title="7.2 类加载器"></a>7.2 类加载器</h4><ul><li>启动类加载器：加载 %JAVA_HOME%/lib 下的类</li><li>扩展类加载器：加载 %JAVA_HOME%/jre/lib/ext 下的类</li><li>系统类加载器：加载 %ClassPath% 下的类</li><li>用户类加载器：加载用户自定义的类</li></ul><p><strong>双亲委派机制</strong></p><p>类加载器加载类时，会先委派父类加载器加载类，只有当父类加载无法完成加载时，才轮到子类加载器加载</p><p><strong>作用</strong></p><ul><li>保护Java核心类api，更加安全   </li><li>避免重复加载</li></ul><h3 id="8-jvm-调优"><a href="#8-jvm-调优" class="headerlink" title="8 jvm 调优"></a>8 jvm 调优</h3><h4 id="8-1-调优工具"><a href="#8-1-调优工具" class="headerlink" title="8.1  调优工具"></a>8.1  调优工具</h4><ul><li>jStack：检测线程</li><li>jMap：检测堆</li><li>jConsole：对堆，线程，对象进行监控</li><li>jvisualvm：可视化监控</li></ul><h4 id="8-2-调优参数"><a href="#8-2-调优参数" class="headerlink" title="8.2 调优参数"></a>8.2 调优参数</h4><ul><li><p>-Xms：初始堆大小，JVM 启动的时候，给定堆空间大小。</p></li><li><p>-Xmx：最大堆大小，JVM 运行过程中，如果初始堆空间不足的时候，最大可以扩展到多少。</p></li><li><p>-Xmn：设置堆中年轻代大小。整个堆大小=年轻代大小+年老代大小+持久代大小。</p></li><li><p>-XX:NewSize=n 设置年轻代初始化大小大小</p></li><li><p>-XX:MaxNewSize=n 设置年轻代最大值</p></li><li><p>-XX:NewRatio=n 设置年轻代和年老代的比值。如: -XX:NewRatio=3，表示年轻代与年老代比值为 1：3，年轻代占整个年轻代+年老代和的 1/4</p></li><li><p>-XX:SurvivorRatio=n 年轻代中 Eden 区与两个 Survivor 区的比值。注意 Survivor 区有两个。8表示两个Survivor :eden=2:8 ,即一个Survivor占年轻代的1/10，默认就为8</p></li><li><p>-Xss：设置每个线程的堆栈大小。JDK5后每个线程 Java 栈大小为 1M，以前每个线程堆栈大小为 256K。</p></li><li><p>-XX:ThreadStackSize=n 线程堆栈大小</p></li><li><p>-XX:PermSize=n 设置持久代初始值</p></li><li><p>-XX:MaxPermSize=n 设置持久代大小</p></li><li><p>-XX:MaxTenuringThreshold=n 设置年轻带垃圾对象最大年龄。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JVM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>操作系统</title>
    <link href="/blog/2022/01/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/blog/2022/01/27/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>根据进程访问资源的特点，我们可以把进程在系统上的运行分为两个级别：</p><ol><li>用户态(user mode) : 用户态运行的进程可以直接读取用户程序的数据。</li><li>系统态(kernel mode):可以简单的理解系统态运行的进程或程序几乎可以访问计算机的任何资源，不受限制。</li></ol><p>说了用户态和系统态之后，那么什么是系统调用呢？</p><p>我们运行的程序基本都是运行在用户态，如果我们调用操作系统提供的系统态级别的子功能咋办呢？那就需要系统调用了！</p><p>也就是说在我们运行的用户程序中，凡是与系统态级别的资源有关的操作（如文件管理、进程控制、内存管理等)，都必须通过系统调用方式向操作系统提出服务请求，并由操作系统代为完成。</p><p>这些系统调用按功能大致可分为如下几类：</p><ul><li>设备管理。完成设备的请求或释放，以及设备启动等功能。</li><li>文件管理。完成文件的读、写、创建及删除等功能。</li><li>进程控制。完成进程的创建、撤销、阻塞及唤醒等功能。</li><li>进程通信。完成进程之间的消息传递或信号传递等功能。</li><li>内存管理。完成内存的分配、回收以及获取作业占用内存区大小及地址等功能。</li></ul><h2 id="进程、线程"><a href="#进程、线程" class="headerlink" title="进程、线程"></a>进程、线程</h2><p>进程是对运行时程序的封装，是系统进行资源调度和分配的基本单位，实现了操作系统的并发</p><p>线程是进程的子任务，是CPU调度和分派的基本单位，实现进程内部的并发</p><p>一个程序至少有一个进程，一个进程至少有一个线程，线程依赖于进程而存在</p><p>进程有独立的内存单元，线程依赖于进程的内存单元</p><h2 id="进程间的通信方式"><a href="#进程间的通信方式" class="headerlink" title="进程间的通信方式"></a>进程间的通信方式</h2><ol><li><strong>管道/匿名管道(Pipes)</strong> ：用于具有亲缘关系的父子进程间或者兄弟进程之间的通信。</li><li><strong>有名管道(Names Pipes)</strong> : 匿名管道由于没有名字，只能用于亲缘关系的进程间通信。为了克服这个缺点，提出了有名管道。有名管道严格遵循**先进先出(first in first out)**。有名管道以磁盘文件的方式存在，可以实现本机任意两个进程通信。</li><li><strong>信号(Signal)</strong> ：信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生；</li><li><strong>消息队列(Message Queuing)</strong> ：消息队列是消息的链表,具有特定的格式,存放在内存中并由消息队列标识符标识。管道和消息队列的通信数据都是先进先出的原则。与管道（无名管道：只存在于内存中的文件；命名管道：存在于实际的磁盘介质或者文件系统）不同的是消息队列存放在内核中，只有在内核重启(即，操作系统重启)或者显式地删除一个消息队列时，该消息队列才会被真正的删除。消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取.比 FIFO 更有优势。<strong>消息队列克服了信号承载信息量少，管道只能承载无格式字 节流以及缓冲区大小受限等缺点。</strong></li><li><strong>信号量(Semaphores)</strong> ：信号量是一个计数器，用于多进程对共享数据的访问，信号量的意图在于进程间同步。这种通信方式主要用于解决与同步相关的问题并避免竞争条件。</li><li><strong>共享内存(Shared memory)</strong> ：使得多个进程可以访问同一块内存空间，不同进程可以及时看到对方进程中对共享内存中数据的更新。这种方式需要依靠某种同步操作，如互斥锁和信号量等。可以说这是最有用的进程间通信方式。</li><li><strong>套接字(Sockets)</strong> : 此方法主要用于在客户端和服务器之间通过网络进行通信。套接字是支持 TCP/IP 的网络通信的基本操作单元，可以看做是不同主机之间的进程进行双向通信的端点，简单的说就是通信的两方的一种约定，用套接字中的相关函数来完成通信过程。</li></ol><h2 id="进程调度算法"><a href="#进程调度算法" class="headerlink" title="进程调度算法"></a>进程调度算法</h2><ul><li><strong>先到先服务(FCFS)调度算法</strong> : 从就绪队列中选择一个最先进入该队列的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>短作业优先(SJF)的调度算法</strong> : 从就绪队列中选出一个估计运行时间最短的进程为之分配资源，使它立即执行并一直执行到完成或发生某事件而被阻塞放弃占用 CPU 时再重新调度。</li><li><strong>时间片轮转调度算法</strong> : 时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法，又称 RR(Round robin)调度。每个进程被分配一个时间段，称作它的时间片，即该进程允许运行的时间。</li><li><strong>多级反馈队列调度算法</strong> ：前面介绍的几种进程调度的算法都有一定的局限性。如<strong>短进程优先的调度算法，仅照顾了短进程而忽略了长进程</strong> 。多级反馈队列调度算法既能使高优先级的作业得到响应又能使短作业（进程）迅速完成。，因而它是目前<strong>被公认的一种较好的进程调度算法</strong>，UNIX 操作系统采取的便是这种调度算法。</li><li><strong>优先级调度</strong> ： 为每个流程分配优先级，首先执行具有最高优先级的进程，依此类推。具有相同优先级的进程以 FCFS 方式执行。可以根据内存要求，时间要求或任何其他资源要求来确定优先级。</li></ul><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="死锁产生的四个条件"><a href="#死锁产生的四个条件" class="headerlink" title="死锁产生的四个条件"></a>死锁产生的四个条件</h3><ul><li><strong>互斥</strong>：资源必须处于非共享模式，即一次只有一个进程可以使用。如果另一进程申请该资源，那么必须等待直到该资源被释放为止。</li><li><strong>占有并等待</strong>：一个进程至少应该占有一个资源，并等待另一资源，而该资源被其他进程所占有。</li><li><strong>非抢占</strong>：资源不能被抢占。只能在持有资源的进程完成任务后，该资源才会被释放。</li><li><strong>循环等待</strong>：有一组等待进程 <code>&#123;P0, P1,..., Pn&#125;</code>， <code>P0</code> 等待的资源被 <code>P1</code> 占有，<code>P1</code> 等待的资源被 <code>P2</code> 占有，……，<code>Pn-1</code> 等待的资源被 <code>Pn</code> 占有，<code>Pn</code> 等待的资源被 <code>P0</code> 占有。</li></ul><h3 id="死锁的预防"><a href="#死锁的预防" class="headerlink" title="死锁的预防"></a>死锁的预防</h3><p>死锁四大必要条件上面都已经列出来了，很显然，只要破坏四个必要条件中的任何一个就能够预防死锁的发生。</p><p>破坏第一个条件 <strong>互斥条件</strong>：使得资源是可以同时访问的，这是种简单的方法，磁盘就可以用这种方法管理，但是我们要知道，有很多资源 <strong>往往是不能同时访问的</strong> ，所以这种做法在大多数的场合是行不通的。</p><p>破坏第三个条件 <strong>非抢占</strong> ：也就是说可以采用 <strong>剥夺式调度算法</strong>，但剥夺式调度方法目前一般仅适用于 <strong>主存资源</strong> 和 <strong>处理器资源</strong> 的分配，并不适用于所以的资源，会导致 <strong>资源利用率下降</strong>。</p><p>所以一般比较实用的 <strong>预防死锁的方法</strong>，是通过考虑破坏第二个条件和第四个条件。</p><p><strong>1、静态分配策略</strong></p><p>静态分配策略可以破坏死锁产生的第二个条件（占有并等待）。所谓静态分配策略，就是指一个进程必须在执行前就申请到它所需要的全部资源，并且知道它所要的资源都得到满足之后才开始执行。进程要么占有所有的资源然后开始执行，要么不占有资源，不会出现占有一些资源等待一些资源的情况。</p><p>静态分配策略逻辑简单，实现也很容易，但这种策略 <strong>严重地降低了资源利用率</strong>，因为在每个进程所占有的资源中，有些资源是在比较靠后的执行时间里采用的，甚至有些资源是在额外的情况下才是用的，这样就可能造成了一个进程占有了一些 <strong>几乎不用的资源而使其他需要该资源的进程产生等待</strong> 的情况。</p><p><strong>2、层次分配策略</strong></p><p>层次分配策略破坏了产生死锁的第四个条件(循环等待)。在层次分配策略下，所有的资源被分成了多个层次，一个进程得到某一次的一个资源后，它只能再申请较高一层的资源；当一个进程要释放某层的一个资源时，必须先释放所占用的较高层的资源，按这种策略，是不可能出现循环等待链的，因为那样的话，就出现了已经申请了较高层的资源，反而去申请了较低层的资源，不符合层次分配策略，证明略。</p><h3 id="死锁的避免"><a href="#死锁的避免" class="headerlink" title="死锁的避免"></a>死锁的避免</h3><p>上面提到的 <strong>破坏</strong> 死锁产生的四个必要条件之一就可以成功 <strong>预防系统发生死锁</strong> ，但是会导致 <strong>低效的进程运行</strong> 和 <strong>资源使用率</strong> 。而死锁的避免相反，它的角度是允许系统中<strong>同时存在四个必要条件</strong> ，只要掌握并发进程中与每个进程有关的资源动态申请情况，做出 <strong>明智和合理的选择</strong> ，仍然可以避免死锁，因为四大条件仅仅是产生死锁的必要条件。</p><p>我们将系统的状态分为 <strong>安全状态</strong> 和 <strong>不安全状态</strong> ，每当在未申请者分配资源前先测试系统状态，若把系统资源分配给申请者会产生死锁，则拒绝分配，否则接受申请，并为它分配资源。</p><blockquote><p>如果操作系统能够保证所有的进程在有限的时间内得到需要的全部资源，则称系统处于安全状态，否则说系统是不安全的。很显然，系统处于安全状态则不会发生死锁，系统若处于不安全状态则可能发生死锁。</p></blockquote><p>那么如何保证系统保持在安全状态呢？通过算法，其中最具有代表性的 <strong>避免死锁算法</strong> 就是 Dijkstra 的银行家算法，银行家算法用一句话表达就是：当一个进程申请使用资源的时候，<strong>银行家算法</strong> 通过先 <strong>试探</strong> 分配给该进程资源，然后通过 <strong>安全性算法</strong> 判断分配后系统是否处于安全状态，若不安全则试探分配作废，让该进程继续等待，若能够进入到安全的状态，则就 <strong>真的分配资源给该进程</strong>。</p><p>银行家算法详情可见：<a href="https://blog.csdn.net/qq_33414271/article/details/80245715">《一句话+一张图说清楚——银行家算法》</a> 。</p><p>操作系统教程树中讲述的银行家算法也比较清晰，可以一看.</p><p>死锁的避免(银行家算法)改善解决了 <strong>资源使用率低的问题</strong> ，但是它要不断地检测每个进程对各类资源的占用和申请情况，以及做 <strong>安全性检查</strong> ，需要花费较多的时间。</p><h3 id="死锁的检测"><a href="#死锁的检测" class="headerlink" title="死锁的检测"></a>死锁的检测</h3><p>对资源的分配加以限制可以 <strong>预防和避免</strong> 死锁的发生，但是都不利于各进程对系统资源的<strong>充分共享</strong>。解决死锁问题的另一条途径是 <strong>死锁检测和解除</strong> (这里突然联想到了乐观锁和悲观锁，感觉死锁的检测和解除就像是 <strong>乐观锁</strong> ，分配资源时不去提前管会不会发生死锁了，等到真的死锁出现了再来解决嘛，而 <strong>死锁的预防和避免</strong> 更像是悲观锁，总是觉得死锁会出现，所以在分配资源的时候就很谨慎)。</p><p>这种方法对资源的分配不加以任何限制，也不采取死锁避免措施，但系统 <strong>定时地运行一个 “死锁检测”</strong> 的程序，判断系统内是否出现死锁，如果检测到系统发生了死锁，再采取措施去解除它。</p><h5 id="进程-资源分配图"><a href="#进程-资源分配图" class="headerlink" title="进程-资源分配图"></a>进程-资源分配图</h5><p>操作系统中的每一刻时刻的<strong>系统状态</strong>都可以用<strong>进程-资源分配图</strong>来表示，进程-资源分配图是描述进程和资源申请及分配关系的一种有向图，可用于<strong>检测系统是否处于死锁状态</strong>。</p><p>用一个方框表示每一个资源类，方框中的黑点表示该资源类中的各个资源，每个键进程用一个圆圈表示，用 <strong>有向边</strong> 来表示<strong>进程申请资源和资源被分配的情况</strong>。</p><p>图中 2-21 是<strong>进程-资源分配图</strong>的一个例子，其中共有三个资源类，每个进程的资源占有和申请情况已清楚地表示在图中。在这个例子中，由于存在 <strong>占有和等待资源的环路</strong> ，导致一组进程永远处于等待资源的状态，发生了 <strong>死锁</strong>。</p><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/%E8%BF%9B%E7%A8%8B-%E8%B5%84%E6%BA%90%E5%88%86%E9%85%8D%E5%9B%BE.jpeg" alt="进程-资源分配图"></p><p>进程-资源分配图中存在环路并不一定是发生了死锁。因为循环等待资源仅仅是死锁发生的必要条件，而不是充分条件。图 2-22 便是一个有环路而无死锁的例子。虽然进程 P1 和进程 P3 分别占用了一个资源 R1 和一个资源 R2，并且因为等待另一个资源 R2 和另一个资源 R1 形成了环路，但进程 P2 和进程 P4 分别占有了一个资源 R1 和一个资源 R2，它们申请的资源得到了满足，在有限的时间里会归还资源，于是进程 P1 或 P3 都能获得另一个所需的资源，环路自动解除，系统也就不存在死锁状态了。</p><h5 id="死锁检测步骤"><a href="#死锁检测步骤" class="headerlink" title="死锁检测步骤"></a>死锁检测步骤</h5><p>知道了死锁检测的原理，我们可以利用下列步骤编写一个 <strong>死锁检测</strong> 程序，检测系统是否产生了死锁。</p><ol><li>如果进程-资源分配图中无环路，则此时系统没有发生死锁</li><li>如果进程-资源分配图中有环路，且每个资源类仅有一个资源，则系统中已经发生了死锁。</li><li>如果进程-资源分配图中有环路，且涉及到的资源类有多个资源，此时系统未必会发生死锁。如果能在进程-资源分配图中找出一个 <strong>既不阻塞又非独立的进程</strong> ，该进程能够在有限的时间内归还占有的资源，也就是把边给消除掉了，重复此过程，直到能在有限的时间内 <strong>消除所有的边</strong> ，则不会发生死锁，否则会发生死锁。(消除边的过程类似于 <strong>拓扑排序</strong>)</li></ol><h3 id="死锁的解除"><a href="#死锁的解除" class="headerlink" title="死锁的解除"></a>死锁的解除</h3><p>当死锁检测程序检测到存在死锁发生时，应设法让其解除，让系统从死锁状态中恢复过来，常用的解除死锁的方法有以下四种：</p><ol><li><strong>立即结束所有进程的执行，重新启动操作系统</strong> ：这种方法简单，但以前所在的工作全部作废，损失很大。</li><li><strong>撤销涉及死锁的所有进程，解除死锁后继续运行</strong> ：这种方法能彻底打破<strong>死锁的循环等待</strong>条件，但将付出很大代价，例如有些进程可能已经计算了很长时间，由于被撤销而使产生的部分结果也被消除了，再重新执行时还要再次进行计算。</li><li><strong>逐个撤销涉及死锁的进程，回收其资源直至死锁解除。</strong></li><li><strong>抢占资源</strong> ：从涉及死锁的一个或几个进程中抢占资源，把夺得的资源再分配给涉及死锁的进程直至死锁解除。</li></ol><h2 id="常见内存管理机制"><a href="#常见内存管理机制" class="headerlink" title="常见内存管理机制"></a>常见内存管理机制</h2><p><strong>块式管理</strong> ： 远古时代的计算机操作系统的内存管理方式。将内存分为几个固定大小的块，每个块中只包含一个进程。如果程序运行需要内存的话，操作系统就分配给它一块，如果程序运行只需要很小的空间的话，分配的这块内存很大一部分几乎被浪费了。这些在每个块中未被利用的空间，我们称之为碎片。</p><p><strong>页式管理</strong> ：把主存分为大小相等且固定的一页一页的形式，页较小，相比于块式管理的划分粒度更小，提高了内存利用率，减少了碎片。页式管理通过页表对应逻辑地址和物理地址。</p><p><strong>段式管理</strong> ： 页式管理虽然提高了内存利用率，但是页式管理其中的页并无任何实际意义。 段式管理把主存分为一段段的，段是有实际意义的，每个段定义了一组逻辑信息，例如,有主程序段 MAIN、子程序段 X、数据段 D 及栈段 S 等。 段式管理通过段表对应逻辑地址和物理地址。</p><p><strong>段页式</strong>： 段页式管理机制结合了段式管理和页式管理的优点。简单来说段页式管理机制就是把主存先分成若干段，每个段又分成若干页，也就是说 <strong>段页式管理机制</strong> 中段与段之间以及段的内部的都是离散的。</p><h2 id="快表、多级页表"><a href="#快表、多级页表" class="headerlink" title="快表、多级页表"></a>快表、多级页表</h2><h3 id="快表"><a href="#快表" class="headerlink" title="快表"></a>快表</h3><p>为了提高虚拟地址到物理地址的转换速度，操作系统在 <strong>页表方案</strong> 基础之上引入了 <strong>快表</strong> 来加速虚拟地址到物理地址的转换。我们可以把快表理解为一种特殊的高速缓冲存储器（Cache），其中的内容是页表的一部分或者全部内容。作为页表的 Cache，它的作用与页表相似，但是提高了访问速率。由于采用页表做地址转换，读写内存数据时 CPU 要访问两次主存。有了快表，有时只要访问一次高速缓冲存储器，一次主存，这样可加速查找并提高指令执行速度。</p><p>使用快表之后的地址转换流程是这样的：</p><ol><li>根据虚拟地址中的页号查快表；</li><li>如果该页在快表中，直接从快表中读取相应的物理地址；</li><li>如果该页不在快表中，就访问内存中的页表，再从页表中得到物理地址，同时将页表中的该映射表项添加到快表中；</li><li>当快表填满后，又要登记新页时，就按照一定的淘汰策略淘汰掉快表中的一个页。</li></ol><p>看完了之后你会发现快表和我们平时经常在我们开发的系统使用的缓存（比如 Redis）很像，的确是这样的，操作系统中的很多思想、很多经典的算法，你都可以在我们日常开发使用的各种工具或者框架中找到它们的影子。</p><h3 id="多级页表"><a href="#多级页表" class="headerlink" title="多级页表"></a>多级页表</h3><p>引入多级页表的主要目的是为了避免把全部页表一直放在内存中占用过多空间，特别是那些根本就不需要的页表就不需要保留在内存中。多级页表属于时间换空间的典型场景。</p><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p><strong>虚拟内存</strong> 使得应用程序认为它拥有连续的可用的内存（一个连续完整的地址空间），而实际上，它通常是被分隔成多个物理内存碎片，还有部分暂时存储在外部磁盘存储器上，在需要时进行数据交换。与没有使用虚拟内存技术的系统相比，使用这种技术的系统使得大型程序的编写变得更容易，对真正的物理内存（例如 RAM）的使用也更有效率。目前，大多数操作系统都使用了虚拟内存，如 Windows 家族的“虚拟内存”；Linux 的“交换空间”等。</p><h2 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h2><p>当发生缺页中断时，如果当前内存中并没有空闲的页面，操作系统就必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。用来选择淘汰哪一页的规则叫做页面置换算法，我们可以把页面置换算法看成是淘汰页面的规则。</p><ul><li><strong>OPT 页面置换算法（最佳页面置换算法）</strong> ：最佳(Optimal, OPT)置换算法所选择的被淘汰页面将是以后永不使用的，或者是在最长时间内不再被访问的页面,这样可以保证获得最低的缺页率。但由于人们目前无法预知进程在内存下的若千页面中哪个是未来最长时间内不再被访问的，因而该算法无法实现。一般作为衡量其他置换算法的方法。</li><li><strong>FIFO（First In First Out） 页面置换算法（先进先出页面置换算法）</strong> : 总是淘汰最先进入内存的页面，即选择在内存中驻留时间最久的页面进行淘汰。</li><li><strong>LRU （Least Recently Used）页面置换算法（最近最久未使用页面置换算法）</strong> ：LRU 算法赋予每个页面一个访问字段，用来记录一个页面自上次被访问以来所经历的时间 T，当须淘汰一个页面时，选择现有页面中其 T 值最大的，即最近最久未使用的页面予以淘汰。</li><li><strong>LFU （Least Frequently Used）页面置换算法（最少使用页面置换算法）</strong> : 该置换算法选择在之前时期使用最少的页面作为淘汰页。</li></ul><h2 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h2><p>局部性原理表现在以下两个方面：</p><ol><li><strong>时间局部性</strong> ：如果程序中的某条指令一旦执行，不久以后该指令可能再次执行；如果某数据被访问过，不久以后该数据可能再次被访问。产生时间局部性的典型原因，是由于在程序中存在着大量的循环操作。</li><li><strong>空间局部性</strong> ：一旦程序访问了某个存储单元，在不久之后，其附近的存储单元也将被访问，即程序在一段时间内所访问的地址，可能集中在一定的范围之内，这是因为指令通常是顺序存放、顺序执行的，数据也一般是以向量、数组、表等形式簇聚存储的。</li></ol>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>操作系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络</title>
    <link href="/blog/2022/01/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/"/>
    <url>/blog/2022/01/27/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h2 id="OSI-七层模型"><a href="#OSI-七层模型" class="headerlink" title="OSI 七层模型"></a>OSI 七层模型</h2><ul><li><p>物理层      利用物理传输介质为数据链路层提供物理连接      电气特性（0-1 的电压表示）、机械特性（引脚）  单位/比特</p></li><li><p>数据链路层     定义通过通信媒介互连的设备之间传输的规范         封装成帧、透明传输、差错校验   MAC地址</p></li><li><p>网络层    寻址和路由      IP地址， ARP，路由选择协议（RIP，OSPF）</p></li><li><p>传输层    为上层协议提供端到端的可靠传输    TCP，UDP协议</p></li><li><p>会话层    建立、断开和维护通信链接</p></li><li><p>表示层    数据格式转换、数据压缩、数据加密</p></li><li><p>应用层    为应用层提供网络服务   HTTP/FTP/DNS</p></li></ul><h2 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h2><ul><li><p>网络接口层（物理层，数据链路层）</p></li><li><p>网际层（网络层）</p></li><li><p>传输层（传输层）</p></li><li><p>应用层（会话层、表示层、应用层）</p></li></ul><h2 id="什么是面向有连接型和面向无连接型？"><a href="#什么是面向有连接型和面向无连接型？" class="headerlink" title="什么是面向有连接型和面向无连接型？"></a>什么是面向有连接型和面向无连接型？</h2><ul><li>面向有连接型传输包括会话建立、传输数据和会话断开，此外还包括保证传输可靠性的各种措施，比如超时重传、流量控制等，常见的面向有连接传输有TCP；</li><li>面向无连接型传输仅提供基本的传输数据的功能，即使接收端不存在，发送端也能发送数据包，常见的面向无连接传输有UDP、IP。</li></ul><h2 id="什么是UDP和TCP？UDP和TCP的区别是什么？"><a href="#什么是UDP和TCP？UDP和TCP的区别是什么？" class="headerlink" title="什么是UDP和TCP？UDP和TCP的区别是什么？"></a>什么是UDP和TCP？UDP和TCP的区别是什么？</h2><ul><li>TCP是面向有连接型，UDP是面向无连接型；</li><li>TCP是一对一传输，UDP支持一对一、一对多、多对一和多对多的交互通信；</li><li>TCP是面向字节流的，即把应用层传来的报文看成字节流，将字节流拆分成大小不等的数据块，并添加TCP首部；UDP是面向报文的，对应用层传下来的报文不拆分也不合并，仅添加UDP首部；</li><li>TCP支持传输可靠性的多种措施，包括保证包的传输顺序、重发机制、流量控制和拥塞控制；UDP仅提供最基本的数据传输能力。</li></ul><h2 id="TCP-协议"><a href="#TCP-协议" class="headerlink" title="TCP 协议"></a>TCP 协议</h2><h3 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h3><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B.png" alt="三次握手"></p><h4 id="为什么tcp需要三次握手，而不是两次？"><a href="#为什么tcp需要三次握手，而不是两次？" class="headerlink" title="为什么tcp需要三次握手，而不是两次？"></a>为什么tcp需要三次握手，而不是两次？</h4><p>如果是两次，客户端如果一段时间没接受到确认，会重新发起连接，如果之前失效的连接到达服务端，<br>服务端就会建立连接，浪费了服务端的资源</p><h4 id="三次握手过程中可以携带数据吗？"><a href="#三次握手过程中可以携带数据吗？" class="headerlink" title="三次握手过程中可以携带数据吗？"></a>三次握手过程中可以携带数据吗？</h4><p>其实第三次握手的时候，可以携带数据，但是第一二次握手不可以携带数据</p><h4 id="半连接队列、全连接队列"><a href="#半连接队列、全连接队列" class="headerlink" title="半连接队列、全连接队列"></a>半连接队列、全连接队列</h4><p>服务器第一次接收到客户端发送过来的SYN报文，就会处于SYN-RCVD状态，此时双方还未完全<br>建立连接，服务器会把此时状态下的请求连接放在一个队列中，把这种队列称为”半连接队列”</p><p>完成”三从握手”，建立的连接就会存放在 全连接队列中，若队列已满，就有可能出现丢包现象</p><h3 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h3><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B.png" alt="在这里插入图片描述"></p><h4 id="为什么挥手需要四次"><a href="#为什么挥手需要四次" class="headerlink" title="为什么挥手需要四次"></a>为什么挥手需要四次</h4><p>因为TCP是全双工通信的<br>（当服务端收到客户端的SYN连接请求报文后，可以直接发送SYN+ACK报文。其中ACK报文是用来应答的，SYN报文是用来同步的。）</p><p>但在关闭连接时，当服务端收到FIN报文时仅代表客户端不会再发送数据报文了，但客户端仍可以接收数据报文，且服务器此时可能还有数据报文需要发送，所以只能先回复一个ACK报文，告诉客户端，“你发的FIN报文我收到了”。这样客户端便不会因为没有收到应答而继续发送断开连接的请求(FIN报文)，当客户端处理完数据报文后，便发送给主动方FIN报文。这样可以保证数据通信正常可靠地完成，因此不能一起发送。故需要四次挥手。</p><h4 id="tcp第四次挥手为什么要等待2MSL"><a href="#tcp第四次挥手为什么要等待2MSL" class="headerlink" title="tcp第四次挥手为什么要等待2MSL"></a>tcp第四次挥手为什么要等待2MSL</h4><p>为了保证客户端最后一次发送的ACK能够到达服务端。等待2MSL，如果ACK丢失，服务端会超时重传。<br>等待2MSL可以保证网络中滞留的报文段全部消失，不会再去干扰服务器</p><h3 id="ARQ协议"><a href="#ARQ协议" class="headerlink" title="ARQ协议"></a>ARQ协议</h3><p>ARQ协议，即自动重传请求（Automatic Repeat-reQuest），意思是如果发送方在发送后一段时间之内没有收到确认回执，它通常会重新发送。ARQ协议包括停止等待ARQ协议和连续ARQ协议。</p><p>（1）停止等待ARQ协议</p><p>停止等待ARQ协议是指，在停止等待中如果接收端没有收到发送端发来的分组，接收端就不会给发送端发送确认回执，此时发送端会重新发送之前的报文分组。发送端会维护一个超时计时器，超时时间会设置的比数据在传输往返过程的时间要长一些。</p><p>（2）连续ARQ协议</p><p>连续ARQ协议是指，发送端维护一个“窗口”，“窗口”内可以有多个分组，窗口的大小就是窗口中分组的个数，凡是位于“窗口”内的分组可以连续发送出去而不必等待接收端返回的确认回执，对按序到达的最后一个分组，接收端会向发送端发送确认回执，如果有分组没有正确到达，会返回最后一个正确达到的分组序号，该序号后面的分组会重新发送给接收端。</p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p>什么是流量控制？流量控制的目的？</p><p>如果发送者发送数据过快，接收者来不及接收，那么就会有分组丢失。为了避免分组丢失，控制发送者的发送速度，使得接收者来得及接收，这就是流量控制。流量控制根本目的是防止分组丢失，它是构成TCP可靠性的一方面。</p><p>如何实现流量控制？</p><p>由滑动窗口协议（连续ARQ协议）实现。滑动窗口协议既保证了分组无差错、有序接收，也实现了流量控制。主要的方式就是接收方返回的 ACK 中会包含自己的接收窗口的大小，并且利用大小来控制发送方的数据发送。</p><h3 id="拥塞控制和流量控制的区别"><a href="#拥塞控制和流量控制的区别" class="headerlink" title="拥塞控制和流量控制的区别"></a>拥塞控制和流量控制的区别</h3><p>拥塞控制：拥塞控制是作用于网络的，它是防止过多的数据注入到网络中，避免出现网络负载过大的情况；常用的方法就是：（ 1 ）慢开始、拥塞避免（ 2 ）快重传、快恢复。</p><p>流量控制：流量控制是作用于接收者的，它是控制发送者的发送速度从而使接收者来得及接收，防止分组丢失的。</p><h3 id="拥塞控制算法"><a href="#拥塞控制算法" class="headerlink" title="拥塞控制算法"></a>拥塞控制算法</h3><h4 id="慢开始算法"><a href="#慢开始算法" class="headerlink" title="慢开始算法"></a>慢开始算法</h4><p>发送方维持一个叫做拥塞窗口cwnd（congestion window）的状态变量。拥塞窗口的大小取决于网络的拥塞程度，并且动态地在变化。发送方让自己的发送窗口等于拥塞窗口，另外考虑到接受方的接收能力，发送窗口可能小于拥塞窗口。</p><p>慢开始算法的思路就是，不要一开始就发送大量的数据，先探测一下网络的拥塞程度，也就是说由小到大逐渐增加拥塞窗口的大小。</p><p>这里用报文段的个数作为拥塞窗口的大小举例说明慢开始算法，实际的拥塞窗口大小是以字节为单位的。如下图：</p><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%85%A2%E5%BC%80%E5%A7%8B.png" alt="img"></p><p>从上图可以看到，一个传输轮次所经历的时间其实就是往返时间RTT，而且没经过一个传输轮次（transmission round），拥塞窗口cwnd就加倍。</p><p>为了防止cwnd增长过大引起网络拥塞，还需设置一个慢开始门限ssthresh状态变量。ssthresh的用法如下：当cwnd&lt;ssthresh时，使用慢开始算法。<br>当cwnd&gt;ssthresh时，改用拥塞避免算法。<br>当cwnd=ssthresh时，慢开始与拥塞避免算法任意</p><p>注意，这里的“慢”并不是指cwnd的增长速率慢，而是指在TCP开始发送报文段时先设置cwnd=1，然后逐渐增大，这当然比按照大的cwnd一下子把许多报文段突然注入到网络中要“慢得多”。</p><h4 id="拥塞避免算法"><a href="#拥塞避免算法" class="headerlink" title="拥塞避免算法"></a>拥塞避免算法</h4><p>拥塞避免算法让拥塞窗口缓慢增长，即每经过一个往返时间RTT就把发送方的拥塞窗口cwnd加1，而不是加倍。这样拥塞窗口按线性规律缓慢增长。</p><p>无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞（其根据就是没有按时收到确认，虽然没有收到确认可能是其他原因的分组丢失，但是因为无法判定，所以都当做拥塞来处理），就把慢开始门限ssthresh设置为出现拥塞时的发送窗口大小的一半（但不能小于2）。然后把拥塞窗口cwnd重新设置为1，执行慢开始算法。这样做的目的就是要迅速减少主机发送到网络中的分组数，使得发生拥塞的路由器有足够时间把队列中积压的分组处理完毕。</p><p>整个拥塞控制的流程如下图：</p><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E6%8B%A5%E5%A1%9E%E9%81%BF%E5%85%8D.png" alt="img"></p><p>（1）拥塞窗口cwnd初始化为1个报文段，慢开始门限初始值为16<br>（2）执行慢开始算法，指数规律增长到第4轮，即cwnd=16=ssthresh，改为执行拥塞避免算法，拥塞窗口按线性规律增长<br>（3）假定cwnd=24时，网络出现超时（拥塞），则更新后的ssthresh=12，cwnd重新设置为1，并执行慢开始算法。当cwnd=12=ssthresh时，改为执行拥塞避免算法</p><p>关于 乘法减小（Multiplicative Decrease）和加法增大（Additive Increase）：</p><p>“乘法减小”指的是无论是在慢开始阶段还是在拥塞避免阶段，只要发送方判断网络出现拥塞，就把慢开始门限ssthresh设置为出现拥塞时的发送窗口大小的一半，并执行慢开始算法，所以当网络频繁出现拥塞时，ssthresh下降的很快，以大大减少注入到网络中的分组数。“加法增大”是指执行拥塞避免算法后，使拥塞窗口缓慢增大，以防止过早出现拥塞。常合起来成为AIMD算法。</p><p>注意：“拥塞避免”并非完全能够避免了阻塞，而是使网络比较不容易出现拥塞。</p><h4 id="快重传算法"><a href="#快重传算法" class="headerlink" title="快重传算法"></a>快重传算法</h4><p>快重传要求接收方在收到一个失序的报文段后就立即发出重复确认（为的是使发送方及早知道有报文段没有到达对方，可提高网络吞吐量约20%）而不要等到自己发送数据时捎带确认。快重传算法规定，发送方只要一连收到三个重复确认就应当立即重传对方尚未收到的报文段，而不必继续等待设置的重传计时器时间到期。如下图：</p><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BF%AB%E9%87%8D%E4%BC%A0.png" alt="img"></p><h4 id="快恢复算法"><a href="#快恢复算法" class="headerlink" title="快恢复算法"></a>快恢复算法</h4><p>快重传配合使用的还有快恢复算法，有以下两个要点：</p><p>当发送方连续收到三个重复确认时，就执行“乘法减小”算法，把ssthresh门限减半（为了预防网络发生拥塞）。但是接下去并不执行慢开始算法<br>考虑到如果网络出现拥塞的话就不会收到好几个重复的确认，所以发送方现在认为网络可能没有出现拥塞。所以此时不执行慢开始算法，而是将cwnd设置为ssthresh减半后的值，然后执行拥塞避免算法，使cwnd缓慢增大。如下图：TCP Reno版本是目前使用最广泛的版本。</p><p><img src="/blog/Users/ckz/Desktop/hexo/source/_posts/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/%E5%BF%AB%E6%81%A2%E5%A4%8D.png" alt="img"></p><h3 id="粘包、半包"><a href="#粘包、半包" class="headerlink" title="粘包、半包"></a>粘包、半包</h3><p>（1）发送方产生粘包</p><p>采用 TCP 协议传输数据的客户端与服务器经常是保持一个长连接的状态（一次连接发一次数据不存在粘包），双方在连接不断开的情况下，可以一直传输数据。但当发送的数据包过于的小时，那么 TCP 协议默认的会启用 Nagle 算法，将这些较小的数据包进行合并发送（缓冲区数据发送是一个堆压的过程）；这个合并过程就是在发送缓冲区中进行的，也就是说数据发送出来它已经是粘包的状态了。</p><p>一句话：要发送的数据小于 TCP 发送缓冲区的大小，TCP 将多次写入缓冲区的数据一次发送出去，将会发生粘包。</p><p>（2）接收方产生粘包</p><p>接收方采用 TCP 协议接收数据时的过程是这样的：数据到接收方，从网络模型的下方传递至传输层，传输层的 TCP 协议处理是将其放置接收缓冲区，然后由应用层来主动获取（C 语言用 recv、read 等函数）；这时会出现一个问题，就是我们在程序中调用的读取数据函数不能及时的把缓冲区中的数据拿出来，而下一个数据又到来并有一部分放入的缓冲区末尾，等我们读取数据时就是一个粘包。（放数据的速度 &gt; 应用层拿数据速度）。</p><p>一句话：接收数据端的应用层没有及时读取接收缓冲区中的数据，将发生粘包。</p><p>有以下两个措施：</p><ul><li>在每个包的末尾加上特殊字符，用以区分连续的两个包；</li><li>在报文首部添加包的长度。</li></ul><h2 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h2><h3 id="http-报文结构"><a href="#http-报文结构" class="headerlink" title="http  报文结构"></a>http  报文结构</h3><p>![image-20220414103012862](/Users/ckz/Desktop/hexo/source/_posts/计算机网络/http 结构.png)</p><h3 id="http-常用方法"><a href="#http-常用方法" class="headerlink" title="http 常用方法"></a>http 常用方法</h3><p>![image-20220414114919418](/Users/ckz/Desktop/hexo/source/_posts/计算机网络/http 常用方法.png)</p><h3 id="http-长连接、短连接"><a href="#http-长连接、短连接" class="headerlink" title="http 长连接、短连接"></a>http 长连接、短连接</h3><p><strong>HTTP长连接</strong></p><ul><li>浏览器向服务器进行一次HTTP会话访问后，并不会直接关闭这个连接，而是会默认保持一段时间，那么下一次浏览器继续访问的时候就会再次利用到这个连接。</li><li>在<code>HTTP/1.1</code>版本中，默认的连接都是长连接，我们可以通过<code>Connection: keep-alive</code>字段进行指定。</li></ul><p><strong>HTTP短连接</strong></p><ul><li>浏览器向服务器每进行一次HTTP操作都要建立一个新的连接。</li><li>在<code>HTTP/1.0</code>版本中默认是短链接</li></ul><p><strong>2. HTTP长连接本质</strong></p><p>HTTP协议本质是OSI七层参考模型中的应用层协议，而网络进行通信的时候都是通过上层协议封装头部后作为下层协议的数据部分进行封装的，而实际中我们经常接触的是TCP/IP协议簇，也就是传输层利用TCP协议和网络层利用IP协议。因此HTTP协议的长连接本质上就是TCP的长连接。</p><h3 id="http和https的区别？"><a href="#http和https的区别？" class="headerlink" title="http和https的区别？"></a>http和https的区别？</h3><p>https可以简单的理解为：https = http + 加密 + 认证 + 完整性保护。</p><p>http协议的缺点:</p><ol><li>通信使用明文，内容可能被窃听。</li><li>通信双方的身份无法得到认证，身份可能遭遇伪装。</li><li>无法验证报文的完整性。</li></ol><p>针对以上问题，https的改进措施:</p><ol><li>加密。https协议通过SSL或者TLS协议将报文内容进行加密，client端进行加密，server端进行解密。</li><li>认证。通过值得信赖的第三方机构颁布证书，即可确认通信双方的身份。客户端持有证书即可完成客户端身份的确认，客户端通信前会查看服务端的证书。</li><li>完整性保护。可以通过MD5等散列码进行通信内容的校验。</li></ol><h3 id="https-实现原理？"><a href="#https-实现原理？" class="headerlink" title="https 实现原理？"></a>https 实现原理？</h3><p><a href="https://juejin.cn/post/6844903830916694030">https://juejin.cn/post/6844903830916694030</a></p><h3 id="为什么说http协议是无状态协议？怎么解决Http协议无状态协议"><a href="#为什么说http协议是无状态协议？怎么解决Http协议无状态协议" class="headerlink" title="为什么说http协议是无状态协议？怎么解决Http协议无状态协议?"></a>为什么说http协议是无状态协议？怎么解决Http协议无状态协议?</h3><p>http协议是一种无状态协议，协议自身不对请求和响应之间的通信状态进行保存，即对发送过来的请求和响应都不做持久化处理，把http协议设计的如此简单是为了更快地处理大量事务。</p><p>为了解决http协议不能保存通信状态的问题，引入了Cookie状态管理。Cookie技术通过在请求和响应报文中写入Cookie信息来控制客户端的状态。Cookie会根据从服务端发送的响应报文的一个叫Set-Cookie的首部字段，通知客户端保存Cookie。当下次客户端再往该服务端发送请求时，客户端会自动在请求报文中加入Cookie值发送出去，服务端发现客户端发来的Cookie后，会检查是哪一个客户端发来的连接请求，对比服务器上的记录，最后得到之前的状态信息。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java并发</title>
    <link href="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <url>/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="1-创建线程的几种方式"><a href="#1-创建线程的几种方式" class="headerlink" title="1  创建线程的几种方式"></a>1  创建线程的几种方式</h3><p>实现Runnable接口<br>继承Thread类 重写run方法</p><h3 id="2-重要方法"><a href="#2-重要方法" class="headerlink" title="2 重要方法"></a>2 重要方法</h3><table><thead><tr><th>方法名</th><th align="left">功能说明</th><th>注意</th></tr></thead><tbody><tr><td>start()</td><td align="left">启动一个新线程，在新的线程 运行 run 方法中的代码</td><td>start 方法只是让线程进入就绪，里面代码不一定立刻 运行（CPU 的时间片还没分给它）。每个线程对象的 start方法只能调用一次，如果调用了多次会出现 IllegalThreadStateException</td></tr><tr><td>join()</td><td align="left">阻塞调用线程直至线程结束</td><td></td></tr><tr><td>yield()</td><td align="left">让出cpu调度，线程状态由运行变为就绪</td><td>下次可能还是调度改线程</td></tr><tr><td>interrupt</td><td align="left">打断线程</td><td>如果被打断线程正在 sleep，wait，join 会导致被打断 的线程抛出 InterruptedException，并清除打断标记 ；如果打断的正在运行的线程，则会设置 打断标 记 ；park 的线程被打断，也会设置 打断标记</td></tr><tr><td>interrupted()</td><td align="left">判断当前线程是 否被打断</td><td>会清除 打断标记</td></tr></tbody></table><h3 id="2-线程状态"><a href="#2-线程状态" class="headerlink" title="2 线程状态"></a>2 线程状态</h3><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/thread-convert.png" alt="thread-convert"></p><h3 id="3-线程池"><a href="#3-线程池" class="headerlink" title="3 线程池"></a>3 线程池</h3><h4 id="3-1-自定义线程池"><a href="#3-1-自定义线程池" class="headerlink" title="3.1 自定义线程池"></a>3.1 自定义线程池</h4><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ThreadPool</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> coreSize;<br>    <span class="hljs-keyword">int</span> queueCapacity;<br>    BlockingDeque&lt;Runnable&gt; taskQueue;<br>    TimeUnit timeUnit;<br>    <span class="hljs-keyword">long</span> timeout;<br>    RejectPolicy rejectPolicy;<br>    <span class="hljs-keyword">final</span> Set&lt;Worker&gt; workers = <span class="hljs-keyword">new</span> HashSet&lt;&gt;();<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ThreadPool</span><span class="hljs-params">(<span class="hljs-keyword">int</span> coreSize, <span class="hljs-keyword">int</span> queueCapacity, BlockingDeque&lt;Runnable&gt; blockingDeque, TimeUnit timeUnit, <span class="hljs-keyword">long</span> timeout, RejectPolicy rejectPolicy)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.coreSize = coreSize;<br>        <span class="hljs-keyword">this</span>.queueCapacity = queueCapacity;<br>        <span class="hljs-keyword">this</span>.taskQueue = blockingDeque;<br>        <span class="hljs-keyword">this</span>.timeUnit = timeUnit;<br>        <span class="hljs-keyword">this</span>.timeout = timeout;<br>        <span class="hljs-keyword">this</span>.rejectPolicy = rejectPolicy;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">(Runnable task)</span> </span>&#123;<br>        <span class="hljs-comment">// 当任务数没有超过 coreSize 时，直接交给 worker 对象执行</span><br>        <span class="hljs-comment">// 如果任务数超过 coreSize 时，加入任务队列暂存</span><br>        <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>            <span class="hljs-keyword">if</span> (workers.size() &lt; coreSize) &#123;<br>                Worker worker = <span class="hljs-keyword">new</span> Worker(task);<br>                workers.add(worker);<br>                worker.start();<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-comment">// 1) 死等</span><br>                <span class="hljs-comment">// 2) 带超时等待</span><br>                <span class="hljs-comment">// 3) 让调用者放弃任务执行</span><br>                <span class="hljs-comment">// 4) 让调用者抛出异常</span><br>                <span class="hljs-comment">// 5) 让调用者自己执行任务</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    taskQueue.put(task);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">RejectPolicy</span> </span>&#123;<br><br>    &#125;<br><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Worker</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span> </span>&#123;<br>        Runnable task;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Worker</span><span class="hljs-params">(Runnable task)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.task = task;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">while</span> (task != <span class="hljs-keyword">null</span> || (task = taskQueue.poll(timeout, timeUnit)) != <span class="hljs-keyword">null</span>) &#123;<br>                    task.run();<br>                &#125;<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125; <span class="hljs-keyword">finally</span> &#123;<br>                task = <span class="hljs-keyword">null</span>;<br>            &#125;<br>            <span class="hljs-keyword">synchronized</span> (workers) &#123;<br>                workers.remove(<span class="hljs-keyword">this</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-2-层次结构"><a href="#3-2-层次结构" class="headerlink" title="3.2 层次结构"></a>3.2 层次结构</h4><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/ThreadPool.png" alt="image-20220307090008765"></p><h4 id="3-3-参数含义"><a href="#3-3-参数含义" class="headerlink" title="3.3 参数含义"></a>3.3 参数含义</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> corePoolSize,  核心线程数<br><span class="hljs-keyword">int</span> maximumPoolSize, 最大线程数<br><span class="hljs-keyword">long</span> keepAliveTime, 工作线程存活时间<br>TimeUnit unit, 时间的单位<br>BlockingQueue&lt;Runnable&gt; workQueue, 阻塞队列<br>ThreadFactory threadFactory, 线程工程<br>RejectedExecutionHandler handler 拒绝策略（直接抛弃、抛异常、丢弃最早进入阻塞队列的、由调用者线程执行）<br></code></pre></td></tr></table></figure><ol><li>线程池中刚开始没有线程，当一个任务提交给线程池后，线程池会创建一个新线程来执行任务。</li><li> 当线程数达到 corePoolSize 并没有线程空闲，这时再加入任务，新加的任务会被加入workQueue 队列排队，直到有空闲的线程。 </li><li>如果队列选择了有界队列，那么任务超过了队列大小时，会创建 maximumPoolSize - corePoolSize 数目的线程来救急。 如果线程到达 maximumPoolSize 仍然有新任务这时会执行拒绝策略。</li></ol><p><strong>ShutDown</strong></p><ol><li>不会接收新任务</li><li>已提交的任务会执行完</li></ol><p><strong>ShutDownNow</strong></p><ol><li>不会接收任务</li><li>队列中的任务返回</li><li>interrupt打断正在执行中的任务</li></ol><h3 id="4-JMM-内存模型"><a href="#4-JMM-内存模型" class="headerlink" title="4 JMM 内存模型"></a>4 JMM 内存模型</h3><p>java内存模型规定所有变量保存在主内存中，每个线程有自己的工作内存。线程的工作内存中保存了该线程使用到的变量的主内存拷贝，线程对变量的所有操作都必须在工作内存中进行，而不能直接读写主内存中的变量。不同的线程之间无法直接访问对方的工作内存，需通过主内存才能进行变量的传递。</p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/jmm.png" alt="image-20220304163320142"></p><h3 id="5-可见性、有序性、原子性、volatile"><a href="#5-可见性、有序性、原子性、volatile" class="headerlink" title="5 可见性、有序性、原子性、volatile"></a>5 可见性、有序性、原子性、volatile</h3><h4 id="可见性"><a href="#可见性" class="headerlink" title="可见性"></a><strong>可见性</strong></h4><p>可见性指的是当一个线程修改了共享变量后，其他线程能够立即得知这个修改，volatile可以保证可见性</p><h4 id="有序性"><a href="#有序性" class="headerlink" title="有序性"></a><strong>有序性</strong></h4><p>有序性指的是程序按照代码的先后顺序执行</p><p> 为了性能优化，编译器和处理器会可能进行指令重排序，有时候会改变程序中语句的先后顺序</p><h4 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a><strong>原子性</strong></h4><p>原子性指的是一个或者多个操作在 CPU 执行的过程中不被中断的特性</p><p>在多线程情况下，线程会被操作系统调度进行任务切换，占有CPU时间片段的就执行，否则就阻塞</p><h4 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a><strong>volatile</strong></h4><p><strong>指令重排序</strong></p><p>jvm 在不改变运行结果的前提下，对指令执行的顺序进行调整，以提高程序运行的效率</p><p><strong>内存屏障</strong></p><p>可见性 </p><ol><li>写屏障（sfence）保证在该屏障之前的，对共享变量的改动，都同步到主存当中 </li><li>而读屏障（lfence）保证在该屏障之后，对共享变量的读取，加载的是主存中最新数据</li></ol><p>有序性 </p><ol><li>写屏障会确保指令重排序时，不会将写屏障之前的代码排在写屏障之后 </li><li>读屏障会确保指令重排序时，不会将读屏障之后的代码排在读屏障之前</li></ol><p><strong>volatle 原理</strong></p><p>volatile 的底层实现原理是内存屏障，<code>Memory Barrier``（Memory Fence）</code> </p><p>对 volatile 变量的写指令后会加入写屏障 </p><p>对 volatile 变量的读指令前会加入读屏障</p><h3 id="6-对象头"><a href="#6-对象头" class="headerlink" title="6 对象头"></a>6 对象头</h3><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/head2.png" alt="image-20220303215531080"></p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/head.png" alt="image-20220303215436254"></p><h3 id="7-synchronized-原理"><a href="#7-synchronized-原理" class="headerlink" title="7 synchronized 原理"></a>7 synchronized 原理</h3><h4 id="7-1-monitor-原理"><a href="#7-1-monitor-原理" class="headerlink" title="7.1 monitor 原理"></a>7.1 monitor 原理</h4><p>每个 <code>Java</code> 对象都可以关联一个 <code>Monitor</code> 对象，如果使用 <code>synchronized</code> 给对象上锁（重量级）之后，该对象头的 <code>Mark Word</code> 中就被设置指向 <code>Monitor</code> 对象的指针</p><p><code>Monitor</code> 结构</p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/monitor.png" alt="image-20220304101553600"></p><p>刚开始 <code>Monitor</code> 中 <code>Owner</code> 为 <code>null</code> </p><p>当 <code>Thread-2</code> 执行 <code>synchronized(obj)</code> 就会将 <code>Monitor</code> 的所有者 <code>Owner</code> 置为 <code>Thread-2</code>，<code>Monitor</code>中只能有一 个 <code>Owner</code> </p><p>在<code>Thread-2</code> 上锁的过程中，如果 <code>Thread-3</code>，<code>Thread-4</code>，<code>Thread-5</code> 也来执行 <code>synchronized(obj)</code>，就会进入 <code>EntryList</code> <code>BLOCKED</code> </p><p><code>Thread-2</code> 执行完同步代码块的内容，然后唤醒 <code>EntryList</code> 中等待的线程来竞争锁，竞争的时是非公平的 </p><p>图中 <code>WaitSet</code> 中的 <code>Thread-0</code>，<code>Thread-1</code> 是之前获得过锁，但条件不满足进入 <code>WAITING</code> 状态的线程，后面讲 <code>wait-notify</code> 时会分析</p><h4 id="7-2-轻量级锁"><a href="#7-2-轻量级锁" class="headerlink" title="7.2 轻量级锁"></a>7.2 轻量级锁</h4><p>如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以 使用轻量级锁来优化。 </p><p>在线程的栈桢中创建锁记录（<code>Lock Record</code>）对象，让锁记录中 <code>Object reference</code> 指向锁对象，并尝试用 cas 替换 <code>Object</code> 的 <code>Mark Word</code>，将<code>Mark Word</code> 的值存 入锁记录</p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/lock-cas.png" alt="image-20220304122554620"></p><p><strong>如果 cas 替换成功</strong></p><p>对象头中存储了锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下</p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/lock-cas2.png" alt="image-20220304122859602"></p><p><strong>如果 cas 失败，有两种情况</strong> </p><p>如果是其它线程已经持有了该 <code>Object</code> 的轻量级锁，这时表明有竞争，进入锁膨胀过程</p><p>如果是自己执行了 synchronized 锁重入，那么再添加一条 <code>Lock Record</code> 作为重入的计数</p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/lock-cas3.png" alt="image-20220304123050785"></p><p><strong>当退出 synchronized 代码块（解锁时）</strong></p><p>如果有取值为 <code>null</code> 的锁记录，表示有重入，这时重置锁记录，表示重 入计数减一</p><h4 id="7-3-偏向锁"><a href="#7-3-偏向锁" class="headerlink" title="7.3 偏向锁"></a>7.3 偏向锁</h4><p>如果开启了偏向锁（默认开启），那么对象创建后，<code>markword</code> 最后 3 位为 101，否则为001</p><p>可以添加VM 参数 -XX:-UseBiasedLocking 禁用偏向锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">11</span>:08:<span class="hljs-number">58.117</span> c.TestBiased [t1] - <span class="hljs-keyword">synchronized</span> 前<br><span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000101</span><br><span class="hljs-number">11</span>:08:<span class="hljs-number">58.121</span> c.TestBiased [t1] - <span class="hljs-keyword">synchronized</span> 中<br><span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00011111</span> <span class="hljs-number">11101011</span> <span class="hljs-number">11010000</span> <span class="hljs-number">00000101</span><br><span class="hljs-number">11</span>:08:<span class="hljs-number">58.121</span> c.TestBiased [t1] - <span class="hljs-keyword">synchronized</span> 后<br><span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00011111</span> <span class="hljs-number">11101011</span> <span class="hljs-number">11010000</span> <span class="hljs-number">00000101</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">11</span>:<span class="hljs-number">13</span>:<span class="hljs-number">10.018</span> c.TestBiased [t1] - <span class="hljs-keyword">synchronized</span> 前<br><span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000001</span><br><span class="hljs-number">11</span>:<span class="hljs-number">13</span>:<span class="hljs-number">10.021</span> c.TestBiased [t1] - <span class="hljs-keyword">synchronized</span> 中<br><span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00100000</span> <span class="hljs-number">00010100</span> <span class="hljs-number">11110011</span> <span class="hljs-number">10001000</span><br><span class="hljs-number">11</span>:<span class="hljs-number">13</span>:<span class="hljs-number">10.021</span> c.TestBiased [t1] - <span class="hljs-keyword">synchronized</span> 后<br><span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000000</span> <span class="hljs-number">00000001</span> <br></code></pre></td></tr></table></figure><blockquote><p><strong>注意</strong></p><p>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p><p>正常状态对象一开始是没有 hashCode 的，第一次调用才生成</p><p>调用hashcode()方法，会导致偏向锁被撤销(存储hashcode)</p><p>其他线程使用对象，会导致偏向锁被撤销（轻量级锁）</p><p>调用wait/notify，会导致偏向锁被撤销（重量级锁）</p><p>轻量级锁会在锁记录中记录 hashCode</p><p>重量级锁会在 Monitor 中记录 hashCode</p></blockquote><h4 id="7-4-synchronized-锁升级"><a href="#7-4-synchronized-锁升级" class="headerlink" title="7.4 synchronized 锁升级"></a>7.4 synchronized 锁升级</h4><ol><li><p>如果开启了偏向锁（默认开启），最后三位是101，处于可偏向状态，<code>Mark Word</code>记录线程Id</p></li><li><p>当线程A获取锁时，会对比<code>Mark Word</code>中的线程id和自己的线程id。</p><p>如果相同，获取锁成功</p><p>如果不同，他会检查<code>Mark Word</code> 线程id对应的线程是否存活</p><p>​    如果存活，取消偏向状态，升级为轻量级锁</p><p>​    如果不存活，使用cas替换<code>Mark Word</code>中的线程id为自己的线程id</p></li><li><p>偏向锁状态抢锁失败，代表当前锁有一定的竞争，偏向锁将升级为轻量级锁。<code>JVM</code>会在当前线程的线程栈中创建一条锁记录，锁记录的<code>Object</code> 指针指向锁对象，使用cas操作保存<code>Mark Word</code>的信息，同时使用cas 操作使<code>Mark Word</code> 指向锁记录，开启自旋，重复尝试。</p></li><li><p>当替换失败达到一定次数时(默认是10)，就会进入锁膨胀，升级为重量级锁。如果在此期间还有其他线程竞争锁，立即升级为重量级锁。</p></li><li><p>升级重量级锁， 首先申请一个<code>Monitor</code>对象，让<code>Mark Word</code>指向<code>Monitor</code> 对象，把加锁失败的线程放入到<code>Monitor</code> 对象的<code>EntryList</code>中阻塞</p></li></ol><h3 id="8-wait、notify、notifyAll、join原理"><a href="#8-wait、notify、notifyAll、join原理" class="headerlink" title="8 wait、notify、notifyAll、join原理"></a>8 wait、notify、notifyAll、join原理</h3><p><strong>wait、notify、notifyAll</strong></p><p>当<code>Owner</code> 线程发现条件不满足时，调用<code>wait</code> 方法进入到 <code>Monitor</code> 的 <code>waitSet</code> 进行等待<br>当调用<code>notify</code> 或 <code>notifyAll</code> 会唤醒<code>waitSet</code> 中等待的线程进入<code>entryList</code> 竞争锁</p><p><strong>join</strong> </p><p> <code>t1.join()</code>  将自己加入到 <code>t1</code> 的<code>waitSet</code> 直到 <code>t1</code> 结束</p><p>question：线程对象会在线程结束后唤醒所有等待的线程？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    Object lock = <span class="hljs-keyword">new</span> Object();<br><br>    Thread thread1 = <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-number">200</span>);<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">200</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(i);<br>        &#125;<br>    &#125;);<br><br>    thread1.start();<br><br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>        <span class="hljs-keyword">synchronized</span> (thread1) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                thread1.wait(<span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-number">11</span>);<br>        &#125;<br>    &#125;).start();<br><br>    <span class="hljs-keyword">new</span> Thread(() -&gt; &#123;<br>        <span class="hljs-keyword">synchronized</span> (lock) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                lock.wait(<span class="hljs-number">0</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(<span class="hljs-number">10</span>);<br>        &#125;<br>    &#125;).start();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="9-park-unPark-原理"><a href="#9-park-unPark-原理" class="headerlink" title="9 park unPark 原理"></a>9 park unPark 原理</h3><p>每个线程都有自己的一个 Parker 对象，由三部分组成 <code>_counter</code> ， <code>_cond</code> 和 <code>_mutex</code></p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/park.png" alt="image-20220304161105092"></p><ol><li>当前线程调用 Unsafe.park() 方法 </li><li>检查 _counter ，本情况为 0，这时，获得 _mutex 互斥锁 </li><li>线程进入 _cond 条件变量阻塞 </li><li>设置 _counter = 0</li></ol><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/unpark.png" alt="image-20220304161219021"></p><ol><li>调用 Unsafe.unpark(Thread_0) 方法，设置 _counter 为 1 </li><li>唤醒 _cond 条件变量中的 Thread_0 </li><li>Thread_0 恢复运行 </li><li>设置 _counter 为 0</li></ol><h3 id="10-AQS"><a href="#10-AQS" class="headerlink" title="10 AQS"></a>10 AQS</h3><h4 id="10-1-简介"><a href="#10-1-简介" class="headerlink" title="10.1 简介"></a>10.1 简介</h4><p><code>AQS</code> 全称 <code>AbstractQueuedSynchronizer</code>，<code>JUC</code> 下多个同步工具，比如<code>ReentrantLock</code>，<code>CountDownLatch</code>，<code>Semaphore</code> 都是基于此实现</p><h4 id="10-2-原理"><a href="#10-2-原理" class="headerlink" title="10.2 原理"></a>10.2 原理</h4><p><code>AQS</code> 是一个抽象队列式同步器，底层维护了一个<code>state</code>变量，一个<code>CLH</code>的等待队列，以及可能存在的多个<br><code>Condition</code>队列，<code>AQS</code>使用<code>LockSupport</code>来阻塞和唤醒线程</p><p><strong>exclusiveOwnerThread</strong></p><p>独占模式下的同步器的线程拥有者</p><p><strong>state</strong></p><p><code>state</code> 表示资源的状态（分独占模式和共享模式），子类需要定义如何维护这个状态，控制如何获取锁和释放锁</p><p><strong><code>CLH</code>队列</strong></p><p>基于 FIFO的等待队列，类似于 <code>Monitor</code> 的 <code>EntryList</code></p><p> <img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/CLH.png" alt="image-20220305141401397"></p><p><strong><code>Condition</code>队列</strong></p><p>条件变量来实现等待、唤醒机制，支持多个条件变量，类似于 <code>Monitor</code> 的 <code>WaitSet</code></p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/condition-object.png" alt="image-20220305154000290"></p><h4 id="10-3-ReentrantLock-非公平锁-原理"><a href="#10-3-ReentrantLock-非公平锁-原理" class="headerlink" title="10.3 ReentrantLock(非公平锁) 原理"></a>10.3 ReentrantLock(非公平锁) 原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ReentrantLock</span><span class="hljs-params">()</span> </span>&#123;<br>    sync = <span class="hljs-keyword">new</span> NonfairSync();<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ReentrantLock</code>有公平和非公平实现，默认使用非公平实现</p><p><strong><code>lock()</code>流程</strong></p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/lock.png" alt="未命名文件"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">lock</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))<br>        setExclusiveOwnerThread(Thread.currentThread());<br>    <span class="hljs-keyword">else</span><br>        acquire(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Thread current = Thread.currentThread();<br>    <span class="hljs-keyword">int</span> c = getState();<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-keyword">int</span> nextc = c + acquires;<br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> Node <span class="hljs-title">addWaiter</span><span class="hljs-params">(Node mode)</span> </span>&#123;<br>    Node node = <span class="hljs-keyword">new</span> Node(Thread.currentThread(), mode);<br>    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span><br>    Node pred = tail;<br>    <span class="hljs-keyword">if</span> (pred != <span class="hljs-keyword">null</span>) &#123;<br>        node.prev = pred;<br>        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) &#123;<br>            pred.next = node;<br>            <span class="hljs-keyword">return</span> node;<br>        &#125;<br>    &#125;<br>    enq(node);<br>    <span class="hljs-keyword">return</span> node;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;<br>                setHead(node);<br>                p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                failed = <span class="hljs-keyword">false</span>;<br>                <span class="hljs-keyword">return</span> interrupted;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> ws = pred.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * This node has already set status asking a release</span><br><span class="hljs-comment">         * to signal it, so it can safely park.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * Predecessor was cancelled. Skip over predecessors and</span><br><span class="hljs-comment">         * indicate retry.</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">do</span> &#123;<br>            node.prev = pred = pred.prev;<br>        &#125; <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);<br>        pred.next = node;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * waitStatus must be 0 or PROPAGATE.  Indicate that we</span><br><span class="hljs-comment">         * need a signal, but don&#x27;t park yet.  Caller will need to</span><br><span class="hljs-comment">         * retry to make sure it cannot acquire before parking.</span><br><span class="hljs-comment">         */</span><br>        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>release()</code>流程</strong></p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/release.png" alt="未命名文件-2"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">release</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryRelease(arg)) &#123;<br>        Node h = head;<br>        <span class="hljs-keyword">if</span> (h != <span class="hljs-keyword">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)<br>            unparkSuccessor(h);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> c = getState() - releases;<br>    <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();<br>    <span class="hljs-keyword">boolean</span> free = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        free = <span class="hljs-keyword">true</span>;<br>        setExclusiveOwnerThread(<span class="hljs-keyword">null</span>);<br>    &#125;<br>    setState(c);<br>    <span class="hljs-keyword">return</span> free;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">unparkSuccessor</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If status is negative (i.e., possibly needing signal) try</span><br><span class="hljs-comment">     * to clear in anticipation of signalling.  It is OK if this</span><br><span class="hljs-comment">     * fails or if status is changed by waiting thread.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">int</span> ws = node.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &lt; <span class="hljs-number">0</span>)<br>        compareAndSetWaitStatus(node, ws, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Thread to unpark is held in successor, which is normally</span><br><span class="hljs-comment">     * just the next node.  But if cancelled or apparently null,</span><br><span class="hljs-comment">     * traverse backwards from tail to find the actual</span><br><span class="hljs-comment">     * non-cancelled successor.</span><br><span class="hljs-comment">     */</span><br>    Node s = node.next;<br>    <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.waitStatus &gt; <span class="hljs-number">0</span>) &#123;<br>        s = <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">for</span> (Node t = tail; t != <span class="hljs-keyword">null</span> &amp;&amp; t != node; t = t.prev)<br>            <span class="hljs-keyword">if</span> (t.waitStatus &lt;= <span class="hljs-number">0</span>)<br>                s = t;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (s != <span class="hljs-keyword">null</span>)<br>        LockSupport.unpark(s.thread);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>await()</code>流程</strong></p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/await.png" alt="未命名文件-3"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">await</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException </span>&#123;<br>    <span class="hljs-keyword">if</span> (Thread.interrupted())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> InterruptedException();<br>    Node node = addConditionWaiter();<br>    <span class="hljs-keyword">int</span> savedState = fullyRelease(node);<br>    <span class="hljs-keyword">int</span> interruptMode = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!isOnSyncQueue(node)) &#123;<br>        LockSupport.park(<span class="hljs-keyword">this</span>);<br>        <span class="hljs-keyword">if</span> ((interruptMode = checkInterruptWhileWaiting(node)) != <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (acquireQueued(node, savedState) &amp;&amp; interruptMode != THROW_IE)<br>        interruptMode = REINTERRUPT;<br>    <span class="hljs-keyword">if</span> (node.nextWaiter != <span class="hljs-keyword">null</span>) <span class="hljs-comment">// clean up if cancelled</span><br>        unlinkCancelledWaiters();<br>    <span class="hljs-keyword">if</span> (interruptMode != <span class="hljs-number">0</span>)<br>        reportInterruptAfterWait(interruptMode);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong><code>signal()</code>流程</strong></p><p><img src="/blog/2022/01/27/Java%E5%A4%9A%E7%BA%BF%E7%A8%8B/signal.png" alt="未命名文件-4"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">signal</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!isHeldExclusively())<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalMonitorStateException();<br>    Node first = firstWaiter;<br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-keyword">null</span>)<br>        doSignal(first);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doSignal</span><span class="hljs-params">(Node first)</span> </span>&#123;<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">if</span> ( (firstWaiter = first.nextWaiter) == <span class="hljs-keyword">null</span>)<br>            lastWaiter = <span class="hljs-keyword">null</span>;<br>        first.nextWaiter = <span class="hljs-keyword">null</span>;<br>    &#125; <span class="hljs-keyword">while</span> (!transferForSignal(first) &amp;&amp;<br>             (first = firstWaiter) != <span class="hljs-keyword">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">transferForSignal</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * If cannot change waitStatus, the node has been cancelled.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(node, Node.CONDITION, <span class="hljs-number">0</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Splice onto queue and try to set waitStatus of predecessor to</span><br><span class="hljs-comment">     * indicate that thread is (probably) waiting. If cancelled or</span><br><span class="hljs-comment">     * attempt to set waitStatus fails, wake up to resync (in which</span><br><span class="hljs-comment">     * case the waitStatus can be transiently and harmlessly wrong).</span><br><span class="hljs-comment">     */</span><br>    Node p = enq(node);<br>    <span class="hljs-keyword">int</span> ws = p.waitStatus;<br>    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span> || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))<br>        LockSupport.unpark(node.thread);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>公平锁</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryAcquire</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Thread current = Thread.currentThread();<br>    <span class="hljs-keyword">int</span> c = getState();<br>    <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;<br>            compareAndSetState(<span class="hljs-number">0</span>, acquires)) &#123;<br>            setExclusiveOwnerThread(current);<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) &#123;<br>        <span class="hljs-keyword">int</span> nextc = c + acquires;<br>        <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>        setState(nextc);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置<code>state</code>之前，坚持<code>CLH</code>队列中是否有线程节点，没有时才去设置<code>state</code></p><h4 id="10-4-ReentrantReadWriteLock原理"><a href="#10-4-ReentrantReadWriteLock原理" class="headerlink" title="10.4 ReentrantReadWriteLock原理"></a>10.4 ReentrantReadWriteLock原理</h4><p>读写锁用的是同一个 <code>Sycn</code> 同步器，因此等待队列、<code>state</code> 等也是同一个</p><p><code>w.lock</code></p><p>流程与 <code>ReentrantLock</code> 加锁相比没有特殊之处，不同是写锁状态占了 <code>state</code> 的低 16 位，而读锁使用的是 <code>state</code> 的高 16 位</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryWriteLock</span><span class="hljs-params">()</span> </span>&#123;<br>    Thread current = Thread.currentThread();<br>    <span class="hljs-keyword">int</span> c = getState();<br>    <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">int</span> w = exclusiveCount(c);<br>        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">if</span> (w == MAX_COUNT)<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> Error(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!compareAndSetState(c, c + <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    setExclusiveOwnerThread(current);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果<code>state!=0</code>，<code>w==0</code> 表示加的读锁，不能再加写锁</p><p><code>r.lock</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">acquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)<br>        doAcquireShared(arg);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> unused)</span> </span>&#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Walkthrough:</span><br><span class="hljs-comment">     * 1. If write lock held by another thread, fail.</span><br><span class="hljs-comment">     * 2. Otherwise, this thread is eligible for</span><br><span class="hljs-comment">     *    lock wrt state, so ask if it should block</span><br><span class="hljs-comment">     *    because of queue policy. If not, try</span><br><span class="hljs-comment">     *    to grant by CASing state and updating count.</span><br><span class="hljs-comment">     *    Note that step does not check for reentrant</span><br><span class="hljs-comment">     *    acquires, which is postponed to full version</span><br><span class="hljs-comment">     *    to avoid having to check hold count in</span><br><span class="hljs-comment">     *    the more typical non-reentrant case.</span><br><span class="hljs-comment">     * 3. If step 2 fails either because thread</span><br><span class="hljs-comment">     *    apparently not eligible or CAS fails or count</span><br><span class="hljs-comment">     *    saturated, chain to version with full retry loop.</span><br><span class="hljs-comment">     */</span><br>    Thread current = Thread.currentThread();<br>    <span class="hljs-keyword">int</span> c = getState();<br>    <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;<br>        getExclusiveOwnerThread() != current)<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> r = sharedCount(c);<br>    <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp;<br>        r &lt; MAX_COUNT &amp;&amp;<br>        compareAndSetState(c, c + SHARED_UNIT)) &#123;<br>        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) &#123;<br>            firstReader = current;<br>            firstReaderHoldCount = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) &#123;<br>            firstReaderHoldCount++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            HoldCounter rh = cachedHoldCounter;<br>            <span class="hljs-keyword">if</span> (rh == <span class="hljs-keyword">null</span> || rh.tid != getThreadId(current))<br>                cachedHoldCounter = rh = readHolds.get();<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)<br>                readHolds.set(rh);<br>            rh.count++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> fullTryAcquireShared(current);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果有线程加了写锁并且不是自己，返回-1，加锁失败，阻塞。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">final</span> Node node = addWaiter(Node.SHARED);<br>    <span class="hljs-keyword">boolean</span> failed = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">boolean</span> interrupted = <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">for</span> (;;) &#123;<br>            <span class="hljs-keyword">final</span> Node p = node.predecessor();<br>            <span class="hljs-keyword">if</span> (p == head) &#123;<br>                <span class="hljs-keyword">int</span> r = tryAcquireShared(arg);<br>                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) &#123;<br>                    setHeadAndPropagate(node, r);<br>                    p.next = <span class="hljs-keyword">null</span>; <span class="hljs-comment">// help GC</span><br>                    <span class="hljs-keyword">if</span> (interrupted)<br>                        selfInterrupt();<br>                    failed = <span class="hljs-keyword">false</span>;<br>                    <span class="hljs-keyword">return</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;<br>                parkAndCheckInterrupt())<br>                interrupted = <span class="hljs-keyword">true</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (failed)<br>            cancelAcquire(node);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加锁失败后，进入队列，不同于写锁的是节点类型为shared</p><p><code>w.unlock()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-keyword">int</span> propagate)</span> </span>&#123;<br>    Node h = head; <span class="hljs-comment">// Record old head for check below</span><br>    setHead(node);<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * Try to signal next queued node if:</span><br><span class="hljs-comment">     *   Propagation was indicated by caller,</span><br><span class="hljs-comment">     *     or was recorded (as h.waitStatus either before</span><br><span class="hljs-comment">     *     or after setHead) by a previous operation</span><br><span class="hljs-comment">     *     (note: this uses sign-check of waitStatus because</span><br><span class="hljs-comment">     *      PROPAGATE status may transition to SIGNAL.)</span><br><span class="hljs-comment">     * and</span><br><span class="hljs-comment">     *   The next node is waiting in shared mode,</span><br><span class="hljs-comment">     *     or we don&#x27;t know, because it appears null</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * The conservatism in both of these checks may cause</span><br><span class="hljs-comment">     * unnecessary wake-ups, but only when there are multiple</span><br><span class="hljs-comment">     * racing acquires/releases, so most need signals now or soon</span><br><span class="hljs-comment">     * anyway.</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-keyword">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||<br>        (h = head) == <span class="hljs-keyword">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) &#123;<br>        Node s = node.next;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-keyword">null</span> || s.isShared())<br>            doReleaseShared();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>唤醒后续节点，如果后续节点为<code>shared</code>节点，继续唤醒后面类型为<code>shared</code>的节点</p><p><code>r.unlock()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">releaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> arg)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) &#123;<br>        doReleaseShared();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>tryReleaseShared()</code>如果读锁<code>state</code>状态为0，唤醒后序节点</p><h4 id="10-5：Semaphore原理"><a href="#10-5：Semaphore原理" class="headerlink" title="10.5：Semaphore原理"></a>10.5：Semaphore原理</h4><p>信号量，用来限制同时访问共享资源的线程上限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Sync(<span class="hljs-keyword">int</span> permits) &#123;<br>    setState(permits);<br>&#125;<br></code></pre></td></tr></table></figure><p>构造方法指定<code>state</code>的值，<code>state &gt; 0</code>获取成功，否则获取失败，进入CLH队列阻塞</p><p>释放后，<code>state + 1</code>，唤醒后继节点</p><h4 id="10-6-CountdownLatch原理"><a href="#10-6-CountdownLatch原理" class="headerlink" title="10.6 CountdownLatch原理"></a>10.6 CountdownLatch原理</h4><p>用来同步多个线程之间的工作</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Sync(<span class="hljs-keyword">int</span> count) &#123;<br>    setState(count);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">int</span> <span class="hljs-title">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> acquires)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (getState() == <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>设置<code>state</code>为初始值</p><p><code>await()</code>判断<code>state==0</code>，如果不是，在<code>CLH</code>队列上阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-keyword">int</span> releases)</span> </span>&#123;<br>    <span class="hljs-comment">// Decrement count; signal when transition to zero</span><br>    <span class="hljs-keyword">for</span> (;;) &#123;<br>        <span class="hljs-keyword">int</span> c = getState();<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">int</span> nextc = c-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (compareAndSetState(c, nextc))<br>            <span class="hljs-keyword">return</span> nextc == <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>countDown()</code>，使<code>state--</code></p><p>如果<code>state</code>为0，依次唤醒后面阻塞的节点类型为<code>shared</code>的线程</p><h4 id="10-7-CyclicBarrier原理"><a href="#10-7-CyclicBarrier原理" class="headerlink" title="10.7 CyclicBarrier原理"></a>10.7 CyclicBarrier原理</h4><p>基于<code>ReentrantLock</code>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CyclicBarrier</span><span class="hljs-params">(<span class="hljs-keyword">int</span> parties, Runnable barrierAction)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (parties &lt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException();<br>    <span class="hljs-keyword">this</span>.parties = parties;<br>    <span class="hljs-keyword">this</span>.count = parties;<br>    <span class="hljs-keyword">this</span>.barrierCommand = barrierAction;<br>&#125;<br></code></pre></td></tr></table></figure><p>指定<code>count</code>，<code>barrierAction</code></p><p><code>await()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span> index = --count;<br><span class="hljs-keyword">if</span> (index == <span class="hljs-number">0</span>) &#123;  <span class="hljs-comment">// tripped</span><br>    <span class="hljs-keyword">boolean</span> ranAction = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">final</span> Runnable command = barrierCommand;<br>        <span class="hljs-keyword">if</span> (command != <span class="hljs-keyword">null</span>)<br>            command.run();<br>        ranAction = <span class="hljs-keyword">true</span>;<br>        nextGeneration();<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125; <span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">if</span> (!ranAction)<br>            breakBarrier();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">nextGeneration</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// signal completion of last generation</span><br>    trip.signalAll();<br>    <span class="hljs-comment">// set up next generation</span><br>    count = parties;<br>    generation = <span class="hljs-keyword">new</span> Generation();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (;;) &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-keyword">if</span> (!timed)<br>            trip.await();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nanos &gt; <span class="hljs-number">0L</span>)<br>            nanos = trip.awaitNanos(nanos);<br>    &#125; <span class="hljs-keyword">catch</span> (InterruptedException ie) &#123;<br>        <span class="hljs-keyword">if</span> (g == generation &amp;&amp; ! g.broken) &#123;<br>            breakBarrier();<br>            <span class="hljs-keyword">throw</span> ie;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// We&#x27;re about to finish waiting even if we had not</span><br>            <span class="hljs-comment">// been interrupted, so this interrupt is deemed to</span><br>            <span class="hljs-comment">// &quot;belong&quot; to subsequent execution.</span><br>            Thread.currentThread().interrupt();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (g.broken)<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BrokenBarrierException();<br><br>    <span class="hljs-keyword">if</span> (g != generation)<br>        <span class="hljs-keyword">return</span> index;<br><br>    <span class="hljs-keyword">if</span> (timed &amp;&amp; nanos &lt;= <span class="hljs-number">0L</span>) &#123;<br>        breakBarrier();<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> TimeoutException();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>count--</code>，判断<code>count</code>是否为0，如果是执行<code>barrierCommand</code>，唤醒<code>conditionObject</code>上所有阻塞的对象,重置<code>count</code>，开启下一轮循环</p><p>如果不是调用<code>reentrantLock</code>的<code>condition</code>的<code>await()</code>方法阻塞</p><h3 id="11-并发安全的容器"><a href="#11-并发安全的容器" class="headerlink" title="11 并发安全的容器"></a>11 并发安全的容器</h3><h4 id="11-1-ConcurrentHashMap-原理"><a href="#11-1-ConcurrentHashMap-原理" class="headerlink" title="11.1 ConcurrentHashMap 原理"></a>11.1 ConcurrentHashMap 原理</h4><p><strong>get流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> V <span class="hljs-title">get</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="hljs-keyword">int</span> n, eh; K ek;<br>    <span class="hljs-keyword">int</span> h = spread(key.hashCode());<br>    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;<br>        (e = tabAt(tab, (n - <span class="hljs-number">1</span>) &amp; h)) != <span class="hljs-keyword">null</span>) &#123;<br>        <span class="hljs-keyword">if</span> ((eh = e.hash) == h) &#123;<br>            <span class="hljs-keyword">if</span> ((ek = e.key) == key || (ek != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(ek)))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (eh &lt; <span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> (p = e.find(h, key)) != <span class="hljs-keyword">null</span> ? p.val : <span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">if</span> (e.hash == h &amp;&amp;<br>                ((ek = e.key) == key || (ek != <span class="hljs-keyword">null</span> &amp;&amp; key.equals(ek))))<br>                <span class="hljs-keyword">return</span> e.val;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>节点用<code>volatile</code>修饰，写操作对读可见</p><p>获取节点时，如果头节点是<code>ForwardNode</code>表示正在扩容</p><p><strong>put流程</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span> (tab == <span class="hljs-keyword">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)<br>    tab = initTable();<br></code></pre></td></tr></table></figure><p><code>initTable()</code>使用cas操作保证线程安全</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((f = tabAt(tab, i = (n - <span class="hljs-number">1</span>) &amp; hash)) == <span class="hljs-keyword">null</span>) &#123;<br>    <span class="hljs-keyword">if</span> (casTabAt(tab, i, <span class="hljs-keyword">null</span>,<br>                 <span class="hljs-keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="hljs-keyword">null</span>)))<br>        <span class="hljs-keyword">break</span>;     <br></code></pre></td></tr></table></figure><p>如果该下标没有节点，使用<code>cas</code>设置节点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((fh = f.hash) == MOVED)<br>    tab = helpTransfer(tab, f);<br></code></pre></td></tr></table></figure><p>如果节点是<code>ForwardNode</code>，帮助扩容。如果不是，对头节点加锁，再进行插入</p><p><strong>transfer流程</strong></p><ol><li>给线程分配任务区间</li><li>转移下标的头节点加锁</li><li>转移完成的下标添加<code>ForwardNode</code></li></ol><p><strong>size 流程</strong></p><p>多个累加单元，进行大小计算</p><h4 id="11-2-LinkedBlockedQueue原理"><a href="#11-2-LinkedBlockedQueue原理" class="headerlink" title="11.2 LinkedBlockedQueue原理"></a>11.2 LinkedBlockedQueue原理</h4><p>两把锁，一把加在头节点，一把加在尾节点</p><p>同一时刻，可以允许两个线程同时（一个生产者与一个消费者）执行 </p><p>消费者与消费者线程仍然串行</p><p>生产者与生产者线程仍然串行</p><h4 id="11-3-ConcurrentLinkedQueue"><a href="#11-3-ConcurrentLinkedQueue" class="headerlink" title="11.3 ConcurrentLinkedQueue"></a>11.3 ConcurrentLinkedQueue</h4><p>和<code>LinkedBlockedQueue</code>类似，不同的是”锁”使用<code>cas</code>机制来保证</p><h4 id="11-4-CopyOnWriteArrayList"><a href="#11-4-CopyOnWriteArrayList" class="headerlink" title="11.4 CopyOnWriteArrayList"></a>11.4 CopyOnWriteArrayList</h4><p>能做到读读并发，读写并发</p><p>写元素时，会把原理的数组复制一遍，在复制完的数组上修改，修改完之后再替换原理的数组</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>并发、多线程、Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法</title>
    <link href="/blog/2022/01/18/algorithm/"/>
    <url>/blog/2022/01/18/algorithm/</url>
    
    <content type="html"><![CDATA[<p>注：算法模拟学习网站 <a href="https://visualgo.net/zh">https://visualgo.net/zh</a></p><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><h2 id="第一个大于目标元素"><a href="#第一个大于目标元素" class="headerlink" title="第一个大于目标元素"></a>第一个大于目标元素</h2><figure class="highlight java"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">upperBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[m] &lt;= target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[l] &gt; target ? l : nums.length;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第一个大于等于目标元素"><a href="#第一个大于等于目标元素" class="headerlink" title="第一个大于等于目标元素"></a>第一个大于等于目标元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowerBound</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> m = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[m] &lt; target) l = m + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> r = m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[l] &gt;= target ? l : nums.length;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第一个小于目标元素"><a href="#第一个小于目标元素" class="headerlink" title="第一个小于目标元素"></a>第一个小于目标元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">upperBoundReverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> m = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[m] &gt;= target) r = m - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> l = m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[l] &lt; target ? l : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="第一个小于等于目标元素"><a href="#第一个小于等于目标元素" class="headerlink" title="第一个小于等于目标元素"></a>第一个小于等于目标元素</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lowerBoundReverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> target)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> m = (l + r + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[m] &gt; target) r = m - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> l = m;<br>    &#125;<br>    <span class="hljs-keyword">return</span> nums[l] &lt;= target ? l : -<span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>规律：大移左，小移右</p><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> temp = a[i];<br>    a[i] = a[j];<br>    a[j] = temp;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">select</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j &lt; a.length; j++) &#123;<br>            <span class="hljs-keyword">if</span> (a[j] &lt; a[i]) &#123;<br>                swap(a, i, j);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bubble</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = a.length - <span class="hljs-number">1</span>; j &gt; <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-keyword">if</span> (a[j] &lt; a[j - <span class="hljs-number">1</span>]) &#123;<br>                swap(a, j, j - <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; a.length; i++) &#123;<br>        <span class="hljs-keyword">int</span> num = a[i];<br>        <span class="hljs-keyword">int</span> j;<br>        <span class="hljs-keyword">for</span> (j = i; j &gt;= <span class="hljs-number">1</span> &amp;&amp; num &lt; a[j - <span class="hljs-number">1</span>]; j--) &#123;<br>            a[j] = a[j - <span class="hljs-number">1</span>];<br>        &#125;<br>        a[j] = num;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">shellSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] a)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> d = a.length / <span class="hljs-number">2</span>; d &gt; <span class="hljs-number">0</span>; d /= <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = d; i &lt; a.length; i++) &#123;<br>            <span class="hljs-keyword">int</span> num = a[i];<br>            <span class="hljs-keyword">int</span> j;<br>            <span class="hljs-keyword">for</span> (j = i; j &gt;= d &amp;&amp; num &lt; a[j - d]; j -= d) &#123;<br>                a[j] = a[j - d];<br>            &#125;<br>            a[j] = num;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> l = low;<br>    <span class="hljs-keyword">int</span> r = high;<br>    <span class="hljs-keyword">if</span> (l &gt;= r) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> pivot = nums[l];<br>    <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] &gt;= pivot) r--;<br>        nums[l] = nums[r];<br><br>        <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l] &lt;= pivot) l++;<br>        nums[r] = nums[l];<br>    &#125;<br>    nums[l] = pivot;<br>    quickSort(nums, low, l - <span class="hljs-number">1</span>);<br>    quickSort(nums, l + <span class="hljs-number">1</span>, high);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span>[] tmp, <span class="hljs-keyword">int</span> low, <span class="hljs-keyword">int</span> high)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (low &gt;= high) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">int</span> mid = (low + high) &gt;&gt; <span class="hljs-number">1</span>;<br>    mergeSort(nums, tmp, low, mid);<br>    mergeSort(nums, tmp, mid + <span class="hljs-number">1</span>, high);<br>    <span class="hljs-keyword">int</span> i = low, j = mid + <span class="hljs-number">1</span>, k = low;<br>    <span class="hljs-keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= high) tmp[k++] = nums[i] &lt; nums[j] ? nums[i++] : nums[j++];<br>    <span class="hljs-keyword">while</span> (j &lt;= high) tmp[k++] = nums[j++];<br>    <span class="hljs-keyword">while</span> (i &lt;= mid) tmp[k++] = nums[i++];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = low; l &lt;= high; l++) &#123;<br>        nums[l] = tmp[l];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums.length / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        heapAdjust(nums, i, nums.length - <span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = nums.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>        swap(nums, <span class="hljs-number">0</span>, i);<br>        heapAdjust(nums, <span class="hljs-number">0</span>, i - <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">heapAdjust</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> root, <span class="hljs-keyword">int</span> tail)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">2</span> * root + <span class="hljs-number">1</span> &lt;= tail) &#123;<br>        <span class="hljs-keyword">int</span> idx = <span class="hljs-number">2</span> * root + <span class="hljs-number">2</span> &lt;= tail &amp;&amp; nums[<span class="hljs-number">2</span> * root + <span class="hljs-number">2</span>] &gt; nums[<span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>] ? <span class="hljs-number">2</span> * root + <span class="hljs-number">2</span> : <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (nums[idx] &lt;= nums[root]) <span class="hljs-keyword">break</span>;<br>        swap(nums, root, idx);<br>        root = idx;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">radixSort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-comment">// d轮</span><br>    <span class="hljs-keyword">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>        max = Math.max(max, num);<br>    &#125;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (max != <span class="hljs-number">0</span>) &#123;<br>        max /= <span class="hljs-number">10</span>;<br>        d++;<br>    &#125;<br><br>    Queue&lt;Integer&gt;[] queue = <span class="hljs-keyword">new</span> LinkedList[<span class="hljs-number">10</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>        queue[i] = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; d; i++) &#123;<br>        <span class="hljs-comment">//分配</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> num : nums) &#123;<br>            queue[num / (<span class="hljs-keyword">int</span>) Math.pow(<span class="hljs-number">10</span>, i) % <span class="hljs-number">10</span>].add(num);<br>        &#125;<br>        <span class="hljs-comment">// 收集</span><br>        <span class="hljs-keyword">int</span> idx = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">10</span>; j++) &#123;<br>            <span class="hljs-keyword">while</span> (!queue[j].isEmpty()) nums[idx++] = queue[j].poll();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TraceBack</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] num, <span class="hljs-keyword">int</span> idx)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (idx == num.length) <span class="hljs-comment">//结束条件</span><br>            <span class="hljs-keyword">return</span>;  <span class="hljs-comment">// 存储路径,结果 </span><br>        <span class="hljs-comment">// 选择</span><br>        traceback(num, idx + <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 回溯</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="子集-不带重复元素"><a href="#子集-不带重复元素" class="headerlink" title="子集(不带重复元素)"></a>子集(不带重复元素)</h2><p><a href="https://leetcode-cn.com/problems/subsets/">https://leetcode-cn.com/problems/subsets/</a></p><p><img src="/blog/2022/01/18/algorithm/subset.png" alt="image-20220130112503143"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>Deque&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    traceback(nums, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i == nums.length) &#123;<br>        res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(cur));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    traceback(nums, i + <span class="hljs-number">1</span>);<br>    cur.offerLast(nums[i]);<br>    traceback(nums, i + <span class="hljs-number">1</span>);<br>    cur.pollLast();<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="子集-带重复元素"><a href="#子集-带重复元素" class="headerlink" title="子集(带重复元素)"></a>子集(带重复元素)</h2><p><a href="https://leetcode-cn.com/problems/subsets-ii/">https://leetcode-cn.com/problems/subsets-ii/</a></p><p><img src="/blog/2022/01/18/algorithm/subsetWithDup.png" alt="image-20220130112746410"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>Deque&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    Arrays.sort(nums);<br>    traceback(nums, <span class="hljs-number">0</span>, <span class="hljs-keyword">false</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">boolean</span> choose)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i == nums.length) &#123;<br>        res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(cur));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    traceback(nums, i + <span class="hljs-number">1</span>, <span class="hljs-keyword">false</span>);<br><br>    <span class="hljs-keyword">if</span> (!choose &amp;&amp; i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>])<br>        <span class="hljs-keyword">return</span>;<br><br>    cur.offerLast(nums[i]);<br>    traceback(nums, i + <span class="hljs-number">1</span>, <span class="hljs-keyword">true</span>);<br>    cur.pollLast();<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="全排列-不带重复元素"><a href="#全排列-不带重复元素" class="headerlink" title="全排列(不带重复元素)"></a>全排列(不带重复元素)</h2><p><a href="https://leetcode-cn.com/problems/permutations/">https://leetcode-cn.com/problems/permutations/</a></p><p><img src="/blog/2022/01/18/algorithm/permute.png" alt="image-20220130112943621"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    <span class="hljs-keyword">boolean</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[nums.length];<br>    traceback(res, <span class="hljs-keyword">new</span> LinkedList&lt;&gt;(), nums, visited, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; res, LinkedList&lt;Integer&gt; cur, <span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">boolean</span>[] visited, <span class="hljs-keyword">int</span> index)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (index == nums.length) &#123;<br>        res.add(<span class="hljs-keyword">new</span> LinkedList&lt;&gt;(cur));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">if</span> (!visited[i]) &#123;<br>            visited[i] = <span class="hljs-keyword">true</span>;<br>            cur.offerLast(nums[i]);<br>            traceback(res, cur, nums, visited, index + <span class="hljs-number">1</span>);<br>            cur.pollLast();<br>            visited[i] = <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="全排列-带重复元素"><a href="#全排列-带重复元素" class="headerlink" title="全排列(带重复元素)"></a>全排列(带重复元素)</h2><p><a href="https://leetcode-cn.com/problems/permutations-ii/">https://leetcode-cn.com/problems/permutations-ii/</a></p><p><img src="/blog/2022/01/18/algorithm/permuteUnique.png" alt="image-20220130113113676"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>Deque&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="hljs-keyword">int</span>[] nums) &#123;<br>    Arrays.sort(nums);<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">boolean</span>[] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>    traceback(nums, visited, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">boolean</span>[] visited, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i == nums.length) &#123;<br>        res.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(cur));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; nums.length; j++) &#123;<br>        <span class="hljs-keyword">if</span> (visited[j] || (j &gt; <span class="hljs-number">0</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>] &amp;&amp; !visited[j - <span class="hljs-number">1</span>])) <span class="hljs-keyword">continue</span>;<br>        cur.offerLast(nums[j]);<br>        visited[j] = <span class="hljs-keyword">true</span>;<br>        traceback(nums, visited, i + <span class="hljs-number">1</span>);<br>        visited[j] = <span class="hljs-keyword">false</span>;<br>        cur.pollLast();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h2><p><a href="https://leetcode-cn.com/problems/number-of-islands/">https://leetcode-cn.com/problems/number-of-islands/</a></p><p><img src="/blog/2022/01/18/algorithm/numIslands.png" alt="image-20220130113159511"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">numIslands</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[][] grid)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> count = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> m = grid.length;<br>    <span class="hljs-keyword">int</span> n = grid[<span class="hljs-number">0</span>].length;<br>    <span class="hljs-keyword">boolean</span>[][] visited = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[m][n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (!visited[i][j] &amp;&amp; grid[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                count++;<br>                expand(visited, grid, i, j, m, n);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">expand</span><span class="hljs-params">(<span class="hljs-keyword">boolean</span>[][] visited, <span class="hljs-keyword">char</span>[][] grid, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (i &lt; <span class="hljs-number">0</span> || j &lt; <span class="hljs-number">0</span> || i &gt;= m || j &gt;= n || visited[i][j] || grid[i][j] == <span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">return</span>;<br>    visited[i][j] = <span class="hljs-keyword">true</span>;<br>    expand(visited, grid, i - <span class="hljs-number">1</span>, j, m, n);<br>    expand(visited, grid, i + <span class="hljs-number">1</span>, j, m, n);<br>    expand(visited, grid, i, j - <span class="hljs-number">1</span>, m, n);<br>    expand(visited, grid, i, j + <span class="hljs-number">1</span>, m, n);<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="组合总数"><a href="#组合总数" class="headerlink" title="组合总数"></a>组合总数</h2><p><a href="https://leetcode-cn.com/problems/combination-sum/">https://leetcode-cn.com/problems/combination-sum/</a></p><p><img src="/blog/2022/01/18/algorithm/combinationSum.png" alt="image-20220130113315442"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;List&lt;Integer&gt;&gt; res = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>Deque&lt;Integer&gt; cur = <span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="hljs-keyword">int</span>[] candidates, <span class="hljs-keyword">int</span> target) &#123;<br>    traceback(candidates, target, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">traceback</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] candidates, <span class="hljs-keyword">int</span> target, <span class="hljs-keyword">int</span> idx)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (idx == candidates.length) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-keyword">if</span> (target == <span class="hljs-number">0</span>) &#123;<br>        res.add(<span class="hljs-keyword">new</span> ArrayList&lt;&gt;(cur));<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br><br>    traceback(candidates, target, idx + <span class="hljs-number">1</span>);<br><br>    <span class="hljs-keyword">if</span> (target &gt;= candidates[idx]) &#123;<br>        cur.offerLast(candidates[idx]);<br>        traceback(candidates, target - candidates[idx], idx);<br>        cur.pollLast();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="一维"><a href="#一维" class="headerlink" title="一维"></a>一维</h2><h3 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h3><p><a href="https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/">https://leetcode-cn.com/problems/fei-bo-na-qi-shu-lie-lcof/</a></p><p><img src="/blog/2022/01/18/algorithm/fib.png" alt="image-20220129153743398"></p><hr><p>状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[i] = dp[i-<span class="hljs-number">1</span>] + dp[i-<span class="hljs-number">2</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fib</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>    dp[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        dp[i] = (dp[i - <span class="hljs-number">1</span>] + dp[i - <span class="hljs-number">2</span>]) % <span class="hljs-number">1000000007</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(n)</p><hr><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fib2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> n;<br>    <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; n; i++) &#123;<br>        c = (a + b) % <span class="hljs-number">1000000007</span>;<br>        a = b;<br>        b = c;<br>    &#125;<br>    <span class="hljs-keyword">return</span> c;<br><br></code></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(1)</p><hr><h3 id="单词拆分"><a href="#单词拆分" class="headerlink" title="单词拆分"></a>单词拆分</h3><p><a href="https://leetcode-cn.com/problems/word-break/">https://leetcode-cn.com/problems/word-break/</a></p><p><img src="/blog/2022/01/18/algorithm/wordbreak.png" alt="image-20220129154658100"></p><hr><p>状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[i] = dp[i - len]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">wordBreak</span><span class="hljs-params">(String s, List&lt;String&gt; wordDict)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = s.length();<br>    <span class="hljs-keyword">boolean</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n + <span class="hljs-number">1</span>];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-keyword">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (String word : wordDict) &#123;<br>            <span class="hljs-keyword">int</span> len = word.length();<br>            <span class="hljs-keyword">if</span> (dp[i]) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (i - len &gt;= <span class="hljs-number">0</span> &amp;&amp; word.equals(s.substring(i - len, i))) dp[i] = dp[i - len];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(nm)，空间复杂度O(n)</p><hr><h3 id="打家劫舍"><a href="#打家劫舍" class="headerlink" title="打家劫舍"></a>打家劫舍</h3><p><a href="https://leetcode-cn.com/problems/house-robber/">https://leetcode-cn.com/problems/house-robber/</a></p><p><img src="/blog/2022/01/18/algorithm/rob.png" alt="image-20220129194347785"></p><hr><p>状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + nums[i];<br>dp[i][<span class="hljs-number">1</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]); <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n][<span class="hljs-number">2</span>];<br>    dp[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = dp[i - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>] + nums[i];<br>        dp[i][<span class="hljs-number">1</span>] = Math.max(dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],dp[i-<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> Math.max(dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">0</span>], dp[n - <span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(n)</p><hr><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span> a = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> c = a;<br>    <span class="hljs-keyword">int</span> d = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        c = b + nums[i];<br>        d = Math.max(a, b);<br>        a = c;<br>        b = d;<br>    &#125;<br>    <span class="hljs-keyword">return</span> Math.max(c, d);<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(1)</p><hr><h2 id="二维"><a href="#二维" class="headerlink" title="二维"></a>二维</h2><h3 id="不同路径"><a href="#不同路径" class="headerlink" title="不同路径"></a>不同路径</h3><p><a href="https://leetcode-cn.com/problems/unique-paths/">https://leetcode-cn.com/problems/unique-paths/</a></p><p><img src="/blog/2022/01/18/algorithm/uniquePaths.png" alt="image-20220129155437584"></p><hr><p>状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">uniquePaths</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m][n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        dp[i][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        dp[<span class="hljs-number">0</span>][i] = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            dp[i][j] = dp[i - <span class="hljs-number">1</span>][j] + dp[i][j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[m - <span class="hljs-number">1</span>][n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(m<em>n)，空间复杂度O(m</em>n)</p><hr><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">uniquePaths2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    Arrays.fill(dp, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>            dp[j] += dp[j - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[n - <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(m*n)，空间复杂度O(n)</p><hr><p>数学方法   需要走 m + n - 2 步，向下走 n - 1 步，组合数<br>$$<br>C{n-1 \choose m+n-2    }<br>$$</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">uniquePath3</span><span class="hljs-params">(<span class="hljs-keyword">int</span> m, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">long</span> res = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>, y = n; x &lt; m; x++, y++) &#123;<br>        res = res * y / x;<br>    &#125;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-keyword">int</span>) res;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度 O(m)，空间复杂度O(1)</p><hr><h3 id="最长回文字串"><a href="#最长回文字串" class="headerlink" title="最长回文字串"></a>最长回文字串</h3><p><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></p><p><img src="/blog/2022/01/18/algorithm/longestPalindrome.png" alt="image-20220129161901938"></p><hr><p>方法一：动态规划</p><p>状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[len][i] = dp[len - <span class="hljs-number">2</span>][i + <span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = s.length();<br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">boolean</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n + <span class="hljs-number">1</span>][n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        dp[<span class="hljs-number">1</span>][i] = <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i + len &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">boolean</span> val = s.charAt(i) == s.charAt(i + len - <span class="hljs-number">1</span>) &amp;&amp; (len - <span class="hljs-number">2</span> == <span class="hljs-number">0</span> || dp[len - <span class="hljs-number">2</span>][i + <span class="hljs-number">1</span>]);<br>            <span class="hljs-keyword">if</span> (val) &#123;<br>                maxLen = len;<br>                start = i;<br>            &#125;<br>            dp[len][i] = val;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.substring(start, start + maxLen);<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n^2)，空间复杂度O(n^2)</p><hr><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome2</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = s.length();<br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">boolean</span>[] row1 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>    <span class="hljs-keyword">boolean</span>[] row2 = <span class="hljs-keyword">new</span> <span class="hljs-keyword">boolean</span>[n];<br>    Arrays.fill(row1, <span class="hljs-keyword">true</span>);<br>    Arrays.fill(row2, <span class="hljs-keyword">true</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">2</span>; len &lt;= n; len++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i + len &lt;= n; i++) &#123;<br>            <span class="hljs-keyword">boolean</span> val = s.charAt(i) == s.charAt(i + len - <span class="hljs-number">1</span>) &amp;&amp; row1[i + <span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">if</span> (val) &#123;<br>                maxLen = len;<br>                start = i;<br>            &#125;<br>            row1[i] = val;<br>        &#125;<br>        <span class="hljs-keyword">boolean</span>[] tmp = row1;<br>        row1 = row2;<br>        row2 = tmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.substring(start, start + maxLen);<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n^2)，空间复杂度O(n)</p><hr><p>方法二：中心扩展法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome3</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> center = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i + maxLen / <span class="hljs-number">2</span> &lt; s.length(); i++) &#123;<br>        <span class="hljs-keyword">int</span> len = Math.max(expandCenter(s, i, i), expandCenter(s, i, i + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">if</span> (len &gt; maxLen) &#123;<br>            maxLen = len;<br>            center = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> s.substring(center - (maxLen - <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>, center + maxLen / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">expandCenter</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">while</span> (l &gt;= <span class="hljs-number">0</span> &amp;&amp; r &lt; s.length() &amp;&amp; s.charAt(l) == s.charAt(r)) &#123;<br>        l--;<br>        r++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r - l - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n^2)，空间复杂度O(1)</p><hr><p>方法三：Manacher 算法(非常复杂，见算法提升)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome4</span><span class="hljs-params">(String s)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> start = <span class="hljs-number">0</span>, end = -<span class="hljs-number">1</span>;<br>    StringBuffer t = <span class="hljs-keyword">new</span> StringBuffer(<span class="hljs-string">&quot;#&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>        t.append(s.charAt(i));<br>        t.append(<span class="hljs-string">&#x27;#&#x27;</span>);<br>    &#125;<br>    t.append(<span class="hljs-string">&#x27;#&#x27;</span>);<br>    s = t.toString();<br><br>    List&lt;Integer&gt; arm_len = <span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br>    <span class="hljs-keyword">int</span> right = -<span class="hljs-number">1</span>, j = -<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.length(); ++i) &#123;<br>        <span class="hljs-keyword">int</span> cur_arm_len;<br>        <span class="hljs-keyword">if</span> (right &gt;= i) &#123;<br>            <span class="hljs-keyword">int</span> i_sym = j * <span class="hljs-number">2</span> - i;<br>            <span class="hljs-keyword">int</span> min_arm_len = Math.min(arm_len.get(i_sym), right - i);<br>            cur_arm_len = expand(s, i - min_arm_len, i + min_arm_len);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            cur_arm_len = expand(s, i, i);<br>        &#125;<br>        arm_len.add(cur_arm_len);<br>        <span class="hljs-keyword">if</span> (i + cur_arm_len &gt; right) &#123;<br>            j = i;<br>            right = i + cur_arm_len;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (cur_arm_len * <span class="hljs-number">2</span> + <span class="hljs-number">1</span> &gt; end - start) &#123;<br>            start = i - cur_arm_len;<br>            end = i + cur_arm_len;<br>        &#125;<br>    &#125;<br><br>    StringBuffer ans = <span class="hljs-keyword">new</span> StringBuffer();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = start; i &lt;= end; ++i) &#123;<br>        <span class="hljs-keyword">if</span> (s.charAt(i) != <span class="hljs-string">&#x27;#&#x27;</span>) &#123;<br>            ans.append(s.charAt(i));<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans.toString();<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(n) </p><hr><h3 id="最长递增子串"><a href="#最长递增子串" class="headerlink" title="最长递增子串"></a>最长递增子串</h3><p><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">https://leetcode-cn.com/problems/longest-increasing-subsequence/</a></p><p><img src="/blog/2022/01/18/algorithm/lengthOfLIS.png" alt="截屏2022-01-29 下午8.41.00"></p><hr><p>方法一：动态规划</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">dp<span class="hljs-selector-attr">[i]</span> = Max(dp<span class="hljs-selector-attr">[0]</span>,dp<span class="hljs-selector-attr">[j]</span>) + <span class="hljs-number">1</span> <span class="hljs-keyword">in</span> case of  j &lt; <span class="hljs-selector-tag">i</span> &amp;&amp;  nums<span class="hljs-selector-attr">[i]</span> &gt; nums<span class="hljs-selector-attr">[j]</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    dp[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> max = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i - <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>            <span class="hljs-keyword">if</span> (nums[i] &gt; nums[j]) &#123;<br>                tmp = Math.max(tmp, dp[j] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        dp[i] = tmp;<br>        max = Math.max(max, dp[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> max;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n^2)，空间复杂度O(n^2)</p><hr><p>方法二：贪心+二分</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLIS2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = nums.length;<br>    <span class="hljs-keyword">int</span>[] d = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n];<br>    <span class="hljs-keyword">int</span> len = <span class="hljs-number">1</span>;<br>    d[<span class="hljs-number">0</span>] = nums[<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (nums[i] &gt; d[len - <span class="hljs-number">1</span>]) d[len++] = nums[i];<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">int</span> r = len - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (l &lt; r) &#123;<br>                <span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">if</span> (d[mid] &lt; nums[i]) l = mid + <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">else</span> r = mid;<br>            &#125;<br>            d[l] = nums[i];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(nlgn)，空间复杂度O(n)</p><h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><a href="https://leetcode-cn.com/problems/longest-common-subsequence/">https://leetcode-cn.com/problems/longest-common-subsequence/</a></p><p><img src="/blog/2022/01/18/algorithm/longestCommonSubsequence.png" alt="image-20220129211749129"></p><hr><p>状态转移方程</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>  or  dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>])<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">longestCommonSubsequence</span><span class="hljs-params">(String text1, String text2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = text1.length();<br>    <span class="hljs-keyword">int</span> n = text2.length();<br>    <span class="hljs-keyword">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[m + <span class="hljs-number">1</span>][n + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (text1.charAt(i - <span class="hljs-number">1</span>) == text2.charAt(j - <span class="hljs-number">1</span>)) dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> dp[i][j] = Math.max(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> dp[m][n];<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(mn)，空间复杂度O(mn)</p><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">longestCommonSubsequence2</span><span class="hljs-params">(String text1, String text2)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> m = text1.length();<br>    <span class="hljs-keyword">int</span> n = text2.length();<br>    <span class="hljs-keyword">int</span>[] pre = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">int</span>[] cur = <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[n + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j++) &#123;<br>            <span class="hljs-keyword">if</span> (text1.charAt(i - <span class="hljs-number">1</span>) == text2.charAt(j - <span class="hljs-number">1</span>)) cur[j] = pre[j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> cur[j] = Math.max(pre[j], cur[j - <span class="hljs-number">1</span>]);<br>        &#125;<br>        <span class="hljs-keyword">int</span>[] tmp = pre;<br>        pre = cur;<br>        cur = tmp;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre[n];<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(m,n)，空间复杂度O(min(m,n))</p><h2 id="树形"><a href="#树形" class="headerlink" title="树形"></a>树形</h2><h3 id="打家劫舍3"><a href="#打家劫舍3" class="headerlink" title="打家劫舍3"></a>打家劫舍3</h3><p><a href="https://leetcode-cn.com/problems/house-robber-iii/">https://leetcode-cn.com/problems/house-robber-iii/</a></p><p><img src="/blog/2022/01/18/algorithm/rob3.png" alt="image-20220129200436309"></p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    Map&lt;TreeNode, <span class="hljs-keyword">int</span>[]&gt; dp = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>    postOrder(root, dp);<br>    <span class="hljs-keyword">return</span> Math.max(dp.get(root)[<span class="hljs-number">0</span>], dp.get(root)[<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">(TreeNode root, Map&lt;TreeNode, <span class="hljs-keyword">int</span>[]&gt; dp)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span>;<br>    postOrder(root.left, dp);<br>    postOrder(root.right, dp);<br><br><br>    dp.put(root, <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<br>            root.val + (dp.get(root.left) == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : dp.get(root.left)[<span class="hljs-number">1</span>]) + (dp.get(root.right) == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : dp.get(root.right)[<span class="hljs-number">1</span>]),<br>            (dp.get(root.left) == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : Math.max(dp.get(root.left)[<span class="hljs-number">0</span>], dp.get(root.left)[<span class="hljs-number">1</span>])) +<br>                    (dp.get(root.right) == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : Math.max(dp.get(root.right)[<span class="hljs-number">0</span>], dp.get(root.right)[<span class="hljs-number">1</span>]))<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(n)</p><hr><p>优化后</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">rob2</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span>[] res = postOrder2(root);<br>    <span class="hljs-keyword">return</span> Math.max(res[<span class="hljs-number">0</span>], res[<span class="hljs-number">1</span>]);<br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span>[] postOrder2(TreeNode root) &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-keyword">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">int</span>[] left = postOrder2(root.left);<br>    <span class="hljs-keyword">int</span>[] right = postOrder2(root.right);<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<br>            root.val + left[<span class="hljs-number">1</span>] + right[<span class="hljs-number">1</span>],<br>            Math.max(left[<span class="hljs-number">0</span>], left[<span class="hljs-number">1</span>]) + Math.max(right[<span class="hljs-number">0</span>], right[<span class="hljs-number">1</span>])<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>时间复杂度O(n)，空间复杂度O(1)  不算递归栈</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>算法</tag>
      
      <tag>排序</tag>
      
      <tag>查找</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
